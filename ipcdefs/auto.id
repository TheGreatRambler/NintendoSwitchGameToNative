@version(2.0.0)
type nn::hid::debug::FirmwareVersion = bytes<0x4, 0x1>;
@version(2.0.0)
type nn::hid::system::PlayReportRegisteredDevice = unknown;
@version(2.0.0)
type nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType> = u32;
@version(2.0.0-3.0.0)
type nn::pctl::SafetyLevelSettings = bytes<0x3, 0x1>;
type nn::ApplicationId = u64;
type nn::TimeSpan = u64;
type nn::TimeSpanType = u64;
type nn::account::CallbackUri = bytes<0x100, unknown>;
type nn::account::NetworkServiceAccountId = u64;
type nn::account::Nickname = bytes<0x21, 0x1>;
type nn::account::NintendoAccountAuthorizationRequestParameters = bytes<0x200, unknown>;
type nn::account::NintendoAccountId = u64;
type nn::account::RequestUrl = bytes<0x1000, unknown>;
type nn::account::SystemProgramIdentification = bytes<0x10, unknown>;
type nn::account::Uid = bytes<0x10, 0x8>;
type nn::account::detail::Uuid = bytes<0x10, 0x4>;
type nn::account::nas::NasClientInfo = bytes<0x108, unknown>;
@version(2.0.0)
type nn::account::nas::NasUserBase = bytes<0x24b, unknown>;
@version(3.0.0+)
type nn::account::nas::NasUserBase = bytes<0x24f, unknown>;
type nn::account::nas::NasUserBaseForApplication = bytes<0x68, unknown>;
type nn::account::nas::State = bytes<0x80, unknown>;
type nn::account::profile::ProfileBase = bytes<0x38, 0x8>;
type nn::account::profile::UserData = bytes<0x80, unknown>;
type nn::am::AppletMessage = u32;
type nn::am::service::AppletIdentityInfo = bytes<0x10, 0x8>;
@version(3.0.0)
type nn::am::service::AppletIdentityInfo = unknown;
type nn::am::service::AppletKind = bytes<0x8, 0x4>;
type nn::am::service::AppletProcessLaunchReason = bytes<0x4, 0x1>;
type nn::am::service::EmulatedButtonEvent = u32;
type nn::am::service::LibraryAppletInfo = bytes<0x8, 0x4>;
type nn::am::service::WindowCreationOption = u32;
type nn::apm::EventTarget = u32;
type nn::apm::PerformanceConfiguration = u32;
type nn::apm::PerformanceMode = u32;
type nn::apm::ThrottlingState = bytes<0x28, 0x8>;
type nn::applet::AppletResourceUserId = u64;
type nn::bcat::DeliveryCacheDirectoryEntry = unknown;
type nn::bcat::Digest = bytes<0x10, 0x8>;
type nn::bcat::DirectoryName = bytes<0x20, 0x1>;
type nn::bcat::FileName = bytes<0x20, 0x1>;
type nn::bcat::PushNotificationLog = unknown;
type nn::bcat::TaskInfo = unknown;
type nn::bcat::detail::DeliveryCacheProgressImpl = bytes<0x200, unknown>;
type nn::fgm::Module = u32;
type nn::friends::ApplicationInfo = bytes<0x10, 0x8>;
type nn::friends::ExternalApplicationCatalog = bytes<0x4b8, unknown>;
type nn::friends::ExternalApplicationCatalogId = bytes<0x10, 0x8>;
type nn::friends::FacedFriendRequestRegistrationKey = bytes<0x40, 0x1>;
type nn::friends::FriendCode = bytes<0x20, 0x1>;
type nn::friends::InAppScreenName = bytes<0x48, unknown>;
type nn::friends::PlayHistoryRegistrationKey = bytes<0x40, unknown>;
type nn::friends::PlayHistoryStatistics = bytes<0x10, 0x8>;
type nn::friends::Relationship = bytes<0x8, 0x1>;
type nn::friends::RequestId = u64;
type nn::friends::Url = bytes<0xa0, 0x1>;
type nn::friends::detail::BlockedUserImpl = unknown;
type nn::friends::detail::FriendCandidateImpl = unknown;
type nn::friends::detail::FriendDetailedInfoImpl = bytes<0x800, unknown>;
type nn::friends::detail::FriendImpl = unknown;
type nn::friends::detail::FriendRequestImpl = unknown;
type nn::friends::detail::FriendSettingImpl = bytes<0x40, unknown>;
type nn::friends::detail::PlayHistoryImpl = unknown;
type nn::friends::detail::ProfileExtraImpl = bytes<0x400, unknown>;
type nn::friends::detail::ProfileImpl = unknown;
type nn::friends::detail::UserPresenceImpl = bytes<0xe0, unknown>;
type nn::friends::detail::UserPresenceViewImpl = bytes<0xe0, unknown>;
type nn::friends::detail::UserSettingImpl = bytes<0x800, unknown>;
type nn::friends::detail::ipc::SizedFriendFilter = bytes<0x10, 0x8>;
type nn::friends::detail::ipc::SizedNotificationInfo = bytes<0x10, 0x8>;
type nn::hid::BasicXpadId = u32;
type nn::hid::JoyXpadId = u32;
type nn::hid::SixAxisSensorHandle = u32;
type nn::hid::TouchState = unknown;
type nn::hid::VibrationDeviceHandle = u32;
type nn::hid::VibrationDeviceInfoForIpc = bytes<0x8, 0x4>;
type nn::hid::VibrationValue = unknown;
type nn::hid::debug::BasicXpadAutoPilotState = bytes<0x1c, 0x4>;
type nn::hid::debug::CaptureButtonAutoPilotState = u64;
type nn::hid::debug::DebugPadAutoPilotState = bytes<0x18, 0x4>;
type nn::hid::debug::HomeButtonAutoPilotState = u64;
type nn::hid::debug::KeyboardAutoPilotState = bytes<0x28, 0x8>;
type nn::hid::debug::MouseAutoPilotState = bytes<0x1c, 0x4>;
type nn::hid::debug::SleepButtonAutoPilotState = u64;
type nn::hid::system::PlayReportControllerUsage = unknown;
@version(2.0.0)
type nn::hid::system::UniquePadId = unknown;
@version(3.0.0+)
type nn::hid::system::UniquePadId = u64;
@version(2.0.0)
type nn::hid::system::UniqueSixAxisSensorHandle = u32;
@version(3.0.0+)
type nn::hid::system::UniqueSixAxisSensorHandle = unknown;
type nn::mii::CharInfo = bytes<0x58, 0x4>;
type nn::mii::CharInfoElement = unknown;
type nn::mii::CreateId = bytes<0x10, 0x1>;
type nn::mii::StoreData = bytes<0x44, 0x4>;
type nn::mii::StoreDataElement = unknown;
type nn::ncm::ApplicationId = u64;
type nn::ncm::ProgramId = u64;
type nn::ncm::StorageId = u8;
type nn::ncm::SystemApplicationId = u64;
type nn::nifm::AdditionalInfo = bytes<0x410, unknown>;
type nn::nifm::ClientId = bytes<0x4, unknown>;
type nn::nifm::DnsSetting = bytes<0x9, 0x1>;
type nn::nifm::IpAddressSetting = bytes<0xd, 0x1>;
type nn::nifm::IpSettingData = bytes<0xc2, unknown>;
type nn::nifm::IpV4Address = bytes<0x4, 0x1>;
@version(2.0.0)
type nn::nifm::Requirement = bytes<0x20, 0x4>;
@version(3.0.0+)
type nn::nifm::Requirement = bytes<0x24, 0x4>;
type nn::nifm::SsidListVersion = bytes<0x10, 0x1>;
@version(2.0.0-3.0.0)
type nn::nifm::TelemetryInfo = bytes<0x20c, unknown>;
@version(4.0.0+)
type nn::nifm::TelemetryInfo = bytes<0x210, unknown>;
type nn::nifm::detail::sf::AccessPointData = bytes<0x34, unknown>;
type nn::nifm::detail::sf::InternetConnectionStatus = bytes<0x3, 0x1>;
type nn::nifm::detail::sf::NetworkInterfaceInfo = unknown;
type nn::nifm::detail::sf::NetworkProfileBasicInfo = unknown;
type nn::nifm::detail::sf::NetworkProfileData = bytes<0x17c, unknown>;
type nn::npns::NotificationToken = bytes<0x28, 0x1>;
type nn::ns::ApplicationControlProperty = bytes<0x4000, unknown>;
type nn::oe::DisplayVersion = bytes<0x10, 0x1>;
type nn::pctl::FreeCommunicationApplicationInfo = unknown;
type nn::pctl::InquiryCode = bytes<0x20, 0x1>;
type nn::pctl::PlayTimerSettings = bytes<0x34, 0x2>;
type nn::pctl::detail::AsyncData = bytes<0x8, 0x4>;
type nn::pctl::detail::PairingAccountInfoBase = bytes<0x10, 0x8>;
type nn::pctl::detail::PairingInfoBase = bytes<0x10, 0x8>;
@version(2.0.0)
type nn::pcv::ModuleState = bytes<0xc, 0x4>;
@version(3.0.0+)
type nn::pcv::ModuleState = unknown;
type nn::pcv::TemperatureThreshold = unknown;
@version(2.0.0-3.0.0)
type nn::settings::LanguageCode = unknown;
@version(4.0.0+)
type nn::settings::LanguageCode = bytes<0x8, 0x1>;
type nn::settings::SettingsItemKey = bytes<0x48, unknown>;
type nn::settings::SettingsName = bytes<0x48, unknown>;
type nn::settings::factory::AccelerometerOffset = bytes<0x6, 0x2>;
type nn::settings::factory::AccelerometerScale = bytes<0x6, 0x2>;
type nn::settings::factory::BatteryLot = bytes<0x18, 0x1>;
type nn::settings::factory::BdAddress = bytes<0x6, 0x1>;
type nn::settings::factory::ConfigurationId1 = bytes<0x1e, 0x1>;
type nn::settings::factory::CountryCode = unknown;
type nn::settings::factory::EccB233DeviceCertificate = bytes<0x180, unknown>;
type nn::settings::factory::EccB233DeviceKey = bytes<0x54, 0x4>;
type nn::settings::factory::GameCardCertificate = bytes<0x400, unknown>;
type nn::settings::factory::GameCardKey = bytes<0x134, unknown>;
type nn::settings::factory::GyroscopeOffset = bytes<0x6, 0x2>;
type nn::settings::factory::GyroscopeScale = bytes<0x6, 0x2>;
type nn::settings::factory::MacAddress = bytes<0x6, 0x1>;
type nn::settings::factory::Rsa2048DeviceCertificate = bytes<0x240, unknown>;
type nn::settings::factory::Rsa2048DeviceKey = bytes<0x244, unknown>;
type nn::settings::factory::SerialNumber = bytes<0x18, 0x1>;
type nn::settings::factory::SpeakerParameter = bytes<0x5a, 0x2>;
type nn::settings::factory::SslCertificate = bytes<0x804, unknown>;
type nn::settings::factory::SslKey = bytes<0x134, unknown>;
type nn::settings::system::AccountNotificationSettings = unknown;
type nn::settings::system::AccountSettings = u32;
type nn::settings::system::AudioVolume = bytes<0x8, 0x4>;
type nn::settings::system::BacklightSettings = bytes<0x28, 0x4>;
type nn::settings::system::BatteryLot = bytes<0x18, 0x1>;
type nn::settings::system::BluetoothDevicesSettings = unknown;
type nn::settings::system::DataDeletionSettings = bytes<0x8, 0x4>;
type nn::settings::system::DeviceNickName = bytes<0x80, unknown>;
type nn::settings::system::Edid = bytes<0x100, unknown>;
type nn::settings::system::EulaVersion = unknown;
type nn::settings::system::FirmwareVersion = bytes<0x100, unknown>;
type nn::settings::system::InitialLaunchSettings = bytes<0x20, 0x8>;
type nn::settings::system::NetworkSettings = unknown;
type nn::settings::system::NotificationSettings = bytes<0x18, 0x4>;
type nn::settings::system::NxControllerSettings = unknown;
type nn::settings::system::PtmFuelGaugeParameter = bytes<0x18, 0x4>;
type nn::settings::system::SerialNumber = bytes<0x18, 0x1>;
type nn::settings::system::SleepSettings = bytes<0xc, 0x4>;
type nn::settings::system::TvSettings = bytes<0x20, 0x4>;
type nn::ssl::sf::CertificateFormat = u32;
type nn::ssl::sf::ContextOption = u32;
type nn::ssl::sf::InternalPki = u32;
type nn::ssl::sf::IoMode = u32;
type nn::ssl::sf::OptionType = u32;
type nn::ssl::sf::PollEvent = u32;
type nn::ssl::sf::RenegotiationMode = u32;
type nn::ssl::sf::SessionCacheMode = u32;
type nn::ssl::sf::SslVersion = u32;
type nn::ssl::sf::VerifyOption = u32;
type nn::time::CalendarTime = bytes<0x8, 0x2>;
type nn::time::LocationName = bytes<0x24, 0x1>;
type nn::time::PosixTime = u64;
type nn::time::SteadyClockTimePoint = bytes<0x18, 0x8>;
type nn::time::SystemClockContext = bytes<0x20, 0x8>;
type nn::time::TimeZoneRule = bytes<0x4000, unknown>;
type nn::time::TimeZoneRuleVersion = bytes<0x10, 0x1>;
type nn::time::sf::CalendarAdditionalInfo = bytes<0x18, 0x4>;
type nn::util::BitFlagSet<128, nn::settings::system::FatalDirtyFlag> = bytes<0x10, 0x8>;
type nn::util::BitFlagSet<128, nn::settings::system::TelemetryDirtyFlag> = bytes<0x10, 0x8>;
type nn::util::BitFlagSet<32, nn::hid::NpadStyleTag> = u32;
type nn::util::BitFlagSet<32, nn::hid::system::InputSourceId> = u32;
type nn::util::BitFlagSet<32, nn::hid::system::KeyboardLockKeyEvent> = u32;
type nn::util::Uuid = bytes<0x10, 0x1>;
type nn::vi::DisplayInfo = unknown;
type nn::vi::DisplayModeInfo = unknown;
type nn::vi::DisplayName = bytes<0x40, 0x1>;
type nn::vi::ProxyName = bytes<0x8, 0x1>;
@version(3.0.0)
type nn::irsensor::PackedDpdProcessorConfig = bytes<0xc, 0x2>;
@version(3.0.0+)
type nn::account::ProfileDigest = bytes<0x10, 0x1>;
@version(3.0.0+)
type nn::am::AppletAttribute = bytes<0x80, unknown>;
@version(3.0.0+)
type nn::bluetooth::Address = bytes<0x6, 0x1>;
@version(3.0.0+)
type nn::capsrv::ApplicationAlbumEntry = bytes<0x20, 0x1>;
@version(3.0.0+)
type nn::capsrv::detail::ScreenShotAttributeEx0 = bytes<0x40, 0x4>;
@version(3.0.0+)
type nn::err::ErrorCode = bytes<0x8, 0x4>;
@version(3.0.0+)
type nn::friends::MiiImageUrlParam = bytes<0x10, 0x1>;
@version(3.0.0+)
type nn::friends::MiiName = bytes<0x20, 0x1>;
@version(3.0.0+)
type nn::friends::NintendoNetworkIdUserInfo = bytes<0x38, unknown>;
@version(3.0.0+)
type nn::friends::detail::NintendoNetworkIdFriendImpl = unknown;
@version(3.0.0+)
type nn::hid::ConsoleSixAxisSensorHandle = u32;
@version(3.0.0+)
type nn::hid::system::FirmwareUpdateDeviceHandle = u64;
@version(3.0.0+)
type nn::hid::system::FirmwareUpdateState = bytes<0x4, 0x1>;
@version(3.0.0+)
type nn::hid::system::FirmwareVersion = bytes<0x10, 0x1>;
@version(3.0.0+)
type nn::hid::system::RegisteredDevice = unknown;
@version(3.0.0+)
type nn::hid::tmp::ConsoleSixAxisSensorCalibrationValues = bytes<0x18, 0x2>;
@version(3.0.0+)
type nn::irsensor::ImageTransferProcessorState = bytes<0x10, 0x8>;
@version(3.0.0+)
type nn::irsensor::IrCameraHandle = u32;
@version(3.0.0+)
type nn::irsensor::PackedClusteringProcessorConfig = bytes<0x28, 0x8>;
@version(3.0.0+)
type nn::irsensor::PackedImageTransferProcessorConfig = bytes<0x18, 0x8>;
@version(3.0.0+)
type nn::irsensor::PackedMcuVersion = bytes<0x4, 0x2>;
@version(3.0.0+)
type nn::irsensor::PackedMomentProcessorConfig = bytes<0x20, 0x8>;
@version(3.0.0+)
type nn::irsensor::PackedTeraPluginProcessorConfig = bytes<0x8, 0x2>;
@version(3.0.0+)
type nn::pcv::PowerControlTarget = u32;
@version(3.0.0+)
type nn::pcv::PowerDomainState = unknown;
@version(3.0.0+)
type nn::settings::system::BacklightSettingsEx = bytes<0x2c, 0x4>;
@version(3.0.0+)
type nn::util::BitFlagSet<32, nn::hid::system::DeviceType> = u32;
@version(3.0.0+)
type nn::util::Unorm8x4 = bytes<0x4, 0x1>;
@version(4.0.0+)
type nn::err::ErrorContext = bytes<0x200, unknown>;
@version(4.0.0+)
type nn::grcsrv::GameMovieId = bytes<0x40, 0x8>;
@version(4.0.0+)
type nn::hid::VibrationGcErmCommand = u64;
@version(4.0.0+)
type nn::hid::system::AudioControlState = unknown;
@version(4.0.0+)
type nn::irsensor::PackedFunctionLevel = bytes<0x4, 0x1>;
@version(4.0.0+)
type nn::irsensor::PackedImageTransferProcessorExConfig = bytes<0x20, 0x8>;
@version(4.0.0+)
type nn::irsensor::PackedIrLedProcessorConfig = bytes<0x8, 0x2>;
@version(4.0.0+)
type nn::irsensor::PackedPointingProcessorConfig = bytes<0xc, 0x2>;
@version(4.0.0+)
type nn::kpr::KeyCodeMap = bytes<0x1000, unknown>;
@version(4.0.0+)
type nn::nifm::detail::sf::AccessPointDataOld = bytes<0x34, unknown>;
@version(4.0.0+)
type nn::pctl::RestrictionSettings = bytes<0x3, 0x1>;
@version(4.0.0+)
type nn::settings::system::AllowedSslHost = unknown;
@version(4.0.0+)
type nn::settings::system::ConsoleSixAxisSensorAccelerationBias = bytes<0xc, 0x4>;
@version(4.0.0+)
type nn::settings::system::ConsoleSixAxisSensorAccelerationGain = bytes<0x24, 0x4>;
@version(4.0.0+)
type nn::settings::system::ConsoleSixAxisSensorAngularVelocityBias = bytes<0xc, 0x4>;
@version(4.0.0+)
type nn::settings::system::ConsoleSixAxisSensorAngularVelocityGain = bytes<0x24, 0x4>;
@version(4.0.0+)
type nn::settings::system::HostFsMountPoint = bytes<0x100, unknown>;
@version(4.0.0+)
type nn::settings::system::ServiceDiscoveryControlSettings = u32;
@version(4.0.0+)
type nn::time::sf::ClockSnapshot = bytes<0xd0, unknown>;
@version(4.0.0+)
type nn::util::BitFlagSet<32, nn::settings::system::AppletLaunchFlag> = u32;
@version(4.0.0+)
type nn::vi::CompositorError = bytes<0x1000, unknown>;
@version(4.0.0+)
type nn::vi::CropRegion = bytes<0x10, 0x4>;
@version(4.0.0+)
type nn::vi::fbshare::SharedBufferHandle = u64;
@version(4.0.0+)
type nn::vi::fbshare::SharedLayerHandle = u64;
@version(4.0.0+)
type nn::vi::fbshare::SharedLayerTextureIndexList = bytes<0x10, 0x4>;
@version(4.0.0+)
type nn::vi::fbshare::SharedMemoryPoolLayout = bytes<0x188, unknown>;
@version(4.0.0+)
type nn::vi::native::NativeMemoryHandleId = u32;
@version(4.0.0+)
type nn::vi::native::NativeSync = bytes<0x24, 0x4>;

@version(4.0.0+)
interface CecManagerSubinterface100 {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1() -> unknown<0x4>;
	@undocumented
	[2] Unknown2(unknown<0x4>);
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
}

@version(4.0.0+)
interface JpegDecoder {
	@undocumented
	[3001] Unknown3001(unknown<0x28>, buffer<unknown, 0x5>) -> buffer<unknown, 0x46>;
}

interface nn::account::IAccountServiceForAdministrator is acc:su {
	[0] GetUserCount() -> u32;
	[1] GetUserExistence(nn::account::Uid) -> b8;
	[2] ListAllUsers() -> buffer<nn::account::Uid[], 0xa>;
	[3] ListOpenUsers() -> buffer<nn::account::Uid[], 0xa>;
	[4] GetLastOpenedUser() -> nn::account::Uid;
	[5] GetProfile(nn::account::Uid) -> object<nn::account::profile::IProfile>;
	@version(3.0.0+)
	[6] GetProfileDigest(nn::account::Uid) -> nn::account::ProfileDigest;

	[50] IsUserRegistrationRequestPermitted(u64, pid) -> b8;
	[51] TrySelectUserWithoutInteraction(b8) -> nn::account::Uid;

	[100] GetUserRegistrationNotifier() -> object<nn::account::detail::INotifier>;
	[101] GetUserStateChangeNotifier() -> object<nn::account::detail::INotifier>;
	[102] GetBaasAccountManagerForSystemService(nn::account::Uid) -> object<nn::account::baas::IManagerForSystemService>;
	[103] GetBaasUserAvailabilityChangeNotifier() -> object<nn::account::detail::INotifier>;
	@version(2.0.0+)
	[104] GetProfileUpdateNotifier() -> object<nn::account::detail::INotifier>;
	@version(4.0.0+)
	[105] CheckNetworkServiceAvailabilityAsync(u64, pid, buffer<nn::account::SystemProgramIdentification, 0x19>) -> object<nn::account::detail::IAsyncContext>;

	[110] StoreSaveDataThumbnail(nn::account::Uid, nn::ApplicationId, buffer<bytes, 0x5>);
	[111] ClearSaveDataThumbnail(nn::account::Uid, nn::ApplicationId);
	[112] LoadSaveDataThumbnail(nn::account::Uid, nn::ApplicationId) -> (u32, buffer<bytes, 0x6>);

	[190] GetUserLastOpenedApplication(nn::account::Uid) -> (u32, nn::ApplicationId);

	[200] BeginUserRegistration() -> nn::account::Uid;
	[201] CompleteUserRegistration(nn::account::Uid);
	[202] CancelUserRegistration(nn::account::Uid);
	[203] DeleteUser(nn::account::Uid);
	[204] SetUserPosition(u32, nn::account::Uid);
	[205] GetProfileEditor(nn::account::Uid) -> object<nn::account::profile::IProfileEditor>;
	@version(2.0.0+)
	[206] CompleteUserRegistrationForcibly(nn::account::Uid);

	@version(3.0.0+)
	[210] CreateFloatingRegistrationRequest(u32, handle<copy>) -> object<nn::account::baas::IFloatingRegistrationRequest>;

	[230] AuthenticateServiceAsync() -> object<nn::account::detail::IAsyncContext>;

	[250] GetBaasAccountAdministrator(nn::account::Uid) -> object<nn::account::baas::IAdministrator>;

	@version(1.0.0-2.0.0)
	[290] ProxyProcedureToLoginAsGuestWithNintendoAccount(nn::account::detail::Uuid) -> object<nn::account::nas::IOAuthProcedureForGuestLogin>;
	@version(3.0.0+)
	[290] ProxyProcedureForGuestLoginWithNintendoAccount(nn::account::detail::Uuid) -> object<nn::account::nas::IOAuthProcedureForExternalNsa>;
	@version(3.0.0+)
	[291] ProxyProcedureForFloatingRegistrationWithNintendoAccount(nn::account::detail::Uuid) -> object<nn::account::nas::IOAuthProcedureForExternalNsa>;

	@version(2.0.0+)
	[299] SuspendBackgroundDaemon() -> object<nn::account::detail::ISessionObject>;

	@version(3.0.0+)
	[997] DebugInvalidateTokenCacheForUser(nn::account::Uid);
	[998] DebugSetUserStateClose(nn::account::Uid);
	[999] DebugSetUserStateOpen(nn::account::Uid);
}

interface nn::account::IAccountServiceForApplication is acc:u0 {
	[0] GetUserCount() -> u32;
	[1] GetUserExistence(nn::account::Uid) -> b8;
	[2] ListAllUsers() -> buffer<nn::account::Uid[], 0xa>;
	[3] ListOpenUsers() -> buffer<nn::account::Uid[], 0xa>;
	[4] GetLastOpenedUser() -> nn::account::Uid;
	[5] GetProfile(nn::account::Uid) -> object<nn::account::profile::IProfile>;
	@version(3.0.0+)
	[6] GetProfileDigest(nn::account::Uid) -> nn::account::ProfileDigest;

	[50] IsUserRegistrationRequestPermitted(u64, pid) -> b8;
	[51] TrySelectUserWithoutInteraction(b8) -> nn::account::Uid;

	[100] InitializeApplicationInfo(u64, pid);
	[101] GetBaasAccountManagerForApplication(nn::account::Uid) -> object<nn::account::baas::IManagerForApplication>;
	[102] AuthenticateApplicationAsync() -> object<nn::account::detail::IAsyncContext>;
	@version(4.0.0+)
	[103] CheckNetworkServiceAvailabilityAsync() -> object<nn::account::detail::IAsyncContext>;

	[110] StoreSaveDataThumbnail(nn::account::Uid, buffer<bytes, 0x5>);
	[111] ClearSaveDataThumbnail(nn::account::Uid);

	[120] CreateGuestLoginRequest(u32, handle<copy>) -> object<nn::account::baas::IGuestLoginRequest>;
}

interface nn::account::IAccountServiceForSystemService is acc:u1 {
	[0] GetUserCount() -> u32;
	[1] GetUserExistence(nn::account::Uid) -> b8;
	[2] ListAllUsers() -> buffer<nn::account::Uid[], 0xa>;
	[3] ListOpenUsers() -> buffer<nn::account::Uid[], 0xa>;
	[4] GetLastOpenedUser() -> nn::account::Uid;
	[5] GetProfile(nn::account::Uid) -> object<nn::account::profile::IProfile>;
	@version(3.0.0+)
	[6] GetProfileDigest(nn::account::Uid) -> nn::account::ProfileDigest;

	[50] IsUserRegistrationRequestPermitted(u64, pid) -> b8;
	[51] TrySelectUserWithoutInteraction(b8) -> nn::account::Uid;

	[100] GetUserRegistrationNotifier() -> object<nn::account::detail::INotifier>;
	[101] GetUserStateChangeNotifier() -> object<nn::account::detail::INotifier>;
	[102] GetBaasAccountManagerForSystemService(nn::account::Uid) -> object<nn::account::baas::IManagerForSystemService>;
	[103] GetBaasUserAvailabilityChangeNotifier() -> object<nn::account::detail::INotifier>;
	@version(2.0.0+)
	[104] GetProfileUpdateNotifier() -> object<nn::account::detail::INotifier>;
	@version(4.0.0+)
	[105] CheckNetworkServiceAvailabilityAsync(u64, pid, buffer<nn::account::SystemProgramIdentification, 0x19>) -> object<nn::account::detail::IAsyncContext>;

	[110] StoreSaveDataThumbnail(nn::account::Uid, nn::ApplicationId, buffer<bytes, 0x5>);
	[111] ClearSaveDataThumbnail(nn::account::Uid, nn::ApplicationId);
	[112] LoadSaveDataThumbnail(nn::account::Uid, nn::ApplicationId) -> (u32, buffer<bytes, 0x6>);

	[190] GetUserLastOpenedApplication(nn::account::Uid) -> (u32, nn::ApplicationId);

	@version(3.0.0+)
	[997] DebugInvalidateTokenCacheForUser(nn::account::Uid);
	[998] DebugSetUserStateClose(nn::account::Uid);
	[999] DebugSetUserStateOpen(nn::account::Uid);
}

interface nn::account::IBaasAccessTokenAccessor is acc:aa {
	[0] EnsureCacheAsync(nn::account::Uid) -> object<nn::account::detail::IAsyncContext>;
	[1] LoadCache(nn::account::Uid) -> (u32, buffer<bytes, 0x6>);
	[2] GetDeviceAccountId(nn::account::Uid) -> u64;

	[50] RegisterNotificationTokenAsync(nn::npns::NotificationToken, nn::account::Uid) -> object<nn::account::detail::IAsyncContext>;
	[51] UnregisterNotificationTokenAsync(nn::account::Uid) -> object<nn::account::detail::IAsyncContext>;
}

interface nn::account::baas::IAdministrator {
	[0] CheckAvailability();
	[1] GetAccountId() -> nn::account::NetworkServiceAccountId;
	[2] EnsureIdTokenCacheAsync() -> object<nn::account::detail::IAsyncContext>;
	[3] LoadIdTokenCache() -> (u32, buffer<bytes, 0x6>);

	[100] SetSystemProgramIdentification(u64, pid, buffer<nn::account::SystemProgramIdentification, 0x19>);

	@version(4.0.0+)
	[110] GetServiceEntryRequirementCache(nn::ApplicationId) -> u32;
	@version(4.0.0+)
	[111] InvalidateServiceEntryRequirementCache(nn::ApplicationId);
	@version(4.0.0+)
	[112] InvalidateTokenCache(nn::ApplicationId);

	[120] GetNintendoAccountId() -> nn::account::NintendoAccountId;

	@version(1.0.0-2.0.0)
	[130] GetNintendoAccountUserResourceCache() -> (nn::account::NintendoAccountId, buffer<nn::account::nas::NasUserBase, 0x1a>, buffer<bytes, 0x6>);
	@version(3.0.0+)
	[130] GetNintendoAccountUserResourceCache() -> (nn::account::NintendoAccountId, buffer<nn::account::nas::NasUserBase, 0x1a>, buffer<bytes, 0x6>);
	[131] RefreshNintendoAccountUserResourceCacheAsync() -> object<nn::account::detail::IAsyncContext>;
	[132] RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(u32) -> (b8, object<nn::account::detail::IAsyncContext>);

	[150] CreateAuthorizationRequest(u32, handle<copy>, buffer<nn::account::nas::NasClientInfo, 0x19>, buffer<nn::account::NintendoAccountAuthorizationRequestParameters, 0x19>) -> object<nn::account::nas::IAuthorizationRequest>;

	[200] IsRegistered() -> b8;
	[201] RegisterAsync() -> object<nn::account::detail::IAsyncContext>;
	[202] UnregisterAsync() -> object<nn::account::detail::IAsyncContext>;
	[203] DeleteRegistrationInfoLocally();

	[220] SynchronizeProfileAsync() -> object<nn::account::detail::IAsyncContext>;
	@version(2.0.0+)
	[221] UploadProfileAsync() -> object<nn::account::detail::IAsyncContext>;
	@version(2.0.0+)
	[222] SynchronizeProfileAsyncIfSecondsElapsed(u32) -> (b8, object<nn::account::detail::IAsyncContext>);

	[250] IsLinkedWithNintendoAccount() -> b8;
	[251] CreateProcedureToLinkWithNintendoAccount() -> object<nn::account::nas::IOAuthProcedureForNintendoAccountLinkage>;
	[252] ResumeProcedureToLinkWithNintendoAccount(nn::account::detail::Uuid) -> object<nn::account::nas::IOAuthProcedureForNintendoAccountLinkage>;

	[255] CreateProcedureToUpdateLinkageStateOfNintendoAccount() -> object<nn::account::http::IOAuthProcedure>;
	[256] ResumeProcedureToUpdateLinkageStateOfNintendoAccount(nn::account::detail::Uuid) -> object<nn::account::http::IOAuthProcedure>;

	@version(3.0.0+)
	[260] CreateProcedureToLinkNnidWithNintendoAccount() -> object<nn::account::http::IOAuthProcedure>;
	@version(3.0.0+)
	[261] ResumeProcedureToLinkNnidWithNintendoAccount(nn::account::detail::Uuid) -> object<nn::account::http::IOAuthProcedure>;

	[280] ProxyProcedureToAcquireApplicationAuthorizationForNintendoAccount(nn::account::detail::Uuid) -> object<nn::account::http::IOAuthProcedure>;

	[997] DebugUnlinkNintendoAccountAsync() -> object<nn::account::detail::IAsyncContext>;
	[998] DebugSetAvailabilityErrorDetail(u32);
	@version(1.0.0)
	[999] DebugUploadProfileAsync() -> object<nn::account::detail::IAsyncContext>;
}

@version(3.0.0+)
interface nn::account::baas::IFloatingRegistrationRequest {
	[0] GetSessionId() -> nn::account::detail::Uuid;

	[12] GetAccountId() -> nn::account::NetworkServiceAccountId;
	[13] GetLinkedNintendoAccountId() -> nn::account::NintendoAccountId;
	[14] GetNickname() -> buffer<u8[], 0xa>;
	[15] GetProfileImage() -> (u32, buffer<bytes, 0x6>);

	[21] LoadIdTokenCache() -> (u32, buffer<bytes, 0x6>);

	@version(3.0.0)
	[100] RegisterAsync() -> (nn::account::Uid, object<nn::account::detail::IAsyncContext>);
	@version(4.0.0+)
	[100] RegisterUser() -> nn::account::Uid;
	@version(3.0.0)
	[101] RegisterWithUidAsync(nn::account::Uid) -> object<nn::account::detail::IAsyncContext>;
	@version(4.0.0+)
	[101] RegisterUserWithUid(nn::account::Uid);
	@version(4.0.0+)
	[102] RegisterNetworkServiceAccountAsync() -> object<nn::account::detail::IAsyncContext>;
	@version(4.0.0+)
	[103] RegisterNetworkServiceAccountWithUidAsync(nn::account::Uid) -> object<nn::account::detail::IAsyncContext>;

	[110] SetSystemProgramIdentification(u64, pid, buffer<nn::account::SystemProgramIdentification, 0x19>);
	[111] EnsureIdTokenCacheAsync() -> object<nn::account::detail::IAsyncContext>;
}

interface nn::account::baas::IGuestLoginRequest {
	[0] GetSessionId() -> nn::account::detail::Uuid;

	@version(1.0.0-2.0.0)
	[11] GetIdTokenCache() -> (u32, buffer<bytes, 0x6>);
	[12] GetAccountId() -> nn::account::NetworkServiceAccountId;
	[13] GetLinkedNintendoAccountId() -> nn::account::NintendoAccountId;
	[14] GetNickname() -> buffer<u8[], 0xa>;
	[15] GetProfileImage() -> (u32, buffer<bytes, 0x6>);

	@version(3.0.0+)
	[21] LoadIdTokenCache() -> (u32, buffer<bytes, 0x6>);
}

interface nn::account::baas::IManagerForApplication {
	[0] CheckAvailability();
	[1] GetAccountId() -> nn::account::NetworkServiceAccountId;
	[2] EnsureIdTokenCacheAsync() -> object<nn::account::detail::IAsyncContext>;
	[3] LoadIdTokenCache() -> (u32, buffer<bytes, 0x6>);

	[130] GetNintendoAccountUserResourceCacheForApplication() -> (nn::account::NintendoAccountId, buffer<nn::account::nas::NasUserBaseForApplication, 0x1a>, buffer<bytes, 0x6>);

	[150] CreateAuthorizationRequest(u32, handle<copy>, buffer<nn::account::NintendoAccountAuthorizationRequestParameters, 0x19>) -> object<nn::account::nas::IAuthorizationRequest>;
}

interface nn::account::baas::IManagerForSystemService {
	[0] CheckAvailability();
	[1] GetAccountId() -> nn::account::NetworkServiceAccountId;
	[2] EnsureIdTokenCacheAsync() -> object<nn::account::detail::IAsyncContext>;
	[3] LoadIdTokenCache() -> (u32, buffer<bytes, 0x6>);

	[100] SetSystemProgramIdentification(u64, pid, buffer<nn::account::SystemProgramIdentification, 0x19>);

	@version(4.0.0+)
	[110] GetServiceEntryRequirementCache(nn::ApplicationId) -> u32;
	@version(4.0.0+)
	[111] InvalidateServiceEntryRequirementCache(nn::ApplicationId);
	@version(4.0.0+)
	[112] InvalidateTokenCache(nn::ApplicationId);

	[120] GetNintendoAccountId() -> nn::account::NintendoAccountId;

	@version(1.0.0-2.0.0)
	[130] GetNintendoAccountUserResourceCache() -> (nn::account::NintendoAccountId, buffer<nn::account::nas::NasUserBase, 0x1a>, buffer<bytes, 0x6>);
	@version(3.0.0+)
	[130] GetNintendoAccountUserResourceCache() -> (nn::account::NintendoAccountId, buffer<nn::account::nas::NasUserBase, 0x1a>, buffer<bytes, 0x6>);
	[131] RefreshNintendoAccountUserResourceCacheAsync() -> object<nn::account::detail::IAsyncContext>;
	[132] RefreshNintendoAccountUserResourceCacheAsyncIfSecondsElapsed(u32) -> (b8, object<nn::account::detail::IAsyncContext>);

	[150] CreateAuthorizationRequest(u32, handle<copy>, buffer<nn::account::nas::NasClientInfo, 0x19>, buffer<nn::account::NintendoAccountAuthorizationRequestParameters, 0x19>) -> object<nn::account::nas::IAuthorizationRequest>;
}

interface nn::account::detail::IAsyncContext {
	[0] GetSystemEvent() -> handle<copy>;
	[1] Cancel();
	[2] HasDone() -> b8;
	[3] GetResult();
}

interface nn::account::detail::INotifier {
	[0] GetSystemEvent() -> handle<copy>;
}

@version(2.0.0+)
interface nn::account::detail::ISessionObject {
	[999] Dummy();
}

interface nn::account::http::IOAuthProcedure {
	[0] PrepareAsync() -> object<nn::account::detail::IAsyncContext>;
	[1] GetRequest() -> (buffer<nn::account::RequestUrl, 0x1a>, buffer<nn::account::CallbackUri, 0x1a>);
	[2] ApplyResponse(buffer<u8[], 0x9>);
	[3] ApplyResponseAsync(buffer<u8[], 0x9>) -> object<nn::account::detail::IAsyncContext>;

	[10] Suspend() -> nn::account::detail::Uuid;
}

interface nn::account::nas::IAuthorizationRequest {
	[0] GetSessionId() -> nn::account::detail::Uuid;

	[10] InvokeWithoutInteractionAsync() -> object<nn::account::detail::IAsyncContext>;

	@version(2.0.0+)
	[19] IsAuthorized() -> b8;
	[20] GetAuthorizationCode() -> (u32, buffer<bytes, 0x6>);
	[21] GetIdToken() -> (u32, buffer<bytes, 0x6>);
	[22] GetState() -> buffer<nn::account::nas::State, 0x1a>;
}

@version(3.0.0+)
interface nn::account::nas::IOAuthProcedureForExternalNsa {
	[0] PrepareAsync() -> object<nn::account::detail::IAsyncContext>;
	[1] GetRequest() -> (buffer<nn::account::RequestUrl, 0x1a>, buffer<nn::account::CallbackUri, 0x1a>);
	[2] ApplyResponse(buffer<u8[], 0x9>);
	[3] ApplyResponseAsync(buffer<u8[], 0x9>) -> object<nn::account::detail::IAsyncContext>;

	[10] Suspend() -> nn::account::detail::Uuid;

	[100] GetAccountId() -> nn::account::NetworkServiceAccountId;
	[101] GetLinkedNintendoAccountId() -> nn::account::NintendoAccountId;
	[102] GetNickname() -> buffer<u8[], 0xa>;
	[103] GetProfileImage() -> (u32, buffer<bytes, 0x6>);
}

@version(1.0.0-2.0.0)
interface nn::account::nas::IOAuthProcedureForGuestLogin {
	[0] PrepareAsync() -> object<nn::account::detail::IAsyncContext>;
	[1] GetRequest() -> (buffer<nn::account::RequestUrl, 0x1a>, buffer<nn::account::CallbackUri, 0x1a>);
	[2] ApplyResponse(buffer<u8[], 0x9>);
	[3] ApplyResponseAsync(buffer<u8[], 0x9>) -> object<nn::account::detail::IAsyncContext>;

	[10] Suspend() -> nn::account::detail::Uuid;

	[100] GetAccountId() -> nn::account::NetworkServiceAccountId;
	[101] GetLinkedNintendoAccountId() -> nn::account::NintendoAccountId;
	[102] GetNickname() -> buffer<u8[], 0xa>;
	[103] GetProfileImage() -> (u32, buffer<bytes, 0x6>);
}

interface nn::account::nas::IOAuthProcedureForNintendoAccountLinkage {
	[0] PrepareAsync() -> object<nn::account::detail::IAsyncContext>;
	[1] GetRequest() -> (buffer<nn::account::RequestUrl, 0x1a>, buffer<nn::account::CallbackUri, 0x1a>);
	[2] ApplyResponse(buffer<u8[], 0x9>);
	[3] ApplyResponseAsync(buffer<u8[], 0x9>) -> object<nn::account::detail::IAsyncContext>;

	[10] Suspend() -> nn::account::detail::Uuid;

	[100] GetRequestWithTheme(u32) -> (buffer<nn::account::RequestUrl, 0x1a>, buffer<nn::account::CallbackUri, 0x1a>);
	[101] IsNetworkServiceAccountReplaced() -> b8;

	@version(2.0.0+)
	[199] GetUrlForIntroductionOfExtraMembership() -> buffer<nn::account::RequestUrl, 0x1a>;
}

interface nn::account::profile::IProfile {
	[0] Get() -> (nn::account::profile::ProfileBase, buffer<nn::account::profile::UserData, 0x1a>);
	[1] GetBase() -> nn::account::profile::ProfileBase;

	[10] GetImageSize() -> u32;
	[11] LoadImage() -> (u32, buffer<bytes, 0x6>);
}

interface nn::account::profile::IProfileEditor {
	[0] Get() -> (nn::account::profile::ProfileBase, buffer<nn::account::profile::UserData, 0x1a>);
	[1] GetBase() -> nn::account::profile::ProfileBase;

	[10] GetImageSize() -> u32;
	[11] LoadImage() -> (u32, buffer<bytes, 0x6>);

	[100] Store(nn::account::profile::ProfileBase, buffer<nn::account::profile::UserData, 0x19>);
	[101] StoreWithImage(nn::account::profile::ProfileBase, buffer<nn::account::profile::UserData, 0x19>, buffer<bytes, 0x5>);
}

interface nn::ahid::ICtrlSession {
	@undocumented
	[0] Unknown0(unknown<0x1>) -> buffer<unknown, 0x6>;
	@undocumented
	[1] Unknown1() -> buffer<unknown, 0x6>;
	@undocumented
	[2] Unknown2(unknown<0x2>) -> buffer<unknown, 0x6>;
	@undocumented
	[3] Unknown3(unknown<0x2>, buffer<unknown, 0x5>);
	@undocumented
	[4] Unknown4(unknown<0x1>) -> buffer<unknown, 0x6>;
	@undocumented
	[5] Unknown5(unknown<0x2>);
	@undocumented
	[6] Unknown6() -> buffer<unknown, 0x6>;
	@undocumented
	[7] Unknown7(unknown<0x1>);
	@undocumented
	[8] Unknown8(unknown<0x6>) -> buffer<unknown, 0x6>;
	@undocumented
	[9] Unknown9(unknown<0x6>, buffer<unknown, 0x5>);
	@undocumented
	[10] Unknown10() -> handle<copy>;
	@undocumented
	[11] Unknown11();
	@version(3.0.0+)
	@undocumented
	[12] Unknown12(unknown<0x8>, buffer<unknown, 0x5>) -> unknown<0x4>;
}

interface nn::ahid::IReadSession {
	@version(1.0.0-2.0.0)
	@undocumented
	[0] Unknown0() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[0] Unknown0(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
}

interface nn::ahid::IServerSession is ahid:cd {
	@undocumented
	[0] Unknown0(unknown<0x4>);
	@undocumented
	[1] Unknown1(unknown<0x4>);
	@undocumented
	[2] Unknown2(unknown<0x4>) -> object<nn::ahid::ICtrlSession>;
	@undocumented
	[3] Unknown3(unknown<0x4>) -> object<nn::ahid::IReadSession>;
	@version(1.0.0-2.0.0)
	@undocumented
	[4] Unknown4(unknown<0x4>) -> object<nn::ahid::IWriteSession>;
}

@version(1.0.0-2.0.0)
interface nn::ahid::IWriteSession {
	@undocumented
	[0] Unknown0(buffer<unknown, 0x5>) -> unknown<0x4>;
}

interface nn::ahid::hdr::ISession is ahid:hdr {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1(unknown<0x4>, buffer<unknown, 0x5>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[2] Unknown2(unknown<0x4>) -> buffer<unknown, 0x6>;
	@undocumented
	[3] Unknown3(buffer<unknown, 0x5>) -> unknown<0x4>;
	@undocumented
	[4] Unknown4(unknown<0x4>);
}

interface nn::am::service::IAllSystemAppletProxiesService is appletAE {
	[100] OpenSystemAppletProxy(u64, pid, handle<copy>) -> object<nn::am::service::ISystemAppletProxy>;

	@version(1.0.0-2.0.0)
	[200] OpenLibraryAppletProxy(u64, pid, handle<copy>) -> object<nn::am::service::ILibraryAppletProxy>;
	@version(3.0.0+)
	[200] OpenLibraryAppletProxyOld(u64, pid, handle<copy>) -> object<nn::am::service::ILibraryAppletProxy>;
	@version(3.0.0+)
	[201] OpenLibraryAppletProxy(u64, pid, handle<copy>, buffer<nn::am::AppletAttribute, 0x15>) -> object<nn::am::service::ILibraryAppletProxy>;

	[300] OpenOverlayAppletProxy(u64, pid, handle<copy>) -> object<nn::am::service::IOverlayAppletProxy>;

	[350] OpenSystemApplicationProxy(u64, pid, handle<copy>) -> object<nn::am::service::IApplicationProxy>;

	[400] CreateSelfLibraryAppletCreatorForDevelop(u64, pid) -> object<nn::am::service::ILibraryAppletCreator>;
}

interface nn::am::service::IAppletAccessor {
	[0] GetAppletStateChangedEvent() -> handle<copy>;
	[1] IsCompleted() -> b8;

	[10] Start();

	[20] RequestExit();

	[25] Terminate();

	[30] GetResult();
}

interface nn::am::service::IApplicationAccessor {
	[0] GetAppletStateChangedEvent() -> handle<copy>;
	[1] IsCompleted() -> b8;

	[10] Start();

	[20] RequestExit();

	[25] Terminate();

	[30] GetResult();

	[101] RequestForApplicationToGetForeground();

	[110] TerminateAllLibraryApplets();
	[111] AreAnyLibraryAppletsLeft() -> b8;
	[112] GetCurrentLibraryApplet() -> object<nn::am::service::IAppletAccessor>;

	[120] GetApplicationId() -> nn::ncm::ApplicationId;
	[121] PushLaunchParameter(u32, object<nn::am::service::IStorage>);
	[122] GetApplicationControlProperty() -> buffer<bytes, 0x6>;
	@version(2.0.0+)
	[123] GetApplicationLaunchProperty() -> buffer<bytes, 0x6>;
}

interface nn::am::service::IApplicationCreator {
	[0] CreateApplication(nn::ncm::ApplicationId) -> object<nn::am::service::IApplicationAccessor>;
	[1] PopLaunchRequestedApplication() -> object<nn::am::service::IApplicationAccessor>;

	[10] CreateSystemApplication(nn::ncm::SystemApplicationId) -> object<nn::am::service::IApplicationAccessor>;

	[100] PopFloatingApplicationForDevelopment() -> object<nn::am::service::IApplicationAccessor>;
}

interface nn::am::service::IApplicationFunctions {
	[1] PopLaunchParameter(u32) -> object<nn::am::service::IStorage>;

	[10] CreateApplicationAndPushAndRequestToStart(nn::ncm::ApplicationId, object<nn::am::service::IStorage>);
	@version(3.0.0+)
	[11] CreateApplicationAndPushAndRequestToStartForQuest(u32, u32, nn::ncm::ApplicationId, object<nn::am::service::IStorage>);
	@version(4.0.0+)
	[12] CreateApplicationAndRequestToStart(nn::ncm::ApplicationId);
	@version(4.0.0+)
	[13] CreateApplicationAndRequestToStartForQuest(u32, u32, nn::ncm::ApplicationId);

	[20] EnsureSaveData(nn::account::Uid) -> u64;
	[21] GetDesiredLanguage() -> nn::settings::LanguageCode;
	[22] SetTerminateResult(u32);
	[23] GetDisplayVersion() -> nn::oe::DisplayVersion;
	@version(2.0.0+)
	[24] GetLaunchStorageInfoForDebug() -> (nn::ncm::StorageId, nn::ncm::StorageId);
	@version(3.0.0+)
	[25] ExtendSaveData(u8, nn::account::Uid, u64, u64) -> u64;
	@version(3.0.0+)
	[26] GetSaveDataSize(u8, nn::account::Uid) -> (u64, u64);

	@version(1.0.0)
	[30] BeginBlockingHomeButton(unknown<0x8>);
	@version(2.0.0+)
	[30] BeginBlockingHomeButtonShortAndLongPressed(u64);
	@version(1.0.0)
	[31] EndBlockingHomeButton();
	@version(2.0.0+)
	[31] EndBlockingHomeButtonShortAndLongPressed();
	@version(2.0.0+)
	[32] BeginBlockingHomeButton(u64);
	@version(2.0.0+)
	[33] EndBlockingHomeButton();

	[40] NotifyRunning() -> b8;

	@version(2.0.0+)
	[50] GetPseudoDeviceId() -> nn::util::Uuid;

	@version(2.0.0+)
	[60] SetMediaPlaybackStateForApplication(b8);

	@version(3.0.0+)
	[65] IsGamePlayRecordingSupported() -> b8;
	@version(3.0.0+)
	[66] InitializeGamePlayRecording(u64, handle<copy>);
	@version(3.0.0+)
	[67] SetGamePlayRecordingState(u32);
	@version(4.0.0+)
	[68] RequestFlushGamePlayingMovieForDebug();

	@version(3.0.0+)
	[70] RequestToShutdown();
	@version(3.0.0+)
	[71] RequestToReboot();

	@version(4.0.0+)
	[80] ExitAndRequestToShowThanksMessage();

	@version(4.0.0+)
	[90] EnableApplicationCrashReport(b8);
}

interface nn::am::service::IApplicationProxy {
	[0] GetCommonStateGetter() -> object<nn::am::service::ICommonStateGetter>;
	[1] GetSelfController() -> object<nn::am::service::ISelfController>;
	[2] GetWindowController() -> object<nn::am::service::IWindowController>;
	[3] GetAudioController() -> object<nn::am::service::IAudioController>;
	[4] GetDisplayController() -> object<nn::am::service::IDisplayController>;

	[10] GetProcessWindingController() -> object<nn::am::service::IProcessWindingController>;
	[11] GetLibraryAppletCreator() -> object<nn::am::service::ILibraryAppletCreator>;

	[20] GetApplicationFunctions() -> object<nn::am::service::IApplicationFunctions>;

	[1000] GetDebugFunctions() -> object<nn::am::service::IDebugFunctions>;
}

interface nn::am::service::IApplicationProxyService is appletOE {
	[0] OpenApplicationProxy(u64, pid, handle<copy>) -> object<nn::am::service::IApplicationProxy>;
}

interface nn::am::service::IAudioController {
	[0] SetExpectedMasterVolume(f32, f32);
	[1] GetMainAppletExpectedMasterVolume() -> f32;
	[2] GetLibraryAppletExpectedMasterVolume() -> f32;
	[3] ChangeMainAppletMasterVolume(f32, u64);
	[4] SetTransparentVolumeRate(f32);
}

interface nn::am::service::ICommonStateGetter {
	[0] GetEventHandle() -> handle<copy>;
	[1] ReceiveMessage() -> nn::am::AppletMessage;
	[2] GetThisAppletKind() -> nn::am::service::AppletKind;
	[3] AllowToEnterSleep();
	[4] DisallowToEnterSleep();
	[5] GetOperationMode() -> u8;
	[6] GetPerformanceMode() -> u32;
	[7] GetCradleStatus() -> u8;
	[8] GetBootMode() -> u8;
	[9] GetCurrentFocusState() -> u8;
	[10] RequestToAcquireSleepLock();
	[11] ReleaseSleepLock();
	[12] ReleaseSleepLockTransiently();
	[13] GetAcquiredSleepLockEvent() -> handle<copy>;

	[20] PushToGeneralChannel(object<nn::am::service::IStorage>);

	[30] GetHomeButtonReaderLockAccessor() -> object<nn::am::service::ILockAccessor>;
	@version(2.0.0+)
	[31] GetReaderLockAccessorEx(u32) -> object<nn::am::service::ILockAccessor>;

	@version(2.0.0+)
	[40] GetCradleFwVersion() -> (u32, u32, u32, u32);

	@version(3.0.0+)
	[50] IsVrModeEnabled() -> b8;
	@version(3.0.0+)
	[51] SetVrModeEnabled(b8);
	@version(4.0.0+)
	[52] SetLcdBacklighOffEnabled(b8);

	@version(3.0.0+)
	[55] IsInControllerFirmwareUpdateSection() -> b8;

	@version(3.0.0+)
	[60] GetDefaultDisplayResolution() -> (u32, u32);
	@version(3.0.0+)
	[61] GetDefaultDisplayResolutionChangeEvent() -> handle<copy>;
	@version(4.0.0+)
	[62] GetHdcpAuthenticationState() -> u32;
	@version(4.0.0+)
	[63] GetHdcpAuthenticationStateChangeEvent() -> handle<copy>;
}

interface nn::am::service::IDebugFunctions {
	[0] NotifyMessageToHomeMenuForDebug(nn::am::AppletMessage);
	[1] OpenMainApplication() -> object<nn::am::service::IApplicationAccessor>;

	[10] EmulateButtonEvent(nn::am::service::EmulatedButtonEvent);

	[20] InvalidateTransitionLayer();
}

interface nn::am::service::IDisplayController {
	[0] GetLastForegroundCaptureImage() -> buffer<bytes, 0x6>;
	[1] UpdateLastForegroundCaptureImage();
	[2] GetLastApplicationCaptureImage() -> buffer<bytes, 0x6>;
	[3] GetCallerAppletCaptureImage() -> buffer<bytes, 0x6>;
	[4] UpdateCallerAppletCaptureImage();
	[5] GetLastForegroundCaptureImageEx() -> (b8, buffer<bytes, 0x6>);
	[6] GetLastApplicationCaptureImageEx() -> (b8, buffer<bytes, 0x6>);
	[7] GetCallerAppletCaptureImageEx() -> (b8, buffer<bytes, 0x6>);
	@version(2.0.0+)
	[8] TakeScreenShotOfOwnLayer(b8, u32);

	[10] AcquireLastApplicationCaptureBuffer() -> handle<copy>;
	[11] ReleaseLastApplicationCaptureBuffer();
	[12] AcquireLastForegroundCaptureBuffer() -> handle<copy>;
	[13] ReleaseLastForegroundCaptureBuffer();
	[14] AcquireCallerAppletCaptureBuffer() -> handle<copy>;
	[15] ReleaseCallerAppletCaptureBuffer();
	[16] AcquireLastApplicationCaptureBufferEx() -> (b8, handle<copy>);
	[17] AcquireLastForegroundCaptureBufferEx() -> (b8, handle<copy>);
	[18] AcquireCallerAppletCaptureBufferEx() -> (b8, handle<copy>);

	@version(3.0.0+)
	[20] ClearCaptureBuffer(b8, u32, u32);
	@version(3.0.0+)
	[21] ClearAppletTransitionBuffer(u32);
	@version(4.0.0+)
	[22] AcquireLastApplicationCaptureSharedBuffer() -> (b8, u32);
	@version(4.0.0+)
	[23] ReleaseLastApplicationCaptureSharedBuffer();
	@version(4.0.0+)
	[24] AcquireLastForegroundCaptureSharedBuffer() -> (b8, u32);
	@version(4.0.0+)
	[25] ReleaseLastForegroundCaptureSharedBuffer();
	@version(4.0.0+)
	[26] AcquireCallerAppletCaptureSharedBuffer() -> (b8, u32);
	@version(4.0.0+)
	[27] ReleaseCallerAppletCaptureSharedBuffer();
}

interface nn::am::service::IGlobalStateController {
	[0] RequestToEnterSleep();
	[1] EnterSleep();
	[2] StartSleepSequence(b8);
	[3] StartShutdownSequence();
	[4] StartRebootSequence();

	[10] LoadAndApplyIdlePolicySettings();
	@version(2.0.0+)
	[11] NotifyCecSettingsChanged();
	@version(3.0.0+)
	[12] SetDefaultHomeButtonLongPressTime(u64);
	@version(3.0.0+)
	[13] UpdateDefaultDisplayResolution();
	@version(3.0.0+)
	[14] ShouldSleepOnBoot() -> b8;
	@version(4.0.0+)
	[15] GetHdcpAuthenticationFailedEvent() -> handle<copy>;
}

interface nn::am::service::IHomeMenuFunctions {
	[10] RequestToGetForeground();
	[11] LockForeground();
	[12] UnlockForeground();

	[20] PopFromGeneralChannel() -> object<nn::am::service::IStorage>;
	[21] GetPopFromGeneralChannelEvent() -> handle<copy>;

	[30] GetHomeButtonWriterLockAccessor() -> object<nn::am::service::ILockAccessor>;
	@version(2.0.0+)
	[31] GetWriterLockAccessorEx(u32) -> object<nn::am::service::ILockAccessor>;
}

interface nn::am::service::ILibraryAppletAccessor {
	[0] GetAppletStateChangedEvent() -> handle<copy>;
	[1] IsCompleted() -> b8;

	[10] Start();

	[20] RequestExit();

	[25] Terminate();

	[30] GetResult();

	@version(2.0.0+)
	[50] SetOutOfFocusApplicationSuspendingEnabled(b8);

	[100] PushInData(object<nn::am::service::IStorage>);
	[101] PopOutData() -> object<nn::am::service::IStorage>;
	[102] PushExtraStorage(object<nn::am::service::IStorage>);
	[103] PushInteractiveInData(object<nn::am::service::IStorage>);
	[104] PopInteractiveOutData() -> object<nn::am::service::IStorage>;
	[105] GetPopOutDataEvent() -> handle<copy>;
	[106] GetPopInteractiveOutDataEvent() -> handle<copy>;

	[110] NeedsToExitProcess() -> b8;

	[120] GetLibraryAppletInfo() -> nn::am::service::LibraryAppletInfo;

	[150] RequestForAppletToGetForeground();

	@version(2.0.0+)
	[160] GetIndirectLayerConsumerHandle(nn::applet::AppletResourceUserId, pid) -> u64;
}

interface nn::am::service::ILibraryAppletCreator {
	[0] CreateLibraryApplet(u32, u32) -> object<nn::am::service::ILibraryAppletAccessor>;
	[1] TerminateAllLibraryApplets();
	[2] AreAnyLibraryAppletsLeft() -> b8;

	[10] CreateStorage(u64) -> object<nn::am::service::IStorage>;
	[11] CreateTransferMemoryStorage(b8, u64, handle<copy>) -> object<nn::am::service::IStorage>;
	@version(2.0.0+)
	[12] CreateHandleStorage(u64, handle<copy>) -> object<nn::am::service::IStorage>;
}

interface nn::am::service::ILibraryAppletProxy {
	[0] GetCommonStateGetter() -> object<nn::am::service::ICommonStateGetter>;
	[1] GetSelfController() -> object<nn::am::service::ISelfController>;
	[2] GetWindowController() -> object<nn::am::service::IWindowController>;
	[3] GetAudioController() -> object<nn::am::service::IAudioController>;
	[4] GetDisplayController() -> object<nn::am::service::IDisplayController>;

	[10] GetProcessWindingController() -> object<nn::am::service::IProcessWindingController>;
	[11] GetLibraryAppletCreator() -> object<nn::am::service::ILibraryAppletCreator>;

	[20] OpenLibraryAppletSelfAccessor() -> object<nn::am::service::ILibraryAppletSelfAccessor>;

	[1000] GetDebugFunctions() -> object<nn::am::service::IDebugFunctions>;
}

interface nn::am::service::ILibraryAppletSelfAccessor {
	[0] PopInData() -> object<nn::am::service::IStorage>;
	[1] PushOutData(object<nn::am::service::IStorage>);
	[2] PopInteractiveInData() -> object<nn::am::service::IStorage>;
	[3] PushInteractiveOutData(object<nn::am::service::IStorage>);

	[5] GetPopInDataEvent() -> handle<copy>;
	[6] GetPopInteractiveInDataEvent() -> handle<copy>;

	[10] ExitProcessAndReturn();
	[11] GetLibraryAppletInfo() -> nn::am::service::LibraryAppletInfo;
	[12] GetMainAppletIdentityInfo() -> nn::am::service::AppletIdentityInfo;
	[13] CanUseApplicationCore() -> b8;
	[14] GetCallerAppletIdentityInfo() -> nn::am::service::AppletIdentityInfo;
	@version(2.0.0+)
	[15] GetMainAppletApplicationControlProperty() -> buffer<nn::ns::ApplicationControlProperty, 0x16>;
	@version(2.0.0+)
	[16] GetMainAppletStorageId() -> nn::ncm::StorageId;
	@version(3.0.0+)
	[17] GetCallerAppletIdentityInfoStack() -> (u32, buffer<nn::am::service::AppletIdentityInfo[], 0x6>);
	@version(4.0.0+)
	[18] GetNextReturnDestinationAppletIdentityInfo() -> nn::am::service::AppletIdentityInfo;
	@version(4.0.0+)
	[19] GetDesirableKeyboardLayout() -> u32;
	[20] PopExtraStorage() -> object<nn::am::service::IStorage>;

	[25] GetPopExtraStorageEvent() -> handle<copy>;

	[30] UnpopInData(object<nn::am::service::IStorage>);
	[31] UnpopExtraStorage(object<nn::am::service::IStorage>);

	@version(2.0.0+)
	[40] GetIndirectLayerProducerHandle() -> u64;

	@version(3.0.0+)
	[50] ReportVisibleError(nn::err::ErrorCode);
	@version(4.0.0+)
	[51] ReportVisibleErrorWithErrorContext(nn::err::ErrorCode, buffer<nn::err::ErrorContext, 0x15>);

	@version(4.0.0+)
	[60] GetMainAppletApplicationDesiredLanguage() -> nn::settings::LanguageCode;

	@version(4.0.0+)
	[100] CreateGameMovieTrimmer(u64, handle<copy>) -> object<nn::grcsrv::IGameMovieTrimmer>;
}

interface nn::am::service::ILockAccessor {
	[1] TryLock(b8) -> (b8, handle<copy>);
	[2] Unlock();
	[3] GetEvent() -> handle<copy>;
}

interface nn::am::service::IOverlayAppletProxy {
	[0] GetCommonStateGetter() -> object<nn::am::service::ICommonStateGetter>;
	[1] GetSelfController() -> object<nn::am::service::ISelfController>;
	[2] GetWindowController() -> object<nn::am::service::IWindowController>;
	[3] GetAudioController() -> object<nn::am::service::IAudioController>;
	[4] GetDisplayController() -> object<nn::am::service::IDisplayController>;

	[10] GetProcessWindingController() -> object<nn::am::service::IProcessWindingController>;
	[11] GetLibraryAppletCreator() -> object<nn::am::service::ILibraryAppletCreator>;

	[20] GetOverlayFunctions() -> object<nn::am::service::IOverlayFunctions>;

	[1000] GetDebugFunctions() -> object<nn::am::service::IDebugFunctions>;
}

interface nn::am::service::IOverlayFunctions {
	[0] BeginToWatchShortHomeButtonMessage();
	[1] EndToWatchShortHomeButtonMessage();
	[2] GetApplicationIdForLogo() -> nn::ncm::ApplicationId;
	[3] SetGpuTimeSliceBoost(u64);
	@version(2.0.0+)
	[4] SetAutoSleepTimeAndDimmingTimeEnabled(b8);
	@version(2.0.0+)
	[5] TerminateApplicationAndSetReason(u32);
	@version(3.0.0+)
	[6] SetScreenShotPermissionGlobally(b8);
}

interface nn::am::service::IProcessWindingController {
	[0] GetLaunchReason() -> nn::am::service::AppletProcessLaunchReason;

	[11] OpenCallingLibraryApplet() -> object<nn::am::service::ILibraryAppletAccessor>;

	[21] PushContext(object<nn::am::service::IStorage>);
	[22] PopContext() -> object<nn::am::service::IStorage>;
	[23] CancelWindingReservation();

	[30] WindAndDoReserved();

	[40] ReserveToStartAndWaitAndUnwindThis(object<nn::am::service::ILibraryAppletAccessor>);
	@version(4.0.0+)
	[41] ReserveToStartAndWait(object<nn::am::service::ILibraryAppletAccessor>);
}

interface nn::am::service::ISelfController {
	[0] Exit();
	[1] LockExit();
	[2] UnlockExit();
	@version(2.0.0+)
	[3] EnterFatalSection();
	@version(2.0.0+)
	[4] LeaveFatalSection();

	[9] GetLibraryAppletLaunchableEvent() -> handle<copy>;
	[10] SetScreenShotPermission(u32);
	[11] SetOperationModeChangedNotification(b8);
	[12] SetPerformanceModeChangedNotification(b8);
	[13] SetFocusHandlingMode(b8, b8, b8);
	[14] SetRestartMessageEnabled(b8);
	@version(2.0.0+)
	[15] SetScreenShotAppletIdentityInfo(nn::am::service::AppletIdentityInfo);
	@version(2.0.0+)
	[16] SetOutOfFocusSuspendingEnabled(b8);
	@version(3.0.0+)
	[17] SetControllerFirmwareUpdateSection(b8);
	@version(3.0.0+)
	[18] SetRequiresCaptureButtonShortPressedMessage(b8);
	@version(3.0.0+)
	[19] SetScreenShotImageOrientation(u32);
	@version(4.0.0+)
	[20] SetDesirableKeyboardLayout(u32);

	[40] CreateManagedDisplayLayer() -> u64;
	@version(4.0.0+)
	[41] IsSystemBufferSharingEnabled();
	@version(4.0.0+)
	[42] GetSystemSharedLayerHandle() -> (nn::vi::fbshare::SharedBufferHandle, nn::vi::fbshare::SharedLayerHandle);

	[50] SetHandlesRequestToDisplay(b8);
	[51] ApproveToDisplay();

	[60] OverrideAutoSleepTimeAndDimmingTime(u32, u32, u32, u32);
	[61] SetMediaPlaybackState(b8);
	[62] SetIdleTimeDetectionExtension(u32);
	[63] GetIdleTimeDetectionExtension() -> u32;
	[64] SetInputDetectionSourceSet(u32);
	@version(2.0.0+)
	[65] ReportUserIsActive();
	@version(3.0.0+)
	[66] GetCurrentIlluminance() -> f32;
	@version(3.0.0+)
	[67] IsIlluminanceAvailable() -> b8;

	@version(4.0.0+)
	[70] ReportMultimediaError(u32, buffer<bytes, 0x5>);

	@version(4.0.0+)
	[80] SetWirelessPriorityMode(u32);
}

interface nn::am::service::IStorage {
	@undocumented
	[0] Unknown0() -> object<nn::am::service::IStorageAccessor>;
	@version(2.0.0+)
	@undocumented
	[1] Unknown1() -> object<nn::am::service::ITransferStorageAccessor>;
}

interface nn::am::service::IStorageAccessor {
	[0] GetSize() -> u64;

	[10] Write(u64, buffer<bytes, 0x21>);
	[11] Read(u64) -> buffer<bytes, 0x22>;
}

interface nn::am::service::ISystemAppletProxy {
	[0] GetCommonStateGetter() -> object<nn::am::service::ICommonStateGetter>;
	[1] GetSelfController() -> object<nn::am::service::ISelfController>;
	[2] GetWindowController() -> object<nn::am::service::IWindowController>;
	[3] GetAudioController() -> object<nn::am::service::IAudioController>;
	[4] GetDisplayController() -> object<nn::am::service::IDisplayController>;

	[10] GetProcessWindingController() -> object<nn::am::service::IProcessWindingController>;
	[11] GetLibraryAppletCreator() -> object<nn::am::service::ILibraryAppletCreator>;

	[20] GetHomeMenuFunctions() -> object<nn::am::service::IHomeMenuFunctions>;
	[21] GetGlobalStateController() -> object<nn::am::service::IGlobalStateController>;
	[22] GetApplicationCreator() -> object<nn::am::service::IApplicationCreator>;

	[1000] GetDebugFunctions() -> object<nn::am::service::IDebugFunctions>;
}

@version(2.0.0+)
interface nn::am::service::ITransferStorageAccessor {
	[0] GetSize() -> u64;
	[1] GetHandle() -> (u64, handle<copy>);
}

interface nn::am::service::IWindow {
}

interface nn::am::service::IWindowController {
	[0] CreateWindow(nn::am::service::WindowCreationOption) -> object<nn::am::service::IWindow>;
	[1] GetAppletResourceUserId() -> nn::applet::AppletResourceUserId;

	[10] AcquireForegroundRights();
	[11] ReleaseForegroundRights();
	[12] RejectToChangeIntoBackground();
}

interface nn::aocsrv::detail::IAddOnContentManager is aoc:u {
	[0] CountAddOnContentByApplicationId(nn::ncm::ApplicationId) -> u32;
	[1] ListAddOnContentByApplicationId(u32, u32, nn::ncm::ApplicationId) -> (u32, buffer<u32[], 0x6>);
	[2] CountAddOnContent(u64, pid) -> u32;
	[3] ListAddOnContent(u32, u32, u64, pid) -> (u32, buffer<u32[], 0x6>);
	[4] GetAddOnContentBaseIdByApplicationId(nn::ncm::ApplicationId) -> u64;
	[5] GetAddOnContentBaseId(u64, pid) -> u64;
	@version(2.0.0+)
	[6] PrepareAddOnContentByApplicationId(u32, nn::ncm::ApplicationId);
	@version(2.0.0+)
	[7] PrepareAddOnContent(u32, u64, pid);
	@version(4.0.0+)
	[8] GetAddOnContentListChangedEvent() -> handle<copy>;
}

@version(1.0.0)
interface nn::apm::IDebugManager {
	[0] GetThrottlingState() -> unknown<0x28>;
	[1] GetLastThrottlingState() -> unknown<0x28>;
	[2] ClearLastThrottlingState();
}

interface nn::apm::IManager is apm {
	[0] OpenSession() -> object<nn::apm::ISession>;
	[1] GetPerformanceMode() -> nn::apm::PerformanceMode;
}

interface nn::apm::IManagerPrivileged is apm:p {
	[0] OpenSession() -> object<nn::apm::ISession>;
}

interface nn::apm::ISession {
	[0] SetPerformanceConfiguration(nn::apm::PerformanceMode, nn::apm::PerformanceConfiguration);
	[1] GetPerformanceConfiguration(nn::apm::PerformanceMode) -> nn::apm::PerformanceConfiguration;
}

interface nn::apm::ISystemManager is apm:sys {
	[0] RequestPerformanceMode(nn::apm::PerformanceMode);
	[1] GetPerformanceEvent(nn::apm::EventTarget) -> handle<copy>;
	@version(2.0.0+)
	[2] GetThrottlingState() -> nn::apm::ThrottlingState;
	@version(2.0.0+)
	[3] GetLastThrottlingState() -> nn::apm::ThrottlingState;
	@version(2.0.0+)
	[4] ClearLastThrottlingState();
}

interface nn::arp::detail::IReader is arp:r {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> unknown<0x10>;
	@undocumented
	[1] Unknown1(unknown<0x8>) -> unknown<0x10>;
	@undocumented
	[2] Unknown2(unknown<0x8>) -> buffer<unknown, 0x16>;
	@undocumented
	[3] Unknown3(unknown<0x8>) -> buffer<unknown, 0x16>;
}

interface nn::arp::detail::IRegistrar {
	@undocumented
	[0] Unknown0(unknown<0x8>);
	@undocumented
	[1] Unknown1(unknown<0x10>);
	@undocumented
	[2] Unknown2(buffer<unknown, 0x15>);
}

interface nn::arp::detail::IWriter is arp:w {
	@undocumented
	[0] Unknown0() -> object<nn::arp::detail::IRegistrar>;
	@undocumented
	[1] Unknown1(unknown<0x8>);
}

interface nn::audio::detail::IAudioDebugManager is auddebug {
	[0] Unknown0(u32, u64, handle<copy>);
	[1] Unknown1();
	[2] Unknown2();
	[3] Unknown3();
}

interface nn::audio::detail::IAudioDevice {
	[0] Unknown0() -> (u32, buffer<unknown, 0x6>);
	[1] Unknown1(u32, buffer<unknown, 0x5>);
	[2] Unknown2(buffer<unknown, 0x5>) -> u32;
	[3] Unknown3() -> buffer<unknown, 0x6>;
	[4] Unknown4() -> handle<copy>;
	[5] Unknown5() -> u32;
	@version(3.0.0+)
	[6] Unknown6() -> (u32, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[7] Unknown7(u32, buffer<unknown, 0x21>);
	@version(3.0.0+)
	[8] Unknown8(buffer<unknown, 0x21>) -> u32;

	@version(3.0.0+)
	[10] Unknown10() -> buffer<unknown, 0x22>;
	@version(3.0.0+)
	[11] Unknown11() -> handle<copy>;
	@version(3.0.0+)
	[12] Unknown12() -> handle<copy>;
}

interface nn::audio::detail::IAudioIn {
	[0] Unknown0() -> u32;
	[1] Unknown1();
	[2] Unknown2();
	[3] Unknown3(u64, buffer<unknown, 0x5>);
	[4] Unknown4() -> handle<copy>;
	[5] Unknown5() -> (u32, buffer<unknown, 0x6>);
	[6] Unknown6(u64) -> u8;
	@version(3.0.0+)
	[7] Unknown7(u64, handle<copy>, buffer<unknown, 0x5>);
	@version(3.0.0+)
	[8] Unknown8(u64, buffer<unknown, 0x21>);
	@version(3.0.0+)
	[9] Unknown9() -> (u32, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[10] Unknown10(u64, handle<copy>, buffer<unknown, 0x21>);
	@version(4.0.0+)
	[11] Unknown11() -> u32;
	@version(4.0.0+)
	[12] Unknown12(u32);
	@version(4.0.0+)
	[13] Unknown13() -> u32;
}

interface nn::audio::detail::IAudioInManager is audin:u {
	[0] Unknown0() -> (u32, buffer<unknown, 0x6>);
	[1] Unknown1(bytes<0x8, 4>, u64, pid, handle<copy>, buffer<unknown, 0x5>) -> (bytes<0x10, 4>, buffer<unknown, 0x6>, object<nn::audio::detail::IAudioIn>);
	@version(3.0.0+)
	[2] Unknown2() -> (u32, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[3] Unknown3(bytes<0x8, 4>, u64, pid, handle<copy>, buffer<unknown, 0x21>) -> (bytes<0x10, 4>, buffer<unknown, 0x22>, object<nn::audio::detail::IAudioIn>);
	@version(3.0.0+)
	[4] Unknown4() -> (u32, buffer<unknown, 0x22>);
}

interface nn::audio::detail::IAudioInManagerForApplet is audin:a {
	@version(1.0.0-3.0.0)
	[0] Unknown0(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[0] Unknown0(u64, u64);
	@version(1.0.0-3.0.0)
	[1] Unknown1(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[1] Unknown1(u64, u64);
	[2] Unknown2(u64) -> u32;
	[3] Unknown3(u32, u64, u64);
}

interface nn::audio::detail::IAudioInManagerForDebugger {
	[0] Unknown0(u64);
	[1] Unknown1(u64);
}

interface nn::audio::detail::IAudioOut {
	[0] Unknown0() -> u32;
	[1] Unknown1();
	[2] Unknown2();
	[3] Unknown3(u64, buffer<unknown, 0x5>);
	[4] Unknown4() -> handle<copy>;
	[5] Unknown5() -> (u32, buffer<unknown, 0x6>);
	[6] Unknown6(u64) -> u8;
	@version(3.0.0+)
	[7] Unknown7(u64, buffer<unknown, 0x21>);
	@version(3.0.0+)
	[8] Unknown8() -> (u32, buffer<unknown, 0x22>);
	@version(4.0.0+)
	[9] Unknown9() -> u32;
	@version(4.0.0+)
	[10] Unknown10() -> u64;
	@version(4.0.0+)
	[11] Unknown11() -> u8;
}

interface nn::audio::detail::IAudioOutManager is audout:u {
	[0] Unknown0() -> (u32, buffer<unknown, 0x6>);
	[1] Unknown1(bytes<0x8, 4>, u64, pid, handle<copy>, buffer<unknown, 0x5>) -> (bytes<0x10, 4>, buffer<unknown, 0x6>, object<nn::audio::detail::IAudioOut>);
	@version(3.0.0+)
	[2] Unknown2() -> (u32, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[3] Unknown3(bytes<0x8, 4>, u64, pid, handle<copy>, buffer<unknown, 0x21>) -> (bytes<0x10, 4>, buffer<unknown, 0x22>, object<nn::audio::detail::IAudioOut>);
}

interface nn::audio::detail::IAudioOutManagerForApplet is audout:a {
	@version(1.0.0-3.0.0)
	[0] Unknown0(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[0] Unknown0(u64, u64);
	@version(1.0.0-3.0.0)
	[1] Unknown1(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[1] Unknown1(u64, u64);
	[2] Unknown2(u64) -> u32;
	[3] Unknown3(u32, u64, u64);
	@version(4.0.0+)
	[4] Unknown4(u64) -> u32;
	@version(4.0.0+)
	[5] Unknown5(u32, u64, u64);
}

interface nn::audio::detail::IAudioOutManagerForDebugger is audin:d, audout:d, audren:d, audrec:d {
	[0] Unknown0(u64);
	[1] Unknown1(u64);
}

interface nn::audio::detail::IAudioRenderer {
	[0] Unknown0() -> u32;
	[1] Unknown1() -> u32;
	[2] Unknown2() -> u32;
	[3] Unknown3() -> u32;
	[4] Unknown4(buffer<unknown, 0x5>) -> (buffer<unknown, 0x6>, buffer<unknown, 0x6>);
	[5] Unknown5();
	[6] Unknown6();
	[7] Unknown7() -> handle<copy>;
	[8] Unknown8(u32);
	[9] Unknown9() -> u32;
	@version(3.0.0+)
	[10] Unknown10(buffer<unknown, 0x21>) -> (buffer<unknown, 0x22>, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[11] Unknown11();
}

interface nn::audio::detail::IAudioRendererManager is audren:u {
	[0] Unknown0(bytes<0x34, 4>, u64, u64, pid, handle<copy>, handle<copy>) -> object<nn::audio::detail::IAudioRenderer>;
	[1] Unknown1(bytes<0x34, 4>) -> u64;
	[2] Unknown2(u64) -> object<nn::audio::detail::IAudioDevice>;
	@version(3.0.0+)
	[3] Unknown3(bytes<0x34, 4>, u64, u64, u64, pid, handle<copy>) -> object<nn::audio::detail::IAudioRenderer>;
	@version(4.0.0+)
	[4] Unknown4(u32, u64) -> object<nn::audio::detail::IAudioDevice>;
}

interface nn::audio::detail::IAudioRendererManagerForApplet is audren:a {
	@version(1.0.0-3.0.0)
	[0] Unknown0(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[0] Unknown0(u64, u64);
	@version(1.0.0-3.0.0)
	[1] Unknown1(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[1] Unknown1(u64, u64);
	[2] Unknown2(u64) -> u32;
	[3] Unknown3(u32, u64, u64);
	[4] Unknown4(u64);
	[5] Unknown5(u64);
	@version(4.0.0+)
	[6] Unknown6(u64) -> u32;
	@version(4.0.0+)
	[7] Unknown7(u32, u64, u64);
}

interface nn::audio::detail::IAudioRendererManagerForDebugger {
	[0] Unknown0(u64);
	[1] Unknown1(u64);
}

@version(1.0.0-2.0.0)
interface nn::audio::detail::ICodecController is codecctl {
	[0] Unknown0();
	[1] Unknown1();
	[2] Unknown2();
	[3] Unknown3();
	[4] Unknown4(u32);
	[5] Unknown5() -> u32;
	[6] Unknown6() -> u32;
	[7] Unknown7(u32);
	[8] Unknown8() -> u32;
	[9] Unknown9() -> handle<copy>;
	[10] Unknown10() -> u8;
	[11] Unknown11();
	[12] Unknown12() -> u8;
}

interface nn::audio::detail::IFinalOutputRecorder {
	[0] Unknown0() -> u32;
	[1] Unknown1();
	[2] Unknown2();
	[3] Unknown3(u64, buffer<unknown, 0x5>);
	[4] Unknown4() -> handle<copy>;
	@version(1.0.0)
	[5] Unknown5() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	[5] Unknown5() -> (u32, u64, buffer<unknown, 0x6>);
	[6] Unknown6(u64) -> u8;
	@version(2.0.0+)
	[7] Unknown7(u64) -> u64;
	@version(3.0.0+)
	[8] Unknown8(u64, buffer<unknown, 0x21>);
	@version(3.0.0+)
	[9] Unknown9() -> (u32, u64, buffer<unknown, 0x22>);
}

interface nn::audio::detail::IFinalOutputRecorderManager is audrec:u {
	@version(1.0.0-2.0.0)
	[0] Unknown0(u32, u64, handle<copy>) -> (bytes<0x10, 4>, object<nn::audio::detail::IFinalOutputRecorder>);
	@version(3.0.0+)
	[0] Unknown0(bytes<0x8, 4>, u64, handle<copy>) -> (bytes<0x10, 4>, object<nn::audio::detail::IFinalOutputRecorder>);
}

interface nn::audio::detail::IFinalOutputRecorderManagerForApplet is audrec:a {
	@version(1.0.0-3.0.0)
	[0] Unknown0(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[0] Unknown0(u64, u64);
	@version(1.0.0-3.0.0)
	[1] Unknown1(u64, u64) -> handle<copy>;
	@version(4.0.0+)
	[1] Unknown1(u64, u64);
}

interface nn::audio::detail::IFinalOutputRecorderManagerForDebugger {
	[0] Unknown0(u64);
	[1] Unknown1(u64);
}

interface nn::audioctrl::detail::IAudioController is audctl {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[1] Unknown1(unknown<0x8>);
	@undocumented
	[2] Unknown2() -> unknown<0x4>;
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
	@undocumented
	[4] Unknown4(unknown<0x4>) -> unknown<0x1>;
	@undocumented
	[5] Unknown5(unknown<0x8>);
	@undocumented
	[6] Unknown6(unknown<0x4>) -> unknown<0x1>;
	@undocumented
	[7] Unknown7(unknown<0x18>);
	@undocumented
	[8] Unknown8() -> unknown<0x4>;
	@undocumented
	[9] Unknown9(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[10] Unknown10(unknown<0x8>);
	@undocumented
	[11] Unknown11(unknown<0x4>);
	@undocumented
	[12] Unknown12() -> unknown<0x4>;
	@undocumented
	[13] Unknown13(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[14] Unknown14(unknown<0x8>);
	@undocumented
	[15] Unknown15(unknown<0x4>);
	@undocumented
	[16] Unknown16(unknown<0x1>);
	@version(3.0.0+)
	@undocumented
	[17] Unknown17(unknown<0x4>);
	@version(3.0.0+)
	@undocumented
	[18] Unknown18() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[19] Unknown19() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[20] Unknown20() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[21] Unknown21() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[22] Unknown22();
	@version(4.0.0+)
	@undocumented
	[23] Unknown23(unknown<0x4>);
	@version(4.0.0+)
	@undocumented
	[24] Unknown24() -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[25] Unknown25() -> unknown<0x7>;
	@version(4.0.0+)
	@undocumented
	[26] Unknown26(unknown<0x1>);
}

@version(2.0.0+)
interface nn::bcat::detail::ipc::IBcatService {
	@version(2.0.0)
	[10100] RequestSyncDeliveryCache();
	@version(3.0.0+)
	[10100] RequestSyncDeliveryCache() -> object<nn::bcat::detail::ipc::IDeliveryCacheProgressService>;

	@version(2.0.0)
	[20100] RequestSyncDeliveryCacheWithApplicationId(nn::ApplicationId);
	@version(3.0.0+)
	[20100] RequestSyncDeliveryCacheWithApplicationId(u32, nn::ApplicationId) -> object<nn::bcat::detail::ipc::IDeliveryCacheProgressService>;

	[30100] SetPassphrase(nn::ApplicationId, buffer<u8[], 0x9>);
	@version(2.0.0)
	[30101] RegisterBackgroundDownloadTask(u32, nn::ApplicationId);
	@version(2.0.0)
	[30102] UnregisterBackgroundDownloadTask(nn::ApplicationId);

	@version(3.0.0+)
	[30200] RegisterBackgroundDeliveryTask(u32, nn::ApplicationId);
	@version(3.0.0+)
	[30201] UnregisterBackgroundDeliveryTask(nn::ApplicationId);
	@version(3.0.0+)
	[30202] BlockDeliveryTask(nn::ApplicationId);
	@version(3.0.0+)
	[30203] UnblockDeliveryTask(nn::ApplicationId);

	@version(2.0.0)
	[90100] EnumerateBackgroundDownloadTask() -> (u32, buffer<nn::bcat::TaskInfo[], 0x6>);
	@version(3.0.0+)
	[90100] EnumerateBackgroundDeliveryTask() -> (u32, buffer<nn::bcat::TaskInfo[], 0x6>);

	@version(2.0.0)
	[90200] GetPushNotificationLog() -> (u32, buffer<nn::bcat::PushNotificationLog[], 0x6>);
	@version(3.0.0+)
	[90200] GetDeliveryList(nn::ApplicationId) -> (u64, buffer<bytes, 0x6>);
	@version(3.0.0+)
	[90201] ClearDeliveryCacheStorage(nn::ApplicationId);

	@version(3.0.0+)
	[90300] GetPushNotificationLog() -> (u32, buffer<nn::bcat::PushNotificationLog[], 0x6>);
}

@version(2.0.0+)
interface nn::bcat::detail::ipc::IDeliveryCacheDirectoryService {
	[0] Open(nn::bcat::DirectoryName);
	[1] Read() -> (u32, buffer<nn::bcat::DeliveryCacheDirectoryEntry[], 0x6>);
	[2] GetCount() -> u32;
}

@version(2.0.0+)
interface nn::bcat::detail::ipc::IDeliveryCacheFileService {
	[0] Open(nn::bcat::DirectoryName, nn::bcat::FileName);
	[1] Read(u64) -> (u64, buffer<bytes, 0x6>);
	[2] GetSize() -> u64;
	[3] GetDigest() -> nn::bcat::Digest;
}

@version(2.0.0+)
interface nn::bcat::detail::ipc::IDeliveryCacheProgressService {
	[0] GetEvent() -> handle<copy>;
	[1] GetImpl() -> buffer<nn::bcat::detail::DeliveryCacheProgressImpl, 0x1a>;
}

@version(2.0.0+)
interface nn::bcat::detail::ipc::IDeliveryCacheStorageService {
	[0] CreateFileService() -> object<nn::bcat::detail::ipc::IDeliveryCacheFileService>;
	[1] CreateDirectoryService() -> object<nn::bcat::detail::ipc::IDeliveryCacheDirectoryService>;

	[10] EnumerateDeliveryCacheDirectory() -> (u32, buffer<nn::bcat::DirectoryName[], 0x6>);
}

@version(2.0.0+)
interface nn::bcat::detail::ipc::IServiceCreator is bcat:a, bcat:u, bcat:m, bcat:s {
	[0] CreateBcatService(u64, pid) -> object<nn::bcat::detail::ipc::IBcatService>;
	[1] CreateDeliveryCacheStorageService(u64, pid) -> object<nn::bcat::detail::ipc::IDeliveryCacheStorageService>;
	[2] CreateDeliveryCacheStorageServiceWithApplicationId(nn::ApplicationId) -> object<nn::bcat::detail::ipc::IDeliveryCacheStorageService>;
	@version(2.0.0)
	[3] CreateDeliveryCacheProgressService(u64, pid) -> object<nn::bcat::detail::ipc::IDeliveryCacheProgressService>;
	@version(2.0.0)
	[4] CreateDeliveryCacheProgressServiceWithApplicationId(nn::ApplicationId) -> object<nn::bcat::detail::ipc::IDeliveryCacheProgressService>;
}

@version(2.0.0+)
interface nn::bgtc::IStateControlService {
	@undocumented
	[1] Unknown1() -> unknown<0x4>;
	@undocumented
	[2] Unknown2() -> handle<copy>;
	@undocumented
	[3] Unknown3();
	@undocumented
	[4] Unknown4();
	@version(3.0.0+)
	@undocumented
	[5] Unknown5(unknown<0x1>);
}

@version(2.0.0+)
interface nn::bgtc::ITaskService {
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3() -> handle<copy>;
	@undocumented
	[4] Unknown4() -> unknown<0x1>;
	@undocumented
	[5] Unknown5(buffer<unknown, 0x9>);
	@version(3.0.0+)
	@undocumented
	[6] Unknown6() -> unknown<0x1>;

	@undocumented
	[11] Unknown11(unknown<0x4>);
	@undocumented
	[12] Unknown12() -> unknown<0x4>;
	@undocumented
	[13] Unknown13();
	@undocumented
	[14] Unknown14() -> handle<copy>;
	@undocumented
	[15] Unknown15(unknown<0x8>);

	@version(3.0.0+)
	@undocumented
	[101] Unknown101() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[102] Unknown102() -> unknown<0x1>;
	@version(3.0.0+)
	@undocumented
	[103] Unknown103() -> unknown<0x1>;
}

interface nn::bluetooth::IBluetoothDriver is btdrv {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1() -> handle<copy>;
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3();
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5() -> buffer<unknown, 0x1a>;
	@undocumented
	[6] Unknown6(unknown<0x4>) -> buffer<unknown, 0xa>;
	@undocumented
	[7] Unknown7(unknown<0x4>, buffer<unknown, 0x9>);
	@undocumented
	[8] Unknown8();
	@undocumented
	[9] Unknown9();
	@undocumented
	[10] Unknown10(unknown<0x6>, buffer<unknown, 0x19>);
	@undocumented
	[11] Unknown11(unknown<0x6>);
	@undocumented
	[12] Unknown12(unknown<0x6>);
	@undocumented
	[13] Unknown13(unknown<0x18>);
	@undocumented
	[14] Unknown14(unknown<0xc>);
	@undocumented
	[15] Unknown15() -> (unknown<0x4>, buffer<unknown, 0xa>);
	@undocumented
	[16] Unknown16(unknown<0x2>) -> handle<copy>;
	@undocumented
	[17] Unknown17(unknown<0x6>);
	@undocumented
	[18] Unknown18(unknown<0x6>);
	@undocumented
	[19] Unknown19(unknown<0x6>, buffer<unknown, 0x19>);
	@undocumented
	[20] Unknown20(unknown<0x6>, buffer<unknown, 0x9>);
	@undocumented
	[21] Unknown21(unknown<0xc>, buffer<unknown, 0x19>);
	@undocumented
	[22] Unknown22(unknown<0xc>);
	@undocumented
	[23] Unknown23(unknown<0x6>);
	@undocumented
	[24] Unknown24(buffer<unknown, 0x19>);
	@undocumented
	[25] Unknown25(unknown<0x6>) -> buffer<unknown, 0x1a>;
	@undocumented
	[26] Unknown26();
	@undocumented
	[27] Unknown27() -> (unknown<0x4>, buffer<unknown, 0xa>);
	@undocumented
	[28] Unknown28(unknown<0x7>);
	@undocumented
	[29] Unknown29(unknown<0x7>);
	@undocumented
	[30] Unknown30(unknown<0x6>, buffer<unknown, 0x9>);
	@undocumented
	[31] Unknown31(unknown<0x1>);
	@undocumented
	[32] Unknown32();
	@undocumented
	[33] Unknown33();
	@undocumented
	[34] Unknown34(unknown<0x1>);
	@undocumented
	[35] Unknown35(unknown<0x2>);
	@version(1.0.0-3.0.0)
	@undocumented
	[36] Unknown36() -> handle<copy>;
	@version(4.0.0+)
	@undocumented
	[36] Unknown36(unknown<0x1>);
	@version(1.0.0-3.0.0)
	@undocumented
	[37] Unknown37() -> (unknown<0x4>, buffer<unknown, 0xa>);
	@version(4.0.0+)
	@undocumented
	[37] Unknown37() -> handle<copy>;
	@version(1.0.0-3.0.0)
	@undocumented
	[38] Unknown38() -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[38] Unknown38() -> (unknown<0x4>, buffer<unknown, 0xa>);
	@version(1.0.0-3.0.0)
	@undocumented
	[39] Unknown39();
	@version(4.0.0+)
	@undocumented
	[39] Unknown39() -> buffer<unknown, 0x16>;
	@version(3.0.0)
	@undocumented
	[40] Unknown40() -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[40] Unknown40();
	@version(3.0.0)
	@undocumented
	[41] Unknown41(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[41] Unknown41() -> buffer<unknown, 0x16>;
	@version(3.0.0)
	@undocumented
	[42] Unknown42() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[42] Unknown42(unknown<0x1>);
	@version(3.0.0)
	@undocumented
	[43] Unknown43(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[43] Unknown43() -> unknown<0x1>;
	@version(3.0.0)
	@undocumented
	[44] Unknown44() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[44] Unknown44(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[45] Unknown45() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[46] Unknown46();
	@version(4.0.0+)
	@undocumented
	[47] Unknown47();
	@version(4.0.0+)
	@undocumented
	[48] Unknown48();
	@version(4.0.0+)
	@undocumented
	[49] Unknown49(unknown<0x2>);
	@version(4.0.0+)
	@undocumented
	[50] Unknown50(unknown<0x14>);
	@version(4.0.0+)
	@undocumented
	[51] Unknown51(unknown<0x14>);
	@version(4.0.0+)
	@undocumented
	[52] Unknown52(buffer<unknown, 0x19>);
	@version(4.0.0+)
	@undocumented
	[53] Unknown53(unknown<0xa>);
	@version(4.0.0+)
	@undocumented
	[54] Unknown54();
	@version(4.0.0+)
	@undocumented
	[55] Unknown55();
	@version(4.0.0+)
	@undocumented
	[56] Unknown56(buffer<unknown, 0x19>);
	@version(4.0.0+)
	@undocumented
	[57] Unknown57(buffer<unknown, 0x19>);
	@version(4.0.0+)
	@undocumented
	[58] Unknown58(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[59] Unknown59();
	@version(4.0.0+)
	@undocumented
	[60] Unknown60(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[61] Unknown61(unknown<0x14>);
	@version(4.0.0+)
	@undocumented
	[62] Unknown62(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[63] Unknown63();
	@version(4.0.0+)
	@undocumented
	[64] Unknown64(unknown<0x8>);
	@version(4.0.0+)
	@undocumented
	[65] Unknown65(unknown<0x2>);
	@version(4.0.0+)
	@undocumented
	[66] Unknown66(unknown<0x8>);
	@version(4.0.0+)
	@undocumented
	[67] Unknown67(unknown<0x18>);
	@version(4.0.0+)
	@undocumented
	[68] Unknown68(unknown<0x34>);
	@version(4.0.0+)
	@undocumented
	[69] Unknown69(unknown<0x4c>);
	@version(4.0.0+)
	@undocumented
	[70] Unknown70(unknown<0x38>, buffer<unknown, 0x9>);
	@version(4.0.0+)
	@undocumented
	[71] Unknown71(unknown<0x50>, buffer<unknown, 0x9>);
	@version(4.0.0+)
	@undocumented
	[72] Unknown72(unknown<0x34>);
	@version(4.0.0+)
	@undocumented
	[73] Unknown73(unknown<0x34>);
	@version(4.0.0+)
	@undocumented
	[74] Unknown74(unknown<0x4>);
	@version(4.0.0+)
	@undocumented
	[75] Unknown75(unknown<0x14>);
	@version(4.0.0+)
	@undocumented
	[76] Unknown76(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[77] Unknown77(unknown<0x8>);
	@version(4.0.0+)
	@undocumented
	[78] Unknown78(unknown<0x7>);
	@version(4.0.0+)
	@undocumented
	[79] Unknown79(unknown<0x18>);
	@version(4.0.0+)
	@undocumented
	[80] Unknown80(unknown<0x18>);
	@version(4.0.0+)
	@undocumented
	[81] Unknown81(unknown<0x2c>);
	@version(4.0.0+)
	@undocumented
	[82] Unknown82(unknown<0x2c>);
	@version(4.0.0+)
	@undocumented
	[83] Unknown83(unknown<0x2c>, buffer<unknown, 0x9>);
}

interface nn::bpc::IBoardPowerControlManager is bpc {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> unknown<0x4>;
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
	@undocumented
	[4] Unknown4() -> unknown<0x1>;
	@undocumented
	[5] Unknown5(unknown<0x4>) -> handle<copy>;
	@version(2.0.0+)
	@undocumented
	[6] Unknown6() -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[7] Unknown7(unknown<0x4>) -> handle<copy>;
	@version(2.0.0+)
	@undocumented
	[8] Unknown8(unknown<0x8>) -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[9] Unknown9(unknown<0x4>);
	@version(2.0.0)
	@undocumented
	[10] Unknown10() -> unknown<0x10>;
	@version(3.0.0+)
	@undocumented
	[10] Unknown10() -> unknown<0xc>;
	@version(3.0.0+)
	@undocumented
	[11] Unknown11(unknown<0x10>) -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[12] Unknown12() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[13] Unknown13(unknown<0x4>);
}

@version(1.0.0)
interface nn::bpc::IPowerButtonManager {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1(unknown<0x4>) -> handle<copy>;
}

interface nn::bpc::IRtcManager is bpc:r {
	@undocumented
	[0] Unknown0() -> unknown<0x8>;
	@undocumented
	[1] Unknown1(unknown<0x8>);
	@undocumented
	[2] Unknown2() -> unknown<0x1>;
	@version(2.0.0+)
	@undocumented
	[3] Unknown3();
	@version(3.0.0+)
	@undocumented
	[4] Unknown4();
}

@version(1.0.0)
interface nn::bpc::IWakeupConfigManager {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> unknown<0x4>;
	@undocumented
	[1] Unknown1(unknown<0x4>);
	@undocumented
	[2] Unknown2() -> unknown<0x10>;
}

interface nn::bsdsocket::cfg::ServerInterface is bsdcfg {
	@version(1.0.0-2.0.0)
	@undocumented
	[0] Unknown0(unknown<0x28>, buffer<unknown, 0x5>);
	@version(3.0.0+)
	@undocumented
	[0] Unknown0(unknown<0x2c>, buffer<unknown, 0x5>);
	@version(1.0.0-2.0.0)
	@undocumented
	[1] Unknown1(unknown<0x28>, buffer<unknown, 0x5>) -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[1] Unknown1(unknown<0x2c>, buffer<unknown, 0x5>) -> handle<copy>;
	@undocumented
	[2] Unknown2(buffer<unknown, 0x5>);
	@undocumented
	[3] Unknown3(unknown<0x4>, buffer<unknown, 0x5>);
	@undocumented
	[4] Unknown4(buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@undocumented
	[5] Unknown5(buffer<unknown, 0x5>);
	@undocumented
	[6] Unknown6(unknown<0x4>, buffer<unknown, 0x5>);
	@undocumented
	[7] Unknown7(unknown<0x4>);
	@undocumented
	[8] Unknown8(unknown<0x4>) -> buffer<unknown, 0x6>;
	@undocumented
	[9] Unknown9(buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@undocumented
	[10] Unknown10();
	@undocumented
	[11] Unknown11(buffer<unknown, 0x5>);
	@undocumented
	[12] Unknown12();
}

interface nn::btm::IBtm is btm {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1() -> unknown<0x2a>;
	@version(1.0.0-2.0.0)
	@undocumented
	[2] Unknown2() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[2] Unknown2() -> (unknown<0x1>, handle<copy>);
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x1a>;
	@undocumented
	[4] Unknown4(unknown<0x7>);
	@undocumented
	[5] Unknown5(buffer<unknown, 0x19>);
	@undocumented
	[6] Unknown6(unknown<0x4>);
	@undocumented
	[7] Unknown7(unknown<0x4>);
	@version(1.0.0-2.0.0)
	@undocumented
	[8] Unknown8() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[8] Unknown8() -> (unknown<0x1>, handle<copy>);
	@undocumented
	[9] Unknown9() -> buffer<unknown, 0x1a>;
	@undocumented
	[10] Unknown10(unknown<0x60>);
	@undocumented
	[11] Unknown11(unknown<0x6>);
	@undocumented
	[12] Unknown12(unknown<0x6>);
	@undocumented
	[13] Unknown13(unknown<0x6>);
	@undocumented
	[14] Unknown14();
	@undocumented
	[15] Unknown15();
	@undocumented
	[16] Unknown16(unknown<0x6>);
	@undocumented
	[17] Unknown17(unknown<0x6>, buffer<unknown, 0x19>);
	@version(2.0.0)
	@undocumented
	[18] Unknown18() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[18] Unknown18() -> (unknown<0x1>, handle<copy>);
	@version(4.0.0+)
	@undocumented
	[19] Unknown19() -> (unknown<0x1>, handle<copy>);
	@version(4.0.0+)
	@undocumented
	[20] Unknown20() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[21] Unknown21(unknown<0x1>);
}

interface nn::btm::IBtmDebug is btm:dbg {
	@version(1.0.0-2.0.0)
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[0] Unknown0() -> (unknown<0x1>, handle<copy>);
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x1a>;
	@undocumented
	[4] Unknown4(unknown<0x6>);
	@undocumented
	[5] Unknown5(unknown<0x6>);
	@undocumented
	[6] Unknown6(unknown<0xc>);
	@undocumented
	[7] Unknown7(unknown<0x4>);
	@undocumented
	[8] Unknown8(unknown<0x6>);
}

interface nn::btm::IBtmSystem is btm:sys {
	@undocumented
	[0] Unknown0() -> object<nn::btm::IBtmSystemCore>;
}

interface nn::btm::IBtmSystemCore {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3() -> unknown<0x1>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5();
	@undocumented
	[6] Unknown6() -> unknown<0x1>;
	@version(3.0.0+)
	@undocumented
	[7] Unknown7() -> (unknown<0x1>, handle<copy>);
	@version(3.0.0+)
	@undocumented
	[8] Unknown8() -> (unknown<0x1>, handle<copy>);
	@version(3.0.0+)
	@undocumented
	[9] Unknown9() -> unknown<0x1>;
}

interface nn::capsrv::sf::IAlbumAccessorService is caps:a {
	@undocumented
	[0] Unknown0(unknown<0x1>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(unknown<0x1>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[2] Unknown2(unknown<0x18>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[3] Unknown3(unknown<0x18>);
	@undocumented
	[4] Unknown4(unknown<0x20>);
	@undocumented
	[5] Unknown5(unknown<0x1>) -> unknown<0x1>;
	@undocumented
	[6] Unknown6(unknown<0x1>) -> unknown<0x30>;
	@undocumented
	[7] Unknown7(unknown<0x18>) -> unknown<0x8>;
	@undocumented
	[8] Unknown8(unknown<0x18>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[9] Unknown9(unknown<0x18>) -> (unknown<0x10>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[10] Unknown10(unknown<0x18>) -> (unknown<0x10>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[11] Unknown11(unknown<0x28>) -> unknown<0x20>;
	@version(3.0.0+)
	@undocumented
	[12] Unknown12(unknown<0x38>) -> (unknown<0x10>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[13] Unknown13(unknown<0x38>) -> (unknown<0x10>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[14] Unknown14(unknown<0x38>) -> (unknown<0x50>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[15] Unknown15(unknown<0x1>) -> unknown<0x48>;
	@version(4.0.0+)
	@undocumented
	[16] Unknown16(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[17] Unknown17(unknown<0x10>) -> buffer<unknown, 0x16>;

	@version(1.0.0-2.0.0)
	@undocumented
	[202] Unknown202(unknown<0x38>, buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> unknown<0x20>;

	@undocumented
	[301] Unknown301() -> (unknown<0x20>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[302] Unknown302() -> (unknown<0x20>, buffer<unknown, 0x6>);

	@undocumented
	[401] Unknown401() -> unknown<0x1>;

	@undocumented
	[501] Unknown501(unknown<0x2>) -> unknown<0x8>;

	@version(3.0.0+)
	@undocumented
	[1001] Unknown1001(unknown<0x38>) -> (unknown<0x50>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);
	@version(3.0.0)
	@undocumented
	[1002] Unknown1002(unknown<0x38>, buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> unknown<0x20>;
	@version(4.0.0+)
	@undocumented
	[1002] Unknown1002(unknown<0x38>) -> (buffer<unknown, 0x16>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[1003] Unknown1003(unknown<0x38>) -> (buffer<unknown, 0x16>, buffer<unknown, 0x46>, buffer<unknown, 0x6>);

	@undocumented
	[8001] Unknown8001(unknown<0x1>);
	@undocumented
	[8002] Unknown8002(unknown<0x1>);

	@undocumented
	[8011] Unknown8011(unknown<0x1>);
	@undocumented
	[8012] Unknown8012(unknown<0x1>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[8013] Unknown8013(unknown<0x2>) -> unknown<0x10>;

	@version(2.0.0+)
	@undocumented
	[8021] Unknown8021(unknown<0x28>, pid) -> unknown<0x20>;

	@undocumented
	[10011] Unknown10011(unknown<0x1>);

	@version(4.0.0+)
	@undocumented
	[60002] Unknown60002(unknown<0x8>, pid) -> object<nn::capsrv::sf::IAlbumAccessorSession>;
}

@version(4.0.0+)
interface nn::capsrv::sf::IAlbumAccessorSession {
	@undocumented
	[2001] Unknown2001(unknown<0x18>) -> unknown<0x8>;
	@undocumented
	[2002] Unknown2002(unknown<0x8>);
	@undocumented
	[2003] Unknown2003(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[2004] Unknown2004(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[2005] Unknown2005(unknown<0x8>);
	@undocumented
	[2006] Unknown2006(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[2007] Unknown2007(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[2008] Unknown2008(unknown<0x8>) -> unknown<0x40>;
}

@version(2.0.0+)
interface nn::capsrv::sf::IAlbumControlService is caps:c {
	@undocumented
	[2001] Unknown2001(unknown<0x1>);
	@undocumented
	[2002] Unknown2002(unknown<0x1>);

	@undocumented
	[2011] Unknown2011(unknown<0x10>);
	@undocumented
	[2012] Unknown2012(unknown<0x10>);
	@undocumented
	[2013] Unknown2013(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[2014] Unknown2014(unknown<0x8>);

	@undocumented
	[2101] Unknown2101(unknown<0x10>) -> unknown<0x18>;
	@undocumented
	[2102] Unknown2102(unknown<0x28>) -> unknown<0x20>;

	@version(2.0.0-3.0.0)
	@undocumented
	[2201] Unknown2201(unknown<0x18>, buffer<unknown, 0x45>);
	@version(4.0.0+)
	@undocumented
	[2202] Unknown2202(unknown<0x30>, buffer<unknown, 0x45>);

	@undocumented
	[2301] Unknown2301(unknown<0x18>, buffer<unknown, 0x45>);
	@version(4.0.0+)
	@undocumented
	[2302] Unknown2302(unknown<0x18>, buffer<unknown, 0x45>);

	@version(4.0.0+)
	@undocumented
	[60001] Unknown60001(unknown<0x8>, pid) -> object<nn::capsrv::sf::IAlbumControlSession>;
}

@version(4.0.0+)
interface nn::capsrv::sf::IAlbumControlSession {
	@undocumented
	[2001] Unknown2001(unknown<0x18>) -> unknown<0x8>;
	@undocumented
	[2002] Unknown2002(unknown<0x8>);
	@undocumented
	[2003] Unknown2003(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[2004] Unknown2004(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[2005] Unknown2005(unknown<0x8>);
	@undocumented
	[2006] Unknown2006(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[2007] Unknown2007(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[2008] Unknown2008(unknown<0x8>) -> unknown<0x40>;

	@undocumented
	[2401] Unknown2401(unknown<0x18>) -> unknown<0x8>;
	@undocumented
	[2402] Unknown2402(unknown<0x8>);
	@undocumented
	[2403] Unknown2403(unknown<0x8>);
	@undocumented
	[2404] Unknown2404(unknown<0x8>);
	@undocumented
	[2405] Unknown2405(unknown<0x8>);

	@undocumented
	[2411] Unknown2411(unknown<0x8>);
	@undocumented
	[2412] Unknown2412(unknown<0x8>);
	@undocumented
	[2413] Unknown2413(unknown<0x8>);
	@undocumented
	[2414] Unknown2414(unknown<0x8>);

	@undocumented
	[2421] Unknown2421(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[2422] Unknown2422(unknown<0x10>, buffer<unknown, 0x5>);

	@undocumented
	[2424] Unknown2424(unknown<0x20>, buffer<unknown, 0x5>);

	@undocumented
	[2431] Unknown2431(unknown<0x8>);

	@undocumented
	[2433] Unknown2433(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[2434] Unknown2434(unknown<0x10>);
}

@version(1.0.0)
interface nn::capsrv::sf::ICaptureControllerService {
	@undocumented
	[1] Unknown1(unknown<0x20>) -> buffer<unknown, 0x46>;
	@undocumented
	[2] Unknown2(unknown<0x28>) -> buffer<unknown, 0x46>;

	@undocumented
	[1001] Unknown1001(unknown<0x10>);
	@undocumented
	[1002] Unknown1002(unknown<0x18>);

	@undocumented
	[1011] Unknown1011(unknown<0x8>);

	@undocumented
	[2001] Unknown2001(unknown<0x1>);
	@undocumented
	[2002] Unknown2002(unknown<0x1>);
}

@version(3.0.0+)
interface nn::capsrv::sf::IScreenShotApplicationService is caps:su {
	[201] SaveScreenShot(u32, u32, nn::applet::AppletResourceUserId, pid, buffer<bytes, 0x45>) -> nn::capsrv::ApplicationAlbumEntry;

	[203] SaveScreenShotEx0(nn::capsrv::detail::ScreenShotAttributeEx0, u32, nn::applet::AppletResourceUserId, pid, buffer<bytes, 0x45>) -> nn::capsrv::ApplicationAlbumEntry;
}

@version(2.0.0+)
interface nn::capsrv::sf::IScreenShotControlService is caps:sc {
	@undocumented
	[1] Unknown1(unknown<0x28>) -> buffer<unknown, 0x46>;
	@undocumented
	[2] Unknown2(unknown<0x30>) -> buffer<unknown, 0x46>;

	@undocumented
	[1001] Unknown1001(unknown<0x10>);
	@undocumented
	[1002] Unknown1002(unknown<0x18>);
	@version(3.0.0+)
	@undocumented
	[1003] Unknown1003(unknown<0x58>);

	@undocumented
	[1011] Unknown1011(unknown<0x8>);
	@undocumented
	[1012] Unknown1012(unknown<0x8>);

	@version(4.0.0+)
	@undocumented
	[1101] Unknown1101(unknown<0x28>) -> (buffer<unknown, 0x46>, buffer<unknown, 0x46>);

	@version(4.0.0+)
	@undocumented
	[1106] Unknown1106(unknown<0x30>, buffer<unknown, 0x15>, buffer<unknown, 0x15>) -> (unknown<0x18>, buffer<unknown, 0x6>, buffer<unknown, 0x46>, buffer<unknown, 0x46>);
	@version(4.0.0+)
	@undocumented
	[1107] Unknown1107(unknown<0x30>, buffer<unknown, 0x15>, buffer<unknown, 0x15>, buffer<unknown, 0x45>) -> (unknown<0x18>, buffer<unknown, 0x6>);

	@version(3.0.0+)
	@undocumented
	[1201] Unknown1201(unknown<0x10>) -> unknown<0x18>;
	@version(3.0.0+)
	@undocumented
	[1202] Unknown1202();
	@version(3.0.0+)
	@undocumented
	[1203] Unknown1203(unknown<0x8>) -> (unknown<0x8>, buffer<unknown, 0x6>);
}

@version(2.0.0+)
interface nn::capsrv::sf::IScreenShotService is caps:ss {
	@undocumented
	[201] Unknown201(unknown<0x10>, pid, buffer<unknown, 0x45>) -> unknown<0x20>;
	@undocumented
	[202] Unknown202(unknown<0x38>, buffer<unknown, 0x45>, buffer<unknown, 0x45>) -> unknown<0x20>;
	@version(3.0.0+)
	@undocumented
	[203] Unknown203(unknown<0x50>, pid, buffer<unknown, 0x45>) -> unknown<0x20>;
	@version(3.0.0+)
	@undocumented
	[204] Unknown204(unknown<0x78>, buffer<unknown, 0x45>, buffer<unknown, 0x45>) -> unknown<0x20>;

	@version(4.0.0+)
	@undocumented
	[206] Unknown206(unknown<0x78>, buffer<unknown, 0x15>, buffer<unknown, 0x45>, buffer<unknown, 0x45>) -> unknown<0x20>;
}

interface nn::cec::ICecManager is cec-mgr {
	@undocumented
	[0] Unknown0() -> (unknown<0x8>, handle<copy>);
	@undocumented
	[1] Unknown1(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[2] Unknown2(unknown<0x4>);
	@undocumented
	[3] Unknown3(unknown<0x18>) -> unknown<0x4>;
	@undocumented
	[4] Unknown4(unknown<0x4>) -> unknown<0x18>;
	@undocumented
	[5] Unknown5() -> unknown<0x20>;
	@version(2.0.0+)
	@undocumented
	[6] Unknown6() -> unknown<0x8>;

	@version(4.0.0+)
	@undocumented
	[100] Unknown100() -> object<CecManagerSubinterface100>;
}

interface nn::codec::detail::IHardwareOpusDecoder {
	[0] Unknown0(buffer<unknown, 0x5>) -> (u32, u32, buffer<unknown, 0x6>);
	[1] Unknown1(buffer<unknown, 0x5>);
	@version(3.0.0+)
	[2] Unknown2(buffer<unknown, 0x5>) -> (u32, u32, buffer<unknown, 0x6>);
	@version(3.0.0+)
	[3] Unknown3(buffer<unknown, 0x5>);
	@version(4.0.0+)
	[4] Unknown4(buffer<unknown, 0x5>) -> (u32, u32, u64, buffer<unknown, 0x46>);
	@version(4.0.0+)
	[5] Unknown5(buffer<unknown, 0x5>) -> (u32, u32, u64, buffer<unknown, 0x46>);
}

interface nn::codec::detail::IHardwareOpusDecoderManager is hwopus {
	[0] Unknown0(bytes<0x8, 4>, u32, handle<copy>) -> object<nn::codec::detail::IHardwareOpusDecoder>;
	[1] Unknown1(bytes<0x8, 4>) -> u32;
	@version(3.0.0+)
	[2] Unknown2(u32, handle<copy>, buffer<unknown<0x110>, 0x19>) -> object<nn::codec::detail::IHardwareOpusDecoder>;
	@version(3.0.0+)
	[3] Unknown3(buffer<unknown<0x110>, 0x19>) -> u32;
}

interface nn::erpt::sf::IContext is erpt:c {
	@undocumented
	[0] Unknown0(buffer<unknown, 0x5>, buffer<unknown, 0x5>);
	@undocumented
	[1] Unknown1(unknown<0x4>, buffer<unknown, 0x5>, buffer<unknown, 0x5>, buffer<unknown, 0x5>);
	@version(3.0.0+)
	@undocumented
	[2] Unknown2(unknown<0x18>);
	@version(3.0.0+)
	@undocumented
	[3] Unknown3();
	@version(3.0.0+)
	@undocumented
	[4] Unknown4();
	@version(3.0.0+)
	@undocumented
	[5] Unknown5();
}

interface nn::erpt::sf::IManager {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> buffer<unknown, 0x6>;
	@undocumented
	[1] Unknown1() -> handle<copy>;
	@version(4.0.0+)
	@undocumented
	[2] Unknown2();
}

interface nn::erpt::sf::IReport {
	@undocumented
	[0] Unknown0(unknown<0x14>);
	@undocumented
	[1] Unknown1() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[2] Unknown2(unknown<0x4>);
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5() -> unknown<0x8>;
}

interface nn::erpt::sf::ISession is erpt:r {
	@undocumented
	[0] Unknown0() -> object<nn::erpt::sf::IReport>;
	@undocumented
	[1] Unknown1() -> object<nn::erpt::sf::IManager>;
}

interface nn::es::IETicketService is es {
	@undocumented
	[1] Unknown1(buffer<unknown, 0x5>, buffer<unknown, 0x5>);
	@undocumented
	[2] Unknown2(buffer<unknown, 0x5>);
	@version(1.0.0)
	@undocumented
	[3] Unknown3(buffer<unknown, 0x9>);
	@version(2.0.0+)
	@undocumented
	[3] Unknown3(buffer<unknown, 0x5>);
	@undocumented
	[4] Unknown4(unknown<0x4>);
	@undocumented
	[5] Unknown5();
	@undocumented
	[6] Unknown6();
	@version(1.0.0)
	@undocumented
	[7] Unknown7(buffer<unknown, 0x9>);
	@version(2.0.0+)
	@undocumented
	[7] Unknown7(buffer<unknown, 0x5>);
	@version(1.0.0-2.0.0)
	@undocumented
	[8] Unknown8(unknown<0x10>) -> buffer<unknown, 0x16>;
	@version(3.0.0+)
	@undocumented
	[8] Unknown8(unknown<0x14>) -> buffer<unknown, 0x16>;
	@undocumented
	[9] Unknown9() -> unknown<0x4>;
	@undocumented
	[10] Unknown10() -> unknown<0x4>;
	@version(1.0.0)
	@undocumented
	[11] Unknown11() -> (unknown<0x4>, buffer<unknown, 0xa>);
	@version(2.0.0+)
	@undocumented
	[11] Unknown11() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[12] Unknown12() -> (unknown<0x4>, buffer<unknown, 0xa>);
	@version(2.0.0+)
	@undocumented
	[12] Unknown12() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[13] Unknown13(buffer<unknown, 0x5>) -> (unknown<0x4>, buffer<unknown, 0xa>);
	@version(2.0.0+)
	@undocumented
	[13] Unknown13(buffer<unknown, 0x5>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[14] Unknown14(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[15] Unknown15(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[16] Unknown16(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[17] Unknown17(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[18] Unknown18(buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@version(2.0.0+)
	@undocumented
	[18] Unknown18(buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@version(1.0.0)
	@undocumented
	[19] Unknown19(buffer<unknown, 0x9>) -> (unknown<0x4>, buffer<unknown, 0xa>);
	@version(2.0.0+)
	@undocumented
	[19] Unknown19(buffer<unknown, 0x5>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[20] Unknown20(buffer<unknown, 0x5>) -> (buffer<unknown, 0x16>, buffer<unknown, 0x16>);
	@version(2.0.0+)
	@undocumented
	[20] Unknown20(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[21] Unknown21(buffer<unknown, 0x5>) -> (buffer<unknown, 0x16>, buffer<unknown, 0x16>);
	@version(4.0.0+)
	@undocumented
	[22] Unknown22(unknown<0x10>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[23] Unknown23(unknown<0x10>) -> (unknown<0x10>, buffer<unknown, 0x6>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[24] Unknown24(buffer<unknown, 0x15>);
	@version(4.0.0+)
	@undocumented
	[25] Unknown25(buffer<unknown, 0x15>);
	@version(4.0.0+)
	@undocumented
	[26] Unknown26();
	@version(4.0.0+)
	@undocumented
	[27] Unknown27() -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[28] Unknown28() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[29] Unknown29(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
}

interface nn::eth::sf::IEthInterface is ethc:c {
	@undocumented
	[0] Unknown0(buffer<unknown, 0x5>) -> handle<copy>;
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x6>;
	@undocumented
	[4] Unknown4(unknown<0x4>);
	@undocumented
	[5] Unknown5() -> unknown<0xc>;
}

interface nn::eth::sf::IEthInterfaceGroup is ethc:i {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x6>;
	@undocumented
	[4] Unknown4() -> unknown<0x4>;
}

interface nn::eupld::sf::IControl is eupld:c {
	@undocumented
	[0] Unknown0(buffer<unknown, 0x5>);
	@undocumented
	[1] Unknown1(buffer<unknown, 0x5>);
	@undocumented
	[2] Unknown2(buffer<unknown, 0x5>, buffer<unknown, 0x5>);
	@undocumented
	[3] Unknown3(unknown<0x8>);
}

interface nn::eupld::sf::IRequest is eupld:r {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2(buffer<unknown, 0x5>);
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x6>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5();
}

interface nn::fan::detail::IController {
	@undocumented
	[0] Unknown0(unknown<0x4>);
	@undocumented
	[1] Unknown1(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[2] Unknown2() -> unknown<0x4>;
	@undocumented
	[3] Unknown3(unknown<0x4>);
	@undocumented
	[4] Unknown4() -> unknown<0x4>;
	@undocumented
	[5] Unknown5();
	@undocumented
	[6] Unknown6();
	@undocumented
	[7] Unknown7() -> unknown<0x4>;
}

interface nn::fan::detail::IManager is fan {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> object<nn::fan::detail::IController>;
}

interface nn::fatalsrv::IPrivateService is fatal:p {
	@undocumented
	[0] Unknown0() -> handle<copy>;
}

interface nn::fatalsrv::IService is fatal:u {
	@undocumented
	[0] Unknown0(unknown<0x10>, pid);
	@undocumented
	[1] Unknown1(unknown<0x10>, pid);
	@undocumented
	[2] Unknown2(unknown<0x10>, pid, buffer<unknown, 0x15>);
}

interface nn::fgm::sf::IDebugger is fgm:dbg {
	[0] Initialize(u64, handle<copy>) -> handle<copy>;
	[1] Read() -> (u32, u32, u32, buffer<bytes, 0x6>);
	[2] Cancel();
}

interface nn::fgm::sf::IRequest {
	[0] Initialize(nn::fgm::Module, u64, pid) -> handle<copy>;
	[1] Set(u32, u32);
	[2] Get() -> u32;
	[3] Cancel();
}

interface nn::fgm::sf::ISession is fgm, fgm:0, fgm:9 {
	[0] Initialize() -> object<nn::fgm::sf::IRequest>;
}

@version(4.0.0+)
interface nn::friends::detail::ipc::IDaemonSuspendSessionService {
}

interface nn::friends::detail::ipc::IFriendService {
	[0] GetCompletionEvent() -> handle<copy>;
	[1] Cancel();

	[10100] GetFriendListIds(u32, nn::account::Uid, nn::friends::detail::ipc::SizedFriendFilter, u64, pid) -> (u32, buffer<nn::account::NetworkServiceAccountId[], 0xa>);
	[10101] GetFriendList(u32, nn::account::Uid, nn::friends::detail::ipc::SizedFriendFilter, u64, pid) -> (u32, buffer<nn::friends::detail::FriendImpl[], 0x6>);
	[10102] UpdateFriendInfo(nn::account::Uid, u64, pid, buffer<nn::account::NetworkServiceAccountId[], 0x9>) -> buffer<nn::friends::detail::FriendImpl[], 0x6>;

	[10110] GetFriendProfileImage(nn::account::Uid, nn::account::NetworkServiceAccountId) -> (u32, buffer<bytes, 0x6>);

	@version(2.0.0+)
	[10200] SendFriendRequestForApplication(nn::account::Uid, nn::account::NetworkServiceAccountId, u64, pid, buffer<nn::friends::InAppScreenName, 0x19>, buffer<nn::friends::InAppScreenName, 0x19>);

	@version(2.0.0+)
	[10211] AddFacedFriendRequestForApplication(nn::friends::FacedFriendRequestRegistrationKey, nn::account::Nickname, nn::account::Uid, u64, pid, buffer<nn::friends::InAppScreenName, 0x19>, buffer<nn::friends::InAppScreenName, 0x19>, buffer<bytes, 0x5>);

	[10400] GetBlockedUserListIds(u32, nn::account::Uid) -> (u32, buffer<nn::account::NetworkServiceAccountId[], 0xa>);

	[10500] GetProfileList(nn::account::Uid, buffer<nn::account::NetworkServiceAccountId[], 0x9>) -> buffer<nn::friends::detail::ProfileImpl[], 0x6>;

	[10600] DeclareOpenOnlinePlaySession(nn::account::Uid);
	[10601] DeclareCloseOnlinePlaySession(nn::account::Uid);

	[10610] UpdateUserPresence(nn::account::Uid, u64, pid, buffer<nn::friends::detail::UserPresenceImpl, 0x19>);

	[10700] GetPlayHistoryRegistrationKey(b8, nn::account::Uid) -> buffer<nn::friends::PlayHistoryRegistrationKey, 0x1a>;
	[10701] GetPlayHistoryRegistrationKeyWithNetworkServiceAccountId(b8, nn::account::NetworkServiceAccountId) -> buffer<nn::friends::PlayHistoryRegistrationKey, 0x1a>;
	[10702] AddPlayHistory(nn::account::Uid, u64, pid, buffer<nn::friends::PlayHistoryRegistrationKey, 0x19>, buffer<nn::friends::InAppScreenName, 0x19>, buffer<nn::friends::InAppScreenName, 0x19>);

	[11000] GetProfileImageUrl(nn::friends::Url, u32) -> nn::friends::Url;

	[20100] GetFriendCount(nn::account::Uid, nn::friends::detail::ipc::SizedFriendFilter, u64, pid) -> u32;
	[20101] GetNewlyFriendCount(nn::account::Uid) -> u32;
	[20102] GetFriendDetailedInfo(nn::account::Uid, nn::account::NetworkServiceAccountId) -> buffer<nn::friends::detail::FriendDetailedInfoImpl, 0x1a>;
	[20103] SyncFriendList(nn::account::Uid);
	@version(2.0.0+)
	[20104] RequestSyncFriendList(nn::account::Uid);

	[20110] LoadFriendSetting(nn::account::Uid, nn::account::NetworkServiceAccountId) -> buffer<nn::friends::detail::FriendSettingImpl, 0x1a>;

	[20200] GetReceivedFriendRequestCount(nn::account::Uid) -> (u32, u32);
	[20201] GetFriendRequestList(u32, u32, nn::account::Uid) -> (u32, buffer<nn::friends::detail::FriendRequestImpl[], 0x6>);

	[20300] GetFriendCandidateList(u32, nn::account::Uid) -> (u32, buffer<nn::friends::detail::FriendCandidateImpl[], 0x6>);
	@version(3.0.0+)
	[20301] GetNintendoNetworkIdInfo(u32, nn::account::Uid) -> (u32, buffer<nn::friends::NintendoNetworkIdUserInfo, 0x1a>, buffer<nn::friends::detail::NintendoNetworkIdFriendImpl[], 0x6>);

	[20400] GetBlockedUserList(u32, nn::account::Uid) -> (u32, buffer<nn::friends::detail::BlockedUserImpl[], 0x6>);
	[20401] SyncBlockedUserList(nn::account::Uid);

	[20500] GetProfileExtraList(nn::account::Uid, buffer<nn::account::NetworkServiceAccountId[], 0x9>) -> buffer<nn::friends::detail::ProfileExtraImpl[], 0x6>;
	[20501] GetRelationship(nn::account::Uid, nn::account::NetworkServiceAccountId) -> nn::friends::Relationship;

	[20600] GetUserPresenceView(nn::account::Uid) -> buffer<nn::friends::detail::UserPresenceViewImpl, 0x1a>;

	[20700] GetPlayHistoryList(u32, nn::account::Uid) -> (u32, buffer<nn::friends::detail::PlayHistoryImpl[], 0x6>);
	[20701] GetPlayHistoryStatistics(nn::account::Uid) -> nn::friends::PlayHistoryStatistics;

	[20800] LoadUserSetting(nn::account::Uid) -> buffer<nn::friends::detail::UserSettingImpl, 0x1a>;
	[20801] SyncUserSetting(nn::account::Uid);

	[20900] RequestListSummaryOverlayNotification();

	@version(2.0.0+)
	[21000] GetExternalApplicationCatalog(nn::settings::LanguageCode, nn::friends::ExternalApplicationCatalogId) -> buffer<nn::friends::ExternalApplicationCatalog, 0x1a>;

	[30100] DropFriendNewlyFlags(nn::account::Uid);
	[30101] DeleteFriend(nn::account::Uid, nn::account::NetworkServiceAccountId);

	[30110] DropFriendNewlyFlag(nn::account::Uid, nn::account::NetworkServiceAccountId);

	[30120] ChangeFriendFavoriteFlag(b8, nn::account::Uid, nn::account::NetworkServiceAccountId);
	[30121] ChangeFriendOnlineNotificationFlag(b8, nn::account::Uid, nn::account::NetworkServiceAccountId);

	[30200] SendFriendRequest(u32, nn::account::Uid, nn::account::NetworkServiceAccountId);
	[30201] SendFriendRequestWithApplicationInfo(u32, nn::account::Uid, nn::account::NetworkServiceAccountId, nn::friends::ApplicationInfo, buffer<nn::friends::InAppScreenName, 0x19>, buffer<nn::friends::InAppScreenName, 0x19>);
	[30202] CancelFriendRequest(nn::account::Uid, nn::friends::RequestId);
	[30203] AcceptFriendRequest(nn::account::Uid, nn::friends::RequestId);
	[30204] RejectFriendRequest(nn::account::Uid, nn::friends::RequestId);
	[30205] ReadFriendRequest(nn::account::Uid, nn::friends::RequestId);

	[30210] GetFacedFriendRequestRegistrationKey(nn::account::Uid) -> nn::friends::FacedFriendRequestRegistrationKey;
	[30211] AddFacedFriendRequest(nn::friends::FacedFriendRequestRegistrationKey, nn::account::Nickname, nn::account::Uid, buffer<bytes, 0x5>);
	[30212] CancelFacedFriendRequest(nn::account::Uid, nn::account::NetworkServiceAccountId);
	[30213] GetFacedFriendRequestProfileImage(nn::account::Uid, nn::account::NetworkServiceAccountId) -> (u32, buffer<bytes, 0x6>);
	[30214] GetFacedFriendRequestProfileImageFromPath(buffer<u8[], 0x9>) -> (u32, buffer<bytes, 0x6>);
	@version(2.0.0+)
	[30215] SendFriendRequestWithExternalApplicationCatalogId(u32, nn::account::Uid, nn::account::NetworkServiceAccountId, nn::friends::ExternalApplicationCatalogId, buffer<nn::friends::InAppScreenName, 0x19>, buffer<nn::friends::InAppScreenName, 0x19>);
	@version(2.0.0+)
	[30216] ResendFacedFriendRequest(nn::account::Uid, nn::account::NetworkServiceAccountId);
	@version(3.0.0+)
	[30217] SendFriendRequestWithNintendoNetworkIdInfo(nn::friends::MiiName, nn::friends::MiiImageUrlParam, nn::friends::MiiName, nn::friends::MiiImageUrlParam, u32, nn::account::Uid, nn::account::NetworkServiceAccountId);

	[30400] BlockUser(u32, nn::account::Uid, nn::account::NetworkServiceAccountId);
	[30401] BlockUserWithApplicationInfo(u32, nn::account::Uid, nn::account::NetworkServiceAccountId, nn::friends::ApplicationInfo, buffer<nn::friends::InAppScreenName, 0x19>);
	[30402] UnblockUser(nn::account::Uid, nn::account::NetworkServiceAccountId);

	[30500] GetProfileExtraFromFriendCode(nn::friends::FriendCode, nn::account::Uid) -> buffer<nn::friends::detail::ProfileExtraImpl, 0x1a>;

	[30700] DeletePlayHistory(nn::account::Uid);

	[30810] ChangePresencePermission(u32, nn::account::Uid);
	[30811] ChangeFriendRequestReception(b8, nn::account::Uid);
	[30812] ChangePlayLogPermission(u32, nn::account::Uid);

	[30820] IssueFriendCode(nn::account::Uid);

	[30830] ClearPlayLog(nn::account::Uid);

	[49900] DeleteNetworkServiceAccountCache(nn::account::Uid);
}

@version(1.0.0)
interface nn::friends::detail::ipc::IFriendServiceCreator {
	[0] Create() -> object<nn::friends::detail::ipc::IFriendService>;
}

@version(2.0.0+)
interface nn::friends::detail::ipc::INotificationService {
	[0] GetEvent() -> handle<copy>;
	[1] Clear();
	[2] Pop() -> nn::friends::detail::ipc::SizedNotificationInfo;
}

@version(2.0.0+)
interface nn::friends::detail::ipc::IServiceCreator is friend:u, friend:v, friend:m, friend:s, friend:a {
	[0] CreateFriendService() -> object<nn::friends::detail::ipc::IFriendService>;
	[1] CreateNotificationService(nn::account::Uid) -> object<nn::friends::detail::ipc::INotificationService>;
	@version(4.0.0+)
	[2] CreateDaemonSuspendSessionService() -> object<nn::friends::detail::ipc::IDaemonSuspendSessionService>;
}

interface nn::fssrv::sf::IDeviceOperator {
	[0] Unknown0() -> u8;
	[1] Unknown1() -> u64;
	@version(2.0.0+)
	[2] Unknown2(u64) -> buffer<unknown, 0x6>;
	@version(2.0.0+)
	[3] Unknown3() -> u64;
	@version(2.0.0+)
	[4] Unknown4() -> u64;
	@version(2.0.0+)
	[5] Unknown5(u64) -> (bytes<0x10, 4>, u64, buffer<unknown, 0x6>);

	[100] Unknown100(u64) -> buffer<unknown, 0x6>;
	[101] Unknown101() -> u64;

	[110] Unknown110(u32);
	[111] Unknown111(u32) -> u64;
	@version(2.0.0+)
	[112] Unknown112() -> u32;
	@version(2.0.0+)
	[113] Unknown113(u64) -> (bytes<0x10, 4>, u64, buffer<unknown, 0x6>);
	@version(2.0.0+)
	[114] Unknown114(u64) -> buffer<unknown, 0x6>;
	@version(4.0.0+)
	[115] Unknown115();
	@version(4.0.0+)
	[116] Unknown116();

	[200] Unknown200() -> u8;
	[201] Unknown201(u32, u64);
	[202] Unknown202() -> u32;
	[203] Unknown203(u32) -> (u32, u64);
	[204] Unknown204();
	[205] Unknown205(u32) -> u8;
	[206] Unknown206(u32, u64) -> buffer<unknown, 0x6>;
	[207] Unknown207(u64, u64, buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	[208] Unknown208(u64) -> buffer<unknown, 0x6>;
	[209] Unknown209(u64, u64) -> buffer<unknown, 0x6>;
	[210] Unknown210(u8);
	[211] Unknown211(u32, u64) -> buffer<unknown, 0x6>;
	@version(2.0.0+)
	[212] Unknown212(u64, u64, buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@version(2.0.0+)
	[213] Unknown213(u64, buffer<unknown, 0x5>);
	@version(2.0.0+)
	[214] Unknown214(u64) -> buffer<unknown, 0x6>;
	@version(2.0.0+)
	[215] Unknown215();
	@version(2.0.0+)
	[216] Unknown216() -> bytes<0x10, 2>;
	@version(3.0.0+)
	[217] Unknown217() -> bytes<0x40, 4>;
	@version(3.0.0+)
	[218] Unknown218(u64) -> buffer<unknown, 0x6>;

	[300] Unknown300(u32);
	[301] Unknown301() -> u32;
}

interface nn::fssrv::sf::IDirectory {
	[0] Unknown0() -> (u64, buffer<unknown, 0x6>);
	[1] Unknown1() -> u64;
}

interface nn::fssrv::sf::IEventNotifier {
	[0] Unknown0() -> handle<copy>;
}

interface nn::fssrv::sf::IFile {
	[0] Unknown0(u32, u64, u64) -> (u64, buffer<unknown, 0x46>);
	[1] Unknown1(u32, u64, u64, buffer<unknown, 0x45>);
	[2] Unknown2();
	[3] Unknown3(u64);
	[4] Unknown4() -> u64;
	@version(4.0.0+)
	[5] Unknown5(u32, u64, u64) -> bytes<0x40, 4>;
}

interface nn::fssrv::sf::IFileSystem {
	[0] Unknown0(u32, u64, buffer<unknown<0x301>, 0x19>);
	[1] Unknown1(buffer<unknown<0x301>, 0x19>);
	[2] Unknown2(buffer<unknown<0x301>, 0x19>);
	[3] Unknown3(buffer<unknown<0x301>, 0x19>);
	[4] Unknown4(buffer<unknown<0x301>, 0x19>);
	[5] Unknown5(buffer<unknown<0x301>, 0x19>, buffer<unknown<0x301>, 0x19>);
	[6] Unknown6(buffer<unknown<0x301>, 0x19>, buffer<unknown<0x301>, 0x19>);
	[7] Unknown7(buffer<unknown<0x301>, 0x19>) -> u32;
	[8] Unknown8(u32, buffer<unknown<0x301>, 0x19>) -> object<nn::fssrv::sf::IFile>;
	[9] Unknown9(u32, buffer<unknown<0x301>, 0x19>) -> object<nn::fssrv::sf::IDirectory>;
	[10] Unknown10();
	[11] Unknown11(buffer<unknown<0x301>, 0x19>) -> u64;
	[12] Unknown12(buffer<unknown<0x301>, 0x19>) -> u64;
	@version(3.0.0+)
	[13] Unknown13(buffer<unknown<0x301>, 0x19>);
	@version(3.0.0+)
	[14] Unknown14(buffer<unknown<0x301>, 0x19>) -> bytes<0x20, 8>;
	@version(4.0.0+)
	[15] Unknown15(u32, buffer<unknown<0x301>, 0x19>, buffer<unknown, 0x45>) -> buffer<unknown, 0x46>;
}

interface nn::fssrv::sf::IFileSystemProxy is fsp-srv {
	@version(1.0.0)
	[0] Unknown0(unknown<0x4>, buffer<unknown, 0x19>) -> object<nn::fssrv::sf::IFileSystem>;
	[1] Unknown1(u64, pid);
	[2] Unknown2() -> object<nn::fssrv::sf::IFileSystem>;

	@version(2.0.0+)
	[7] Unknown7(u32, u64) -> object<nn::fssrv::sf::IFileSystem>;
	@version(2.0.0+)
	[8] Unknown8(u32, u64, buffer<unknown<0x301>, 0x19>) -> object<nn::fssrv::sf::IFileSystem>;
	@version(3.0.0+)
	[9] Unknown9(u64) -> object<nn::fssrv::sf::IFileSystem>;

	[11] Unknown11(u32, buffer<unknown<0x301>, 0x19>) -> object<nn::fssrv::sf::IFileSystem>;
	[12] Unknown12(u32) -> object<nn::fssrv::sf::IStorage>;
	[13] Unknown13();

	[17] Unknown17(buffer<unknown<0x301>, 0x19>) -> object<nn::fssrv::sf::IFileSystem>;
	[18] Unknown18() -> object<nn::fssrv::sf::IFileSystem>;
	@version(2.0.0+)
	[19] Unknown19();

	[21] Unknown21(u64);
	[22] Unknown22(bytes<0x40, 8>, bytes<0x40, 8>, bytes<0x10, 4>);
	[23] Unknown23(bytes<0x40, 8>, bytes<0x40, 8>);
	[24] Unknown24(buffer<unknown, 0x5>);
	@version(2.0.0+)
	[25] Unknown25(u8, u64);
	@version(2.0.0+)
	[26] Unknown26();
	@version(2.0.0+)
	[27] Unknown27() -> u8;
	@version(4.0.0+)
	[28] Unknown28(u8, bytes<0x40, 8>);

	[30] Unknown30(u32, u32) -> object<nn::fssrv::sf::IStorage>;
	[31] Unknown31(u32, u32) -> object<nn::fssrv::sf::IFileSystem>;
	@version(3.0.0+)
	[32] Unknown32(u8, u64, u64, u64);

	[51] Unknown51(u8, bytes<0x40, 8>) -> object<nn::fssrv::sf::IFileSystem>;
	[52] Unknown52(u8, bytes<0x40, 8>) -> object<nn::fssrv::sf::IFileSystem>;
	@version(2.0.0+)
	[53] Unknown53(u8, bytes<0x40, 8>) -> object<nn::fssrv::sf::IFileSystem>;

	@version(3.0.0+)
	[57] Unknown57(u8, u64) -> buffer<unknown, 0x6>;
	[58] Unknown58(u64) -> buffer<unknown, 0x6>;
	@version(2.0.0+)
	[59] Unknown59(u8, u64, buffer<unknown, 0x5>);
	[60] Unknown60() -> object<nn::fssrv::sf::ISaveDataInfoReader>;
	[61] Unknown61(u8) -> object<nn::fssrv::sf::ISaveDataInfoReader>;

	[80] Unknown80(u8, u32, bytes<0x40, 8>) -> object<nn::fssrv::sf::IFile>;
	@version(4.0.0+)
	[81] Unknown81() -> object<nn::fssrv::sf::ISaveDataTransferManager>;

	[100] Unknown100(u32) -> object<nn::fssrv::sf::IFileSystem>;

	[110] Unknown110(u32) -> object<nn::fssrv::sf::IFileSystem>;

	[200] Unknown200() -> object<nn::fssrv::sf::IStorage>;
	@version(3.0.0+)
	[201] Unknown201(u64) -> object<nn::fssrv::sf::IStorage>;
	[202] Unknown202(u8, u64) -> object<nn::fssrv::sf::IStorage>;
	[203] Unknown203() -> object<nn::fssrv::sf::IStorage>;

	[400] Unknown400() -> object<nn::fssrv::sf::IDeviceOperator>;

	[500] Unknown500() -> object<nn::fssrv::sf::IEventNotifier>;
	[501] Unknown501() -> object<nn::fssrv::sf::IEventNotifier>;

	@version(1.0.0-3.0.0)
	[600] Unknown600(u64);
	[601] Unknown601(u64, u64) -> u64;
	[602] Unknown602(u64) -> buffer<unknown, 0x6>;
	[603] Unknown603(u64);
	[604] Unknown604(u64);
	[605] Unknown605();
	@version(2.0.0)
	[606] Unknown606(u8, u64) -> bytes<0x10, 1>;
	@version(3.0.0+)
	[606] Unknown606(u8, u64) -> bytes<0x10, 8>;
	@version(2.0.0)
	[607] Unknown607(bytes<0x10, 1>, bytes<0x10, 1>);
	@version(3.0.0+)
	[607] Unknown607(bytes<0x10, 8>, bytes<0x10, 1>);
	@version(2.0.0+)
	[608] Unknown608();
	@version(2.0.0)
	[609] Unknown609(buffer<unknown<0x301>, 0x19>) -> bytes<0x10, 1>;
	@version(3.0.0+)
	[609] Unknown609(buffer<unknown<0x301>, 0x19>) -> bytes<0x10, 8>;
	@version(3.0.0+)
	[610] Unknown610(buffer<unknown<0x301>, 0x19>) -> (u8, bytes<0x10, 8>);
	@version(4.0.0+)
	[611] Unknown611(u32, u64);
	@version(4.0.0+)
	[612] Unknown612(u8) -> u64;
	@version(4.0.0+)
	[613] Unknown613(u8, u64) -> buffer<unknown, 0x6>;
	@version(4.0.0+)
	[614] Unknown614(u8, u64);

	@version(2.0.0+)
	[620] Unknown620(bytes<0x10, 1>);

	@version(4.0.0+)
	[630] Unknown630(u8);
	@version(4.0.0+)
	[631] Unknown631() -> u8;

	@version(4.0.0+)
	[640] Unknown640() -> u8;

	@version(2.0.0+)
	[800] Unknown800() -> bytes<0x80, 4>;

	[1000] Unknown1000(u32, buffer<unknown<0x301>, 0x19>);
	[1001] Unknown1001(u64, u64);
	[1002] Unknown1002(buffer<unknown<0x301>, 0x19>);
	[1003] Unknown1003();
	[1004] Unknown1004(u32);
	[1005] Unknown1005() -> u32;
	[1006] Unknown1006(buffer<unknown, 0x5>);
	@version(4.0.0+)
	[1007] Unknown1007();
	@version(4.0.0+)
	[1008] Unknown1008() -> object<nn::fssrv::sf::IFileSystem>;
	@version(4.0.0+)
	[1009] Unknown1009() -> bytes<0x80, 8>;

	@version(4.0.0+)
	[1100] Unknown1100(buffer<unknown, 0x5>);
}

interface nn::fssrv::sf::IFileSystemProxyForLoader is fsp-ldr {
	@version(1.0.0)
	[0] Unknown0(buffer<unknown, 0x19>) -> object<nn::fssrv::sf::IFileSystem>;
	@version(2.0.0+)
	[0] Unknown0(u64, buffer<unknown<0x301>, 0x19>) -> object<nn::fssrv::sf::IFileSystem>;
	[1] Unknown1(u64) -> u8;
	@version(4.0.0+)
	[2] Unknown2(u64, pid);
}

interface nn::fssrv::sf::IProgramRegistry is fsp-pr {
	[0] Unknown0(u8, u64, u64, u64, u64, buffer<unknown, 0x5>, buffer<unknown, 0x5>);
	[1] Unknown1(u64);
	@version(4.0.0+)
	[2] Unknown2(u64, pid);

	[256] Unknown256(u8);
}

@version(4.0.0+)
interface nn::fssrv::sf::ISaveDataExporter {
	[0] Unknown0() -> buffer<unknown<0x60>, 0x1a>;
	[1] Unknown1() -> u64;

	[16] Unknown16() -> (u64, buffer<unknown, 0x6>);
	[17] Unknown17() -> buffer<unknown, 0x6>;
}

@version(4.0.0+)
interface nn::fssrv::sf::ISaveDataImporter {
	[0] Unknown0() -> buffer<unknown<0x60>, 0x1a>;
	[1] Unknown1() -> u64;

	[16] Unknown16(buffer<unknown, 0x5>);
	[17] Unknown17();
}

interface nn::fssrv::sf::ISaveDataInfoReader {
	[0] Unknown0() -> (u64, buffer<unknown, 0x6>);
}

@version(4.0.0+)
interface nn::fssrv::sf::ISaveDataTransferManager {
	[0] Unknown0() -> buffer<unknown, 0x6>;

	[16] Unknown16(buffer<unknown, 0x5>);

	[32] Unknown32(u8, u64) -> object<nn::fssrv::sf::ISaveDataExporter>;

	[64] Unknown64(u8, bytes<0x10, 8>, buffer<unknown, 0x5>) -> (u64, object<nn::fssrv::sf::ISaveDataImporter>);
}

interface nn::fssrv::sf::IStorage {
	[0] Unknown0(u64, u64) -> buffer<unknown, 0x46>;
	[1] Unknown1(u64, u64, buffer<unknown, 0x45>);
	[2] Unknown2();
	[3] Unknown3(u64);
	[4] Unknown4() -> u64;
	@version(4.0.0+)
	[5] Unknown5(u32, u64, u64) -> bytes<0x40, 4>;
}

interface nn::gpio::IManager is gpio {
	[0] Unknown0(u32) -> object<nn::gpio::IPadSession>;
	[1] Unknown1(u32) -> object<nn::gpio::IPadSession>;
	[2] Unknown2(u32) -> object<nn::gpio::IPadSession>;
	[3] Unknown3(u32) -> u8;
	[4] Unknown4() -> bytes<0x10, 8>;
	[5] Unknown5(u8, u32);
	@version(2.0.0-3.0.0)
	[6] Unknown6(u8);
	@version(4.0.0+)
	[6] Unknown6(u32);
}

interface nn::gpio::IPadSession {
	[0] Unknown0(u32);
	[1] Unknown1() -> u32;
	[2] Unknown2(u32);
	[3] Unknown3() -> u32;
	[4] Unknown4(u8);
	[5] Unknown5() -> u8;
	[6] Unknown6() -> u32;
	[7] Unknown7();
	[8] Unknown8(u32);
	[9] Unknown9() -> u32;
	[10] Unknown10() -> handle<copy>;
	[11] Unknown11();
	[12] Unknown12(u8);
	[13] Unknown13() -> u8;
	[14] Unknown14(u32);
	[15] Unknown15() -> u32;
	@version(4.0.0+)
	[16] Unknown16(u32);
}

@version(4.0.0+)
interface nn::grcsrv::IContinuousRecorder {
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2();

	@undocumented
	[10] Unknown10() -> handle<copy>;
	@undocumented
	[11] Unknown11();
	@undocumented
	[12] Unknown12();
	@undocumented
	[13] Unknown13(unknown<0x8>);
}

@version(4.0.0+)
interface nn::grcsrv::IGameMovieTrimmer {
	[1] BeginTrim(u32, u32, nn::grcsrv::GameMovieId);
	[2] EndTrim() -> nn::grcsrv::GameMovieId;

	[10] GetNotTrimmingEvent() -> handle<copy>;

	[20] SetThumbnailRgba(u32, u32, buffer<bytes, 0x45>);
}

@version(4.0.0+)
interface nn::grcsrv::IGrcService is grc:c {
	@undocumented
	[1] Unknown1(unknown<0x28>, handle<copy>) -> object<nn::grcsrv::IContinuousRecorder>;
	@undocumented
	[2] Unknown2(unknown<0x8>, handle<copy>) -> object<nn::grcsrv::IGameMovieTrimmer>;
}

interface nn::hid::IActiveVibrationDeviceList {
	[0] ActivateVibrationDevice(nn::hid::VibrationDeviceHandle);
}

interface nn::hid::IAppletResource {
	[0] GetSharedMemoryHandle() -> handle<copy>;
}

interface nn::hid::IHidDebugServer is hid:dbg {
	[0] DeactivateDebugPad();
	[1] SetDebugPadAutoPilotState(nn::hid::debug::DebugPadAutoPilotState);
	[2] UnsetDebugPadAutoPilotState();

	[10] DeactivateTouchScreen();
	[11] SetTouchScreenAutoPilotState(buffer<nn::hid::TouchState[], 0x5>);
	[12] UnsetTouchScreenAutoPilotState();

	[20] DeactivateMouse();
	[21] SetMouseAutoPilotState(nn::hid::debug::MouseAutoPilotState);
	[22] UnsetMouseAutoPilotState();

	[30] DeactivateKeyboard();
	[31] SetKeyboardAutoPilotState(nn::hid::debug::KeyboardAutoPilotState);
	[32] UnsetKeyboardAutoPilotState();

	[50] DeactivateXpad(nn::hid::BasicXpadId);
	[51] SetXpadAutoPilotState(nn::hid::BasicXpadId, nn::hid::debug::BasicXpadAutoPilotState);
	[52] UnsetXpadAutoPilotState(nn::hid::BasicXpadId);

	[60] DeactivateJoyXpad(nn::hid::JoyXpadId);

	@version(2.0.0+)
	[91] DeactivateGesture();

	[110] DeactivateHomeButton();
	[111] SetHomeButtonAutoPilotState(nn::hid::debug::HomeButtonAutoPilotState);
	[112] UnsetHomeButtonAutoPilotState();

	[120] DeactivateSleepButton();
	[121] SetSleepButtonAutoPilotState(nn::hid::debug::SleepButtonAutoPilotState);
	[122] UnsetSleepButtonAutoPilotState();
	[123] DeactivateInputDetector();

	[130] DeactivateCaptureButton();
	[131] SetCaptureButtonAutoPilotState(nn::hid::debug::CaptureButtonAutoPilotState);
	[132] UnsetCaptureButtonAutoPilotState();
	@version(3.0.0+)
	[133] SetShiftAccelerometerCalibrationValue(nn::hid::SixAxisSensorHandle, f32, f32, nn::applet::AppletResourceUserId, pid);
	@version(3.0.0+)
	[134] GetShiftAccelerometerCalibrationValue(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> (f32, f32);
	@version(3.0.0+)
	[135] SetShiftGyroscopeCalibrationValue(nn::hid::SixAxisSensorHandle, f32, f32, nn::applet::AppletResourceUserId, pid);
	@version(3.0.0+)
	[136] GetShiftGyroscopeCalibrationValue(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> (f32, f32);

	@version(3.0.0+)
	[140] DeactivateConsoleSixAxisSensor();

	[201] ActivateFirmwareUpdate();
	[202] DeactivateFirmwareUpdate();
	@version(1.0.0)
	[203] StartFirmwareUpdate(unknown<0x8>) -> handle<copy>;
	@version(2.0.0)
	[203] StartFirmwareUpdate(b8, u32, nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType>, u64, u64, handle<copy>, handle<copy>) -> handle<copy>;
	@version(3.0.0+)
	[203] StartFirmwareUpdate(nn::hid::system::UniquePadId);
	[204] GetFirmwareUpdateStage() -> (u64, u64);
	@version(1.0.0-2.0.0)
	[205] GetFirmwareVersion(u32, nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType>) -> nn::hid::debug::FirmwareVersion;
	@version(3.0.0+)
	[205] GetFirmwareVersion(u32, nn::util::BitFlagSet<32, nn::hid::system::DeviceType>) -> nn::hid::system::FirmwareVersion;
	@version(1.0.0-2.0.0)
	[206] GetDestinationFirmwareVersion(u32, nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType>) -> nn::hid::debug::FirmwareVersion;
	@version(3.0.0+)
	[206] GetDestinationFirmwareVersion(u32, nn::util::BitFlagSet<32, nn::hid::system::DeviceType>) -> nn::hid::system::FirmwareVersion;
	@version(2.0.0)
	[207] GetFirmwareVersionWithIap(u32, nn::util::BitFlagSet<32, nn::hid::system::NpadDeviceType>) -> (nn::hid::debug::FirmwareVersion, b8);
	@version(3.0.0+)
	[207] DiscardFirmwareInfoCacheForRevert();
	@version(3.0.0+)
	[208] StartFirmwareUpdateForRevert(nn::hid::system::UniquePadId);
	@version(3.0.0+)
	[209] GetAvailableFirmwareVersionForRevert(nn::hid::system::UniquePadId) -> nn::hid::system::FirmwareVersion;
	@version(4.0.0+)
	[210] IsFirmwareUpdatingDevice(nn::hid::system::UniquePadId) -> b8;

	@version(3.0.0+)
	[221] UpdateControllerColor(nn::util::Unorm8x4, nn::util::Unorm8x4, nn::hid::system::UniquePadId);
	@version(4.0.0+)
	[222] ConnectUsbPadsAsync();
	@version(4.0.0+)
	[223] DisconnectUsbPadsAsync();
}

interface nn::hid::IHidServer is hid {
	[0] CreateAppletResource(nn::applet::AppletResourceUserId, pid) -> object<nn::hid::IAppletResource>;
	[1] ActivateDebugPad(nn::applet::AppletResourceUserId, pid);

	[11] ActivateTouchScreen(nn::applet::AppletResourceUserId, pid);

	[21] ActivateMouse(nn::applet::AppletResourceUserId, pid);

	[31] ActivateKeyboard(nn::applet::AppletResourceUserId, pid);

	[40] AcquireXpadIdEventHandle(u64) -> handle<copy>;
	[41] ReleaseXpadIdEventHandle(u64);

	[51] ActivateXpad(nn::hid::BasicXpadId, nn::applet::AppletResourceUserId, pid);

	[55] GetXpadIds() -> (u64, buffer<nn::hid::BasicXpadId[], 0xa>);
	[56] ActivateJoyXpad(nn::hid::JoyXpadId);

	[58] GetJoyXpadLifoHandle(nn::hid::JoyXpadId) -> handle<copy>;
	[59] GetJoyXpadIds() -> (u64, buffer<nn::hid::JoyXpadId[], 0xa>);
	[60] ActivateSixAxisSensor(nn::hid::BasicXpadId);
	[61] DeactivateSixAxisSensor(nn::hid::BasicXpadId);
	[62] GetSixAxisSensorLifoHandle(nn::hid::BasicXpadId) -> handle<copy>;
	[63] ActivateJoySixAxisSensor(nn::hid::JoyXpadId);
	[64] DeactivateJoySixAxisSensor(nn::hid::JoyXpadId);
	[65] GetJoySixAxisSensorLifoHandle(nn::hid::JoyXpadId) -> handle<copy>;
	[66] StartSixAxisSensor(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	[67] StopSixAxisSensor(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	[68] IsSixAxisSensorFusionEnabled(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> b8;
	[69] EnableSixAxisSensorFusion(b8, nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	[70] SetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle, f32, f32, nn::applet::AppletResourceUserId, pid);
	[71] GetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> (f32, f32);
	[72] ResetSixAxisSensorFusionParameters(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	[73] SetAccelerometerParameters(nn::hid::SixAxisSensorHandle, f32, f32, nn::applet::AppletResourceUserId, pid);
	[74] GetAccelerometerParameters(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> (f32, f32);
	[75] ResetAccelerometerParameters(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	[76] SetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle, u32, nn::applet::AppletResourceUserId, pid);
	[77] GetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> u32;
	[78] ResetAccelerometerPlayMode(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	[79] SetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle, u32, nn::applet::AppletResourceUserId, pid);
	[80] GetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> u32;
	[81] ResetGyroscopeZeroDriftMode(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	[82] IsSixAxisSensorAtRest(nn::hid::SixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> b8;

	@version(2.0.0+)
	[91] ActivateGesture(u32, nn::applet::AppletResourceUserId, pid);

	[100] SetSupportedNpadStyleSet(nn::util::BitFlagSet<32, nn::hid::NpadStyleTag>, nn::applet::AppletResourceUserId, pid);
	[101] GetSupportedNpadStyleSet(nn::applet::AppletResourceUserId, pid) -> nn::util::BitFlagSet<32, nn::hid::NpadStyleTag>;
	[102] SetSupportedNpadIdType(nn::applet::AppletResourceUserId, pid, buffer<u32[], 0x9>);
	[103] ActivateNpad(nn::applet::AppletResourceUserId, pid);
	[104] DeactivateNpad(nn::applet::AppletResourceUserId, pid);

	[106] AcquireNpadStyleSetUpdateEventHandle(u32, nn::applet::AppletResourceUserId, u64, pid) -> handle<copy>;
	[107] DisconnectNpad(u32, nn::applet::AppletResourceUserId, pid);
	[108] GetPlayerLedPattern(u32) -> u64;

	[120] SetNpadJoyHoldType(nn::applet::AppletResourceUserId, u64, pid);
	[121] GetNpadJoyHoldType(nn::applet::AppletResourceUserId, pid) -> u64;
	[122] SetNpadJoyAssignmentModeSingleByDefault(u32, nn::applet::AppletResourceUserId, pid);
	[123] SetNpadJoyAssignmentModeSingle(u32, nn::applet::AppletResourceUserId, u64, pid);
	[124] SetNpadJoyAssignmentModeDual(u32, nn::applet::AppletResourceUserId, pid);
	[125] MergeSingleJoyAsDualJoy(u32, u32, nn::applet::AppletResourceUserId, pid);
	[126] StartLrAssignmentMode(nn::applet::AppletResourceUserId, pid);
	[127] StopLrAssignmentMode(nn::applet::AppletResourceUserId, pid);
	[128] SetNpadHandheldActivationMode(nn::applet::AppletResourceUserId, u64, pid);
	[129] GetNpadHandheldActivationMode(nn::applet::AppletResourceUserId, pid) -> u64;
	[130] SwapNpadAssignment(u32, u32, nn::applet::AppletResourceUserId, pid);
	[131] IsUnintendedHomeButtonInputProtectionEnabled(u32, nn::applet::AppletResourceUserId, pid) -> b8;
	[132] EnableUnintendedHomeButtonInputProtection(b8, u32, nn::applet::AppletResourceUserId, pid);

	[200] GetVibrationDeviceInfo(nn::hid::VibrationDeviceHandle) -> nn::hid::VibrationDeviceInfoForIpc;
	[201] SendVibrationValue(nn::hid::VibrationDeviceHandle, nn::hid::VibrationValue, nn::applet::AppletResourceUserId, pid);
	[202] GetActualVibrationValue(nn::hid::VibrationDeviceHandle, nn::applet::AppletResourceUserId, pid) -> nn::hid::VibrationValue;
	[203] CreateActiveVibrationDeviceList() -> object<nn::hid::IActiveVibrationDeviceList>;
	[204] PermitVibration(b8);
	[205] IsVibrationPermitted() -> b8;
	[206] SendVibrationValues(nn::applet::AppletResourceUserId, buffer<nn::hid::VibrationDeviceHandle[], 0x9>, buffer<nn::hid::VibrationValue[], 0x9>);
	@version(4.0.0+)
	[207] SendVibrationGcErmCommand(nn::hid::VibrationDeviceHandle, nn::applet::AppletResourceUserId, nn::hid::VibrationGcErmCommand, pid);
	@version(4.0.0+)
	[208] GetActualVibrationGcErmCommand(nn::hid::VibrationDeviceHandle, nn::applet::AppletResourceUserId, pid) -> nn::hid::VibrationGcErmCommand;
	@version(4.0.0+)
	[209] BeginPermitVibrationSession(nn::applet::AppletResourceUserId);
	@version(4.0.0+)
	[210] EndPermitVibrationSession();

	@version(3.0.0+)
	[300] ActivateConsoleSixAxisSensor(nn::applet::AppletResourceUserId, pid);
	@version(3.0.0+)
	[301] StartConsoleSixAxisSensor(nn::hid::ConsoleSixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);
	@version(3.0.0+)
	[302] StopConsoleSixAxisSensor(nn::hid::ConsoleSixAxisSensorHandle, nn::applet::AppletResourceUserId, pid);

	@version(3.0.0+)
	[400] IsUsbFullKeyControllerEnabled() -> b8;
	@version(3.0.0+)
	[401] EnableUsbFullKeyController(b8);
	@version(3.0.0+)
	[402] IsUsbFullKeyControllerConnected(u32) -> b8;
	@version(4.0.0+)
	[403] HasBattery(u32) -> b8;
	@version(4.0.0+)
	[404] HasLeftRightBattery(u32) -> (b8, b8);
	@version(4.0.0+)
	[405] GetNpadInterfaceType(u32) -> u8;
	@version(4.0.0+)
	[406] GetNpadLeftRightInterfaceType(u32) -> (u8, u8);

	[1000] SetNpadCommunicationMode(nn::applet::AppletResourceUserId, u64, pid);
	[1001] GetNpadCommunicationMode() -> u64;
}

interface nn::hid::IHidSystemServer is hid:sys {
	[31] SendKeyboardLockKeyEvent(nn::util::BitFlagSet<32, nn::hid::system::KeyboardLockKeyEvent>);

	[101] AcquireHomeButtonEventHandle(nn::applet::AppletResourceUserId, pid) -> handle<copy>;

	[111] ActivateHomeButton(nn::applet::AppletResourceUserId, pid);

	[121] AcquireSleepButtonEventHandle(nn::applet::AppletResourceUserId, pid) -> handle<copy>;

	[131] ActivateSleepButton(nn::applet::AppletResourceUserId, pid);

	[141] AcquireCaptureButtonEventHandle(nn::applet::AppletResourceUserId, pid) -> handle<copy>;

	[151] ActivateCaptureButton(nn::applet::AppletResourceUserId, pid);

	[210] AcquireNfcDeviceUpdateEventHandle() -> handle<copy>;
	[211] GetNpadsWithNfc() -> (u64, buffer<u32[], 0xa>);
	[212] AcquireNfcActivateEventHandle(u32) -> handle<copy>;
	[213] ActivateNfc(b8, u32, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[214] GetXcdHandleForNpadWithNfc(u32, nn::applet::AppletResourceUserId) -> u64;
	@version(4.0.0+)
	[215] IsNfcActivated(u32) -> b8;

	[230] AcquireIrSensorEventHandle(u32) -> handle<copy>;
	[231] ActivateIrSensor(b8, u32, nn::applet::AppletResourceUserId, pid);

	[301] ActivateNpadSystem(u32);

	[303] ApplyNpadSystemCommonPolicy(nn::applet::AppletResourceUserId, pid);
	[304] EnableAssigningSingleOnSlSrPress(nn::applet::AppletResourceUserId, pid);
	[305] DisableAssigningSingleOnSlSrPress(nn::applet::AppletResourceUserId, pid);
	@version(2.0.0+)
	[306] GetLastActiveNpad() -> u32;
	@version(2.0.0+)
	[307] GetNpadSystemExtStyle(u32) -> (u64, u64);

	@version(2.0.0+)
	[311] SetNpadPlayerLedBlinkingDevice(u32, nn::util::BitFlagSet<32, nn::hid::system::DeviceType>, nn::applet::AppletResourceUserId, pid);

	@version(3.0.0+)
	[321] GetUniquePadsFromNpad(u32) -> (u64, buffer<nn::hid::system::UniquePadId[], 0xa>);
	[322] GetIrSensorState(u32, nn::applet::AppletResourceUserId, pid) -> u64;
	[323] GetXcdHandleForNpadWithIrSensor(u32, nn::applet::AppletResourceUserId, pid) -> u64;

	[500] SetAppletResourceUserId(nn::applet::AppletResourceUserId);
	[501] RegisterAppletResourceUserId(b8, nn::applet::AppletResourceUserId);
	[502] UnregisterAppletResourceUserId(nn::applet::AppletResourceUserId);
	[503] EnableAppletToGetInput(b8, nn::applet::AppletResourceUserId);
	[504] SetAruidValidForVibration(b8, nn::applet::AppletResourceUserId);
	@version(2.0.0+)
	[505] EnableAppletToGetSixAxisSensor(b8, nn::applet::AppletResourceUserId);

	[510] SetVibrationMasterVolume(f32);
	[511] GetVibrationMasterVolume() -> f32;
	@version(3.0.0+)
	[512] BeginPermitVibrationSession(nn::applet::AppletResourceUserId);
	@version(3.0.0+)
	[513] EndPermitVibrationSession();

	[520] EnableHandheldHids();
	[521] DisableHandheldHids();

	@version(2.0.0+)
	[540] AcquirePlayReportControllerUsageUpdateEvent() -> handle<copy>;
	@version(2.0.0+)
	[541] GetPlayReportControllerUsages() -> (u64, buffer<nn::hid::system::PlayReportControllerUsage[], 0xa>);
	@version(2.0.0+)
	[542] AcquirePlayReportRegisteredDeviceUpdateEvent() -> handle<copy>;
	@version(2.0.0)
	[543] GetPlayReportRegisteredDevices() -> (u64, buffer<nn::hid::system::PlayReportRegisteredDevice[], 0xa>);
	@version(3.0.0+)
	[543] GetRegisteredDevices() -> (u64, buffer<nn::hid::system::RegisteredDevice[], 0xa>);
	@version(3.0.0+)
	[544] AcquireConnectionTriggerTimeoutEvent() -> handle<copy>;
	@version(3.0.0+)
	[545] SendConnectionTrigger(nn::bluetooth::Address);
	@version(3.0.0+)
	[546] AcquireDeviceRegisteredEventForControllerSupport() -> handle<copy>;
	@version(3.0.0+)
	[547] GetAllowedBluetoothLinksCount() -> u64;

	[700] ActivateUniquePad(nn::applet::AppletResourceUserId, nn::hid::system::UniquePadId, pid);

	[702] AcquireUniquePadConnectionEventHandle() -> handle<copy>;
	[703] GetUniquePadIds() -> (u64, buffer<nn::hid::system::UniquePadId[], 0xa>);

	[751] AcquireJoyDetachOnBluetoothOffEventHandle(nn::applet::AppletResourceUserId, pid) -> handle<copy>;

	[800] ListSixAxisSensorHandles(nn::hid::system::UniquePadId) -> (u64, buffer<nn::hid::system::UniqueSixAxisSensorHandle[], 0xa>);
	[801] IsSixAxisSensorUserCalibrationSupported(nn::hid::system::UniqueSixAxisSensorHandle) -> b8;
	[802] ResetSixAxisSensorCalibrationValues(nn::hid::system::UniqueSixAxisSensorHandle);
	[803] StartSixAxisSensorUserCalibration(nn::hid::system::UniqueSixAxisSensorHandle);
	[804] CancelSixAxisSensorUserCalibration(nn::hid::system::UniqueSixAxisSensorHandle);
	@version(3.0.0+)
	[805] GetUniquePadBluetoothAddress(nn::hid::system::UniquePadId) -> nn::bluetooth::Address;
	@version(3.0.0+)
	[806] DisconnectUniquePad(nn::hid::system::UniquePadId);

	[821] StartAnalogStickManualCalibration(nn::hid::system::UniquePadId, u64);
	[822] RetryCurrentAnalogStickManualCalibrationStage(nn::hid::system::UniquePadId, u64);
	[823] CancelAnalogStickManualCalibration(nn::hid::system::UniquePadId, u64);
	[824] ResetAnalogStickManualCalibration(nn::hid::system::UniquePadId, u64);

	@version(3.0.0+)
	[850] IsUsbFullKeyControllerEnabled() -> b8;
	@version(3.0.0+)
	[851] EnableUsbFullKeyController(b8);
	@version(3.0.0+)
	[852] IsUsbConnected(nn::hid::system::UniquePadId) -> b8;

	[900] ActivateInputDetector(nn::applet::AppletResourceUserId, pid);
	[901] NotifyInputDetector(nn::util::BitFlagSet<32, nn::hid::system::InputSourceId>);

	@version(3.0.0+)
	[1000] InitializeFirmwareUpdate();
	@version(3.0.0+)
	[1001] GetFirmwareVersion(nn::hid::system::UniquePadId) -> nn::hid::system::FirmwareVersion;
	@version(3.0.0+)
	[1002] GetAvailableFirmwareVersion(nn::hid::system::UniquePadId) -> nn::hid::system::FirmwareVersion;
	@version(3.0.0+)
	[1003] IsFirmwareUpdateAvailable(nn::hid::system::UniquePadId) -> b8;
	@version(3.0.0+)
	[1004] CheckFirmwareUpdateRequired(nn::hid::system::UniquePadId) -> u64;
	@version(3.0.0+)
	[1005] StartFirmwareUpdate(nn::hid::system::UniquePadId) -> nn::hid::system::FirmwareUpdateDeviceHandle;
	@version(3.0.0+)
	[1006] AbortFirmwareUpdate();
	@version(3.0.0+)
	[1007] GetFirmwareUpdateState(nn::hid::system::FirmwareUpdateDeviceHandle) -> nn::hid::system::FirmwareUpdateState;
	@version(4.0.0+)
	[1008] ActivateAudioControl();
	@version(4.0.0+)
	[1009] AcquireAudioControlEventHandle() -> handle<copy>;
	@version(4.0.0+)
	[1010] GetAudioControlStates() -> (u64, buffer<nn::hid::system::AudioControlState[], 0xa>);
	@version(4.0.0+)
	[1011] DeactivateAudioControl();
}

@version(3.0.0+)
interface nn::hid::IHidTemporaryServer is hid:tmp {
	[0] GetConsoleSixAxisSensorCalibrationValues(nn::hid::ConsoleSixAxisSensorHandle, nn::applet::AppletResourceUserId, pid) -> nn::hid::tmp::ConsoleSixAxisSensorCalibrationValues;
}

interface nn::htc::tenv::IService {
	[0] Unknown0(bytes<0x40, 1>) -> (u64, buffer<unknown, 0x6>);
	[1] Unknown1(bytes<0x40, 1>) -> u64;
	[2] Unknown2(u64);
}

interface nn::htc::tenv::IServiceManager is htc:tenv {
	[0] Unknown0(u64, pid) -> object<unknown>;
}

interface nn::i2c::IManager is i2c, i2c:pcv {
	[0] Unknown0(u16, u32, u32, u32) -> object<nn::i2c::ISession>;
	[1] Unknown1(u32) -> object<nn::i2c::ISession>;
	[2] Unknown2(u32) -> u8;
	[3] Unknown3(u16, u32, u32, u32) -> u8;
}

interface nn::i2c::ISession {
	[0] Unknown0(u32, buffer<unknown, 0x5>);
	[1] Unknown1(u32) -> buffer<unknown, 0x6>;
	[2] Unknown2(buffer<unknown, 0x9>) -> buffer<unknown, 0x6>;

	[10] Unknown10(u32, buffer<unknown, 0x21>);
	[11] Unknown11(u32) -> buffer<unknown, 0x22>;
	[12] Unknown12(buffer<unknown, 0x9>) -> buffer<unknown, 0x22>;
}

interface nn::idle::detail::IPolicyManagerSystem is idle:sys {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@version(1.0.0-3.0.0)
	@undocumented
	[1] Unknown1();
	@version(1.0.0-3.0.0)
	@undocumented
	[2] Unknown2();
	@version(1.0.0-2.0.0)
	@undocumented
	[3] Unknown3(unknown<0x28>);
	@version(3.0.0+)
	@undocumented
	[3] Unknown3(unknown<0x38>);
	@undocumented
	[4] Unknown4();
	@version(2.0.0+)
	@undocumented
	[5] Unknown5();
}

interface nn::irsensor::IIrSensorServer is irs {
	[302] ActivateIrsensor(nn::applet::AppletResourceUserId, pid);
	[303] DeactivateIrsensor(nn::applet::AppletResourceUserId, pid);
	[304] GetIrsensorSharedMemoryHandle(nn::applet::AppletResourceUserId, pid) -> handle<copy>;
	[305] StopImageProcessor(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, pid);
	[306] RunMomentProcessor(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, nn::irsensor::PackedMomentProcessorConfig, pid);
	[307] RunClusteringProcessor(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, nn::irsensor::PackedClusteringProcessorConfig, pid);
	[308] RunImageTransferProcessor(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, nn::irsensor::PackedImageTransferProcessorConfig, u64, pid, handle<copy>);
	[309] GetImageTransferProcessorState(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, pid) -> (nn::irsensor::ImageTransferProcessorState, buffer<bytes, 0x6>);
	[310] RunTeraPluginProcessor(nn::irsensor::IrCameraHandle, nn::irsensor::PackedTeraPluginProcessorConfig, nn::applet::AppletResourceUserId, pid);
	[311] GetNpadIrCameraHandle(u32) -> nn::irsensor::IrCameraHandle;
	@version(1.0.0-3.0.0)
	[312] RunDpdProcessor(nn::irsensor::IrCameraHandle, nn::irsensor::PackedDpdProcessorConfig, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[312] RunPointingProcessor(nn::irsensor::IrCameraHandle, nn::irsensor::PackedPointingProcessorConfig, nn::applet::AppletResourceUserId, pid);
	@version(2.0.0+)
	[313] SuspendImageProcessor(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, pid);
	@version(3.0.0+)
	[314] CheckFirmwareVersion(nn::irsensor::IrCameraHandle, nn::irsensor::PackedMcuVersion, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[315] SetFunctionLevel(nn::irsensor::IrCameraHandle, nn::irsensor::PackedFunctionLevel, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[316] RunImageTransferExProcessor(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, nn::irsensor::PackedImageTransferProcessorExConfig, u64, pid, handle<copy>);
	@version(4.0.0+)
	[317] RunIrLedProcessor(nn::irsensor::IrCameraHandle, nn::irsensor::PackedIrLedProcessorConfig, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[318] StopImageProcessorAsync(nn::irsensor::IrCameraHandle, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[319] ActivateIrsensorWithFunctionLevel(nn::irsensor::PackedFunctionLevel, nn::applet::AppletResourceUserId, pid);
}

interface nn::irsensor::IIrSensorSystemServer is irs:sys {
	[500] SetAppletResourceUserId(nn::applet::AppletResourceUserId);
	[501] RegisterAppletResourceUserId(b8, nn::applet::AppletResourceUserId);
	[502] UnregisterAppletResourceUserId(nn::applet::AppletResourceUserId);
	[503] EnableAppletToGetInput(b8, nn::applet::AppletResourceUserId);
}

interface nn::lbl::detail::ILblController is lbl {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2(unknown<0x4>);
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5() -> unknown<0x4>;
	@undocumented
	[6] Unknown6(unknown<0x8>);
	@undocumented
	[7] Unknown7(unknown<0x8>);
	@undocumented
	[8] Unknown8() -> unknown<0x4>;
	@undocumented
	[9] Unknown9();
	@undocumented
	[10] Unknown10();
	@undocumented
	[11] Unknown11() -> unknown<0x1>;
	@undocumented
	[12] Unknown12();
	@undocumented
	[13] Unknown13();
	@undocumented
	[14] Unknown14() -> unknown<0x1>;
	@undocumented
	[15] Unknown15(unknown<0x4>);
	@undocumented
	[16] Unknown16() -> unknown<0x4>;
	@undocumented
	[17] Unknown17(unknown<0x8>);
	@undocumented
	[18] Unknown18(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[19] Unknown19(unknown<0xc>);
	@undocumented
	[20] Unknown20() -> unknown<0xc>;
	@undocumented
	[21] Unknown21(unknown<0xc>);
	@undocumented
	[22] Unknown22() -> unknown<0xc>;
	@version(3.0.0+)
	@undocumented
	[23] Unknown23() -> unknown<0x1>;
	@version(3.0.0+)
	@undocumented
	[24] Unknown24(unknown<0x4>);
	@version(3.0.0+)
	@undocumented
	[25] Unknown25() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[26] Unknown26();
	@version(3.0.0+)
	@undocumented
	[27] Unknown27();
	@version(3.0.0+)
	@undocumented
	[28] Unknown28() -> unknown<0x1>;
}

interface nn::ldn::detail::IMonitorService {
	[0] Unknown0() -> u32;
	[1] Unknown1() -> buffer<unknown<0x480>, 0x1a>;
	[2] Unknown2() -> (u32, u32);
	[3] Unknown3() -> u16;
	[4] Unknown4() -> bytes<0x20, 1>;
	[5] Unknown5() -> bytes<0x20, 8>;

	[100] Unknown100();
	[101] Unknown101();
}

interface nn::ldn::detail::IMonitorServiceCreator is ldn:m {
	[0] Unknown0() -> object<nn::ldn::detail::IMonitorService>;
}

interface nn::ldn::detail::ISystemLocalCommunicationService {
	[0] Unknown0() -> u32;
	[1] Unknown1() -> buffer<unknown<0x480>, 0x1a>;
	[2] Unknown2() -> (u32, u32);
	[3] Unknown3() -> u16;
	[4] Unknown4() -> bytes<0x20, 1>;
	[5] Unknown5() -> bytes<0x20, 8>;

	[100] Unknown100() -> handle<copy>;
	[101] Unknown101() -> (buffer<unknown<0x480>, 0x1a>, buffer<unknown, 0xa>);
	[102] Unknown102(u16, bytes<0x60, 8>) -> (u16, buffer<unknown, 0x22>);
	[103] Unknown103(u16, bytes<0x60, 8>) -> (u16, buffer<unknown, 0x22>);

	[200] Unknown200();
	[201] Unknown201();
	[202] Unknown202(bytes<0x44, 2>, bytes<0x30, 1>, bytes<0x20, 8>);
	[203] Unknown203(bytes<0x44, 2>, bytes<0x20, 1>, bytes<0x30, 1>, bytes<0x20, 8>, buffer<unknown, 0x9>);
	[204] Unknown204();
	[205] Unknown205(u32);
	[206] Unknown206(buffer<unknown, 0x21>);
	[207] Unknown207(u8);
	[208] Unknown208(bytes<0x6, 1>);
	[209] Unknown209();

	[300] Unknown300();
	[301] Unknown301();
	[302] Unknown302(bytes<0x44, 2>, bytes<0x30, 1>, u32, u32, buffer<unknown<0x480>, 0x19>);
	[303] Unknown303(bytes<0x44, 2>, bytes<0x20, 1>, bytes<0x30, 1>, u32, u32, bytes<0x20, 8>);
	[304] Unknown304();

	[400] Unknown400(u64, pid);
	[401] Unknown401();
	@version(4.0.0+)
	[402] Unknown402(u32);
}

interface nn::ldn::detail::ISystemServiceCreator is ldn:s {
	[0] Unknown0() -> object<nn::ldn::detail::ISystemLocalCommunicationService>;
}

interface nn::ldn::detail::IUserLocalCommunicationService {
	[0] Unknown0() -> u32;
	[1] Unknown1() -> buffer<unknown<0x480>, 0x1a>;
	[2] Unknown2() -> (u32, u32);
	[3] Unknown3() -> u16;
	[4] Unknown4() -> bytes<0x20, 1>;
	[5] Unknown5() -> bytes<0x20, 8>;

	[100] Unknown100() -> handle<copy>;
	[101] Unknown101() -> (buffer<unknown<0x480>, 0x1a>, buffer<unknown, 0xa>);
	[102] Unknown102(u16, bytes<0x60, 8>) -> (u16, buffer<unknown, 0x22>);
	[103] Unknown103(u16, bytes<0x60, 8>) -> (u16, buffer<unknown, 0x22>);

	[200] Unknown200();
	[201] Unknown201();
	[202] Unknown202(bytes<0x44, 2>, bytes<0x30, 1>, bytes<0x20, 8>);
	[203] Unknown203(bytes<0x44, 2>, bytes<0x20, 1>, bytes<0x30, 1>, bytes<0x20, 8>, buffer<unknown, 0x9>);
	[204] Unknown204();
	[205] Unknown205(u32);
	[206] Unknown206(buffer<unknown, 0x21>);
	[207] Unknown207(u8);
	[208] Unknown208(bytes<0x6, 1>);
	[209] Unknown209();

	[300] Unknown300();
	[301] Unknown301();
	[302] Unknown302(bytes<0x44, 2>, bytes<0x30, 1>, u32, u32, buffer<unknown<0x480>, 0x19>);
	[303] Unknown303(bytes<0x44, 2>, bytes<0x20, 1>, bytes<0x30, 1>, u32, u32, bytes<0x20, 8>);
	[304] Unknown304();

	[400] Unknown400(u64, pid);
	[401] Unknown401();
}

interface nn::ldn::detail::IUserServiceCreator is ldn:u {
	[0] Unknown0() -> object<nn::ldn::detail::IUserLocalCommunicationService>;
}

interface nn::ldr::detail::IDebugMonitorInterface is ldr:dmnt {
	@undocumented
	[0] Unknown0(unknown<0x10>, buffer<unknown, 0x9>);
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0xa>);
}

interface nn::ldr::detail::IProcessManagerInterface is ldr:pm {
	@undocumented
	[0] Unknown0(unknown<0x10>, handle<copy>) -> handle<move>;
	@undocumented
	[1] Unknown1(unknown<0x10>) -> buffer<unknown, 0x1a>;
	@undocumented
	[2] Unknown2(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[3] Unknown3(unknown<0x8>);
}

@version(1.0.0-2.0.0)
interface nn::ldr::detail::IRoInterface is ldr:ro {
	[0] Unknown0(u64, u64, u64, u64, u64, pid) -> u64;
	[1] Unknown1(u64, u64, pid);
	[2] Unknown2(u64, u64, u64, pid);
	[3] Unknown3(u64, u64, pid);
	[4] Unknown4(u64, pid, handle<copy>);
}

interface nn::ldr::detail::IShellInterface is ldr:shel {
	@undocumented
	[0] Unknown0(unknown<0x10>, buffer<unknown, 0x9>);
	@undocumented
	[1] Unknown1();
}

interface nn::lm::ILogService is lm {
	[0] Unknown0(u64, pid) -> object<nn::lm::ILogger>;
}

interface nn::lm::ILogger {
	[0] Unknown0(buffer<unknown, 0x21>);
	@version(3.0.0+)
	[1] Unknown1(u32);
}

@version(2.0.0+)
interface nn::lr::IAddOnContentLocationResolver {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[1] Unknown1(unknown<0x10>);
	@undocumented
	[2] Unknown2();
}

interface nn::lr::ILocationResolver {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[1] Unknown1(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[2] Unknown2(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[3] Unknown3(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[4] Unknown4(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[5] Unknown5(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[6] Unknown6(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[7] Unknown7(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[8] Unknown8(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[9] Unknown9();
}

interface nn::lr::ILocationResolverManager is lr {
	@undocumented
	[0] Unknown0(unknown<0x1>) -> object<nn::lr::ILocationResolver>;
	@undocumented
	[1] Unknown1() -> object<nn::lr::IRegisteredLocationResolver>;
	@undocumented
	[2] Unknown2(unknown<0x1>);
	@version(2.0.0+)
	@undocumented
	[3] Unknown3() -> object<nn::lr::IAddOnContentLocationResolver>;
}

interface nn::lr::IRegisteredLocationResolver {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[1] Unknown1(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[2] Unknown2(unknown<0x8>);
	@undocumented
	[3] Unknown3(unknown<0x8>, buffer<unknown, 0x19>);
	@version(2.0.0+)
	@undocumented
	[4] Unknown4(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@version(2.0.0+)
	@undocumented
	[5] Unknown5(unknown<0x8>, buffer<unknown, 0x19>);
	@version(2.0.0+)
	@undocumented
	[6] Unknown6(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[7] Unknown7(unknown<0x8>, buffer<unknown, 0x19>);
}

@version(4.0.0+)
interface nn::migration::detail::IAsyncContext {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> unknown<0x1>;
	@undocumented
	[3] Unknown3();
}

@version(4.0.0+)
interface nn::migration::user::IClient {
	@undocumented
	[0] Unknown0() -> buffer<unknown, 0x1a>;

	@undocumented
	[10] Unknown10() -> unknown<0x10>;
	@undocumented
	[11] Unknown11() -> unknown<0x8>;
	@undocumented
	[12] Unknown12() -> unknown<0x21>;
	@undocumented
	[13] Unknown13() -> (unknown<0x4>, buffer<unknown, 0x6>);

	@undocumented
	[100] Unknown100() -> object<nn::migration::detail::IAsyncContext>;
	@undocumented
	[101] Unknown101() -> unknown<0x1>;

	@undocumented
	[200] Unknown200() -> object<nn::migration::detail::IAsyncContext>;
	@undocumented
	[201] Unknown201() -> (unknown<0x4>, buffer<unknown, 0x6>);

	@undocumented
	[210] Unknown210(unknown<0x10>) -> object<nn::migration::detail::IAsyncContext>;

	@undocumented
	[300] Unknown300() -> unknown<0x8>;
	@undocumented
	[301] Unknown301() -> unknown<0x10>;
	@undocumented
	[302] Unknown302() -> unknown<0x10>;

	@undocumented
	[310] Unknown310() -> unknown<0x10>;
	@undocumented
	[311] Unknown311() -> (unknown<0x4>, buffer<unknown, 0x6>);

	@undocumented
	[320] Unknown320() -> object<nn::migration::detail::IAsyncContext>;

	@undocumented
	[350] Unknown350() -> object<nn::migration::detail::IAsyncContext>;

	@undocumented
	[400] Unknown400() -> object<nn::migration::detail::IAsyncContext>;

	@undocumented
	[500] Unknown500();

	@undocumented
	[999] Unknown999() -> object<nn::migration::detail::IAsyncContext>;
}

@version(4.0.0+)
interface nn::migration::user::IServer {
	@undocumented
	[0] Unknown0() -> unknown<0x10>;
	@undocumented
	[1] Unknown1() -> buffer<unknown, 0x1a>;

	@undocumented
	[100] Unknown100() -> object<nn::migration::detail::IAsyncContext>;
	@undocumented
	[101] Unknown101() -> unknown<0x1>;

	@undocumented
	[200] Unknown200() -> object<nn::migration::detail::IAsyncContext>;
	@undocumented
	[201] Unknown201() -> buffer<unknown, 0x1a>;
	@undocumented
	[202] Unknown202() -> object<nn::migration::detail::IAsyncContext>;
	@undocumented
	[203] Unknown203() -> object<nn::migration::detail::IAsyncContext>;

	@undocumented
	[300] Unknown300() -> object<nn::migration::detail::IAsyncContext>;

	@undocumented
	[400] Unknown400() -> object<nn::migration::detail::IAsyncContext>;

	@undocumented
	[500] Unknown500();
}

@version(4.0.0+)
interface nn::migration::user::IService is mig:usr {
	@undocumented
	[10] Unknown10() -> unknown<0xc>;

	@undocumented
	[100] Unknown100(unknown<0x18>, handle<copy>, buffer<unknown, 0x19>) -> object<nn::migration::user::IServer>;
	@undocumented
	[101] Unknown101(unknown<0x4>, handle<copy>) -> object<nn::migration::user::IServer>;

	@undocumented
	[200] Unknown200(unknown<0x4>, handle<copy>, buffer<unknown, 0x19>) -> object<nn::migration::user::IClient>;
	@undocumented
	[201] Unknown201(unknown<0x4>, handle<copy>) -> object<nn::migration::user::IClient>;
}

interface nn::mii::detail::IDatabaseService {
	[0] IsUpdated(u32) -> b8;
	[1] IsFullDatabase() -> b8;
	[2] GetCount(u32) -> u32;
	[3] Get(u32) -> (u32, buffer<nn::mii::CharInfoElement[], 0x6>);
	[4] Get1(u32) -> (u32, buffer<nn::mii::CharInfo[], 0x6>);
	[5] UpdateLatest(nn::mii::CharInfo, u32) -> nn::mii::CharInfo;
	[6] BuildRandom(u32, u32, u32) -> nn::mii::CharInfo;
	[7] BuildDefault(u32) -> nn::mii::CharInfo;
	[8] Get2(u32) -> (u32, buffer<nn::mii::StoreDataElement[], 0x6>);
	[9] Get3(u32) -> (u32, buffer<nn::mii::StoreData[], 0x6>);
	[10] UpdateLatest1(nn::mii::StoreData, u32) -> nn::mii::StoreData;
	[11] FindIndex(nn::mii::CreateId, b8) -> u32;
	[12] Move(nn::mii::CreateId, u32);
	[13] AddOrReplace(nn::mii::StoreData);
	[14] Delete(nn::mii::CreateId);
	[15] DestroyFile();
	[16] DeleteFile();
	[17] Format();
	[18] Import(buffer<bytes, 0x5>);
	[19] Export() -> buffer<bytes, 0x6>;
	[20] IsBrokenDatabaseWithClearFlag() -> b8;
	[21] GetIndex(nn::mii::CharInfo) -> u32;
}

interface nn::mii::detail::IStaticService is mii:u, mii:e {
	[0] GetDatabaseService(u32) -> object<nn::mii::detail::IDatabaseService>;
}

interface nn::mmnv::IRequest is mm:u {
	[0] Unknown0(u32, u32, u32);
	[1] Unknown1(u32);
	[2] Unknown2(u32, u32, u32);
	[3] Unknown3(u32) -> u32;
	@version(2.0.0+)
	[4] Unknown4(u32, u32, u32) -> u32;
	@version(2.0.0+)
	[5] Unknown5(u32);
	@version(2.0.0+)
	[6] Unknown6(u32, u32, u32);
	@version(2.0.0+)
	[7] Unknown7(u32) -> u32;
}

interface nn::ncm::IContentManager is ncm {
	@undocumented
	[0] Unknown0(unknown<0x1>);
	@undocumented
	[1] Unknown1(unknown<0x1>);
	@undocumented
	[2] Unknown2(unknown<0x1>);
	@undocumented
	[3] Unknown3(unknown<0x1>);
	@undocumented
	[4] Unknown4(unknown<0x1>) -> object<nn::ncm::IContentStorage>;
	@undocumented
	[5] Unknown5(unknown<0x1>) -> object<nn::ncm::IContentMetaDatabase>;
	@version(1.0.0)
	@undocumented
	[6] Unknown6(unknown<0x1>);
	@version(1.0.0)
	@undocumented
	[7] Unknown7(unknown<0x1>);
	@undocumented
	[8] Unknown8(unknown<0x1>);
	@version(2.0.0+)
	@undocumented
	[9] Unknown9(unknown<0x1>);
	@version(2.0.0+)
	@undocumented
	[10] Unknown10(unknown<0x1>);
	@version(2.0.0+)
	@undocumented
	[11] Unknown11(unknown<0x1>);
	@version(2.0.0+)
	@undocumented
	[12] Unknown12(unknown<0x1>);
}

interface nn::ncm::IContentMetaDatabase {
	@undocumented
	[0] Unknown0(unknown<0x10>, buffer<unknown, 0x5>);
	@undocumented
	[1] Unknown1(unknown<0x10>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[2] Unknown2(unknown<0x10>);
	@undocumented
	[3] Unknown3(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[4] Unknown4(unknown<0x18>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[5] Unknown5(unknown<0x20>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[6] Unknown6(unknown<0x8>) -> unknown<0x10>;
	@undocumented
	[7] Unknown7(unknown<0x1>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[8] Unknown8(unknown<0x10>) -> unknown<0x1>;
	@undocumented
	[9] Unknown9(buffer<unknown, 0x5>) -> unknown<0x1>;
	@undocumented
	[10] Unknown10(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[11] Unknown11(unknown<0x10>) -> unknown<0x4>;
	@undocumented
	[12] Unknown12(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[13] Unknown13();
	@undocumented
	[14] Unknown14(buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@undocumented
	[15] Unknown15();
	@undocumented
	[16] Unknown16(unknown<0x20>) -> unknown<0x1>;
	@undocumented
	[17] Unknown17(unknown<0x18>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[18] Unknown18(unknown<0x10>) -> unknown<0x1>;
	@version(2.0.0+)
	@undocumented
	[19] Unknown19(unknown<0x10>) -> unknown<0x4>;
}

interface nn::ncm::IContentStorage {
	@undocumented
	[0] Unknown0() -> unknown<0x10>;
	@undocumented
	[1] Unknown1(unknown<0x28>);
	@undocumented
	[2] Unknown2(unknown<0x10>);
	@undocumented
	[3] Unknown3(unknown<0x10>) -> unknown<0x1>;
	@undocumented
	[4] Unknown4(unknown<0x18>, buffer<unknown, 0x5>);
	@undocumented
	[5] Unknown5(unknown<0x20>);
	@undocumented
	[6] Unknown6(unknown<0x10>);
	@undocumented
	[7] Unknown7(unknown<0x10>) -> unknown<0x1>;
	@undocumented
	[8] Unknown8(unknown<0x10>) -> buffer<unknown, 0x1a>;
	@undocumented
	[9] Unknown9(unknown<0x10>) -> buffer<unknown, 0x1a>;
	@undocumented
	[10] Unknown10();
	@undocumented
	[11] Unknown11() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[12] Unknown12() -> unknown<0x4>;
	@undocumented
	[13] Unknown13(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[14] Unknown14(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[15] Unknown15();
	@version(2.0.0+)
	@undocumented
	[16] Unknown16(unknown<0x30>);
	@version(2.0.0+)
	@undocumented
	[17] Unknown17(unknown<0x18>);
	@version(2.0.0+)
	@undocumented
	[18] Unknown18(unknown<0x18>) -> buffer<unknown, 0x6>;
	@version(2.0.0)
	@undocumented
	[19] Unknown19(unknown<0x10>) -> unknown<0x10>;
	@version(3.0.0+)
	@undocumented
	[19] Unknown19(unknown<0x10>) -> unknown<0x18>;
	@version(2.0.0)
	@undocumented
	[20] Unknown20(unknown<0x10>) -> unknown<0x10>;
	@version(3.0.0+)
	@undocumented
	[20] Unknown20(unknown<0x10>) -> unknown<0x18>;
	@version(2.0.0+)
	@undocumented
	[21] Unknown21(unknown<0x18>, buffer<unknown, 0x5>);
	@version(2.0.0+)
	@undocumented
	[22] Unknown22() -> unknown<0x8>;
	@version(2.0.0+)
	@undocumented
	[23] Unknown23() -> unknown<0x8>;
	@version(3.0.0+)
	@undocumented
	[24] Unknown24();
	@version(4.0.0+)
	@undocumented
	[25] Unknown25(unknown<0x10>) -> unknown<0x8>;
	@version(4.0.0+)
	@undocumented
	[26] Unknown26();
}

interface nn::news::detail::ipc::INewlyArrivedEventHolder {
	@undocumented
	[0] Unknown0() -> handle<copy>;
}

interface nn::news::detail::ipc::INewsDataService {
	@undocumented
	[0] Unknown0(buffer<unknown, 0x9>);
	@undocumented
	[1] Unknown1(unknown<0x48>);
	@undocumented
	[2] Unknown2(unknown<0x8>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[3] Unknown3() -> unknown<0x8>;
}

interface nn::news::detail::ipc::INewsDatabaseService {
	@undocumented
	[0] Unknown0(unknown<0x4>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[1] Unknown1(buffer<unknown, 0x9>) -> unknown<0x4>;
	@undocumented
	[2] Unknown2(unknown<0x1>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> unknown<0x4>;
	@undocumented
	[3] Unknown3(unknown<0x4>, buffer<unknown, 0x9>, buffer<unknown, 0x9>);
	@undocumented
	[4] Unknown4(unknown<0x4>, buffer<unknown, 0x9>, buffer<unknown, 0x9>);
	@undocumented
	[5] Unknown5(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>);
}

interface nn::news::detail::ipc::INewsService {
	@undocumented
	[10100] Unknown10100(buffer<unknown, 0x5>);

	@undocumented
	[20100] Unknown20100(unknown<0x8>, buffer<unknown, 0x9>);

	@undocumented
	[30100] Unknown30100(buffer<unknown, 0x9>) -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[30101] Unknown30101(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);

	@undocumented
	[30200] Unknown30200() -> unknown<0x1>;

	@undocumented
	[30300] Unknown30300(buffer<unknown, 0x9>);

	@version(3.0.0+)
	@undocumented
	[30400] Unknown30400(buffer<unknown, 0x5>) -> (unknown<0x8>, buffer<unknown, 0x6>);

	@version(1.0.0)
	@undocumented
	[30900] Unknown30900() -> object<nn::news::detail::ipc::INewlyArrivedEventHolder>;
	@version(1.0.0)
	@undocumented
	[30901] Unknown30901() -> object<nn::news::detail::ipc::INewsDataService>;
	@version(1.0.0)
	@undocumented
	[30902] Unknown30902() -> object<nn::news::detail::ipc::INewsDatabaseService>;

	@undocumented
	[40100] Unknown40100(unknown<0x4>, buffer<unknown, 0x9>);
	@version(3.0.0+)
	@undocumented
	[40101] Unknown40101(unknown<0x8>);

	@undocumented
	[40200] Unknown40200();
	@undocumented
	[40201] Unknown40201();

	@undocumented
	[90100] Unknown90100() -> (unknown<0x8>, buffer<unknown, 0x6>);
}

@version(2.0.0+)
interface nn::news::detail::ipc::IOverwriteEventHolder {
	@undocumented
	[0] Unknown0() -> handle<copy>;
}

@version(2.0.0+)
interface nn::news::detail::ipc::IServiceCreator is news:a, news:c, news:m, news:p, news:v {
	@undocumented
	[0] Unknown0() -> object<nn::news::detail::ipc::INewsService>;
	@undocumented
	[1] Unknown1() -> object<nn::news::detail::ipc::INewlyArrivedEventHolder>;
	@undocumented
	[2] Unknown2() -> object<nn::news::detail::ipc::INewsDataService>;
	@undocumented
	[3] Unknown3() -> object<nn::news::detail::ipc::INewsDatabaseService>;
	@undocumented
	[4] Unknown4() -> object<nn::news::detail::ipc::IOverwriteEventHolder>;
}

interface nn::nfc::am::detail::IAm {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2(unknown<0x8>);
}

interface nn::nfc::am::detail::IAmManager is nfc:am {
	@undocumented
	[0] Unknown0() -> object<nn::nfc::am::detail::IAm>;
}

interface nn::nfc::detail::ISystem {
	[0] Unknown0(u64, u64, pid, buffer<unknown, 0x5>);
	[1] Unknown1();
	[2] Unknown2() -> u32;
	[3] Unknown3() -> u8;

	[100] Unknown100(u8);

	@version(4.0.0+)
	[400] Unknown400(u64, u64, pid, buffer<unknown, 0x5>);
	@version(4.0.0+)
	[401] Unknown401();
	@version(4.0.0+)
	[402] Unknown402() -> u32;
	@version(4.0.0+)
	[403] Unknown403() -> u8;
	@version(4.0.0+)
	[404] Unknown404() -> (u32, buffer<unknown, 0xa>);
	@version(4.0.0+)
	[405] Unknown405(bytes<0x8, 4>) -> u32;
	@version(4.0.0+)
	[406] Unknown406(bytes<0x8, 4>) -> u32;
	@version(4.0.0+)
	[407] Unknown407() -> handle<copy>;
	@version(4.0.0+)
	[408] Unknown408(bytes<0x8, 4>, u32);
	@version(4.0.0+)
	[409] Unknown409(bytes<0x8, 4>);
	@version(4.0.0+)
	[410] Unknown410(bytes<0x8, 4>) -> buffer<unknown<0x58>, 0x1a>;
	@version(4.0.0+)
	[411] Unknown411(bytes<0x8, 4>) -> handle<copy>;
	@version(4.0.0+)
	[412] Unknown412(bytes<0x8, 4>) -> handle<copy>;

	@version(4.0.0+)
	[500] Unknown500(u8);

	@version(4.0.0+)
	[1000] Unknown1000(bytes<0x8, 4>, buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@version(4.0.0+)
	[1001] Unknown1001(bytes<0x8, 4>, buffer<unknown, 0x5>);

	@version(4.0.0+)
	[1300] Unknown1300(bytes<0x8, 4>, u64, buffer<unknown, 0x5>) -> (u32, buffer<unknown, 0x6>);
	@version(4.0.0+)
	[1301] Unknown1301(bytes<0x8, 4>);
	@version(4.0.0+)
	[1302] Unknown1302(bytes<0x8, 4>);
}

interface nn::nfc::detail::ISystemManager is nfc:sys {
	[0] Unknown0() -> object<nn::nfc::detail::ISystem>;
}

interface nn::nfc::detail::IUser {
	[0] Unknown0(u64, u64, pid, buffer<unknown, 0x5>);
	[1] Unknown1();
	[2] Unknown2() -> u32;
	[3] Unknown3() -> u8;

	@version(4.0.0+)
	[400] Unknown400(u64, u64, pid, buffer<unknown, 0x5>);
	@version(4.0.0+)
	[401] Unknown401();
	@version(4.0.0+)
	[402] Unknown402() -> u32;
	@version(4.0.0+)
	[403] Unknown403() -> u8;
	@version(4.0.0+)
	[404] Unknown404() -> (u32, buffer<unknown, 0xa>);
	@version(4.0.0+)
	[405] Unknown405(bytes<0x8, 4>) -> u32;
	@version(4.0.0+)
	[406] Unknown406(bytes<0x8, 4>) -> u32;
	@version(4.0.0+)
	[407] Unknown407() -> handle<copy>;
	@version(4.0.0+)
	[408] Unknown408(bytes<0x8, 4>, u32);
	@version(4.0.0+)
	[409] Unknown409(bytes<0x8, 4>);
	@version(4.0.0+)
	[410] Unknown410(bytes<0x8, 4>) -> buffer<unknown<0x58>, 0x1a>;
	@version(4.0.0+)
	[411] Unknown411(bytes<0x8, 4>) -> handle<copy>;
	@version(4.0.0+)
	[412] Unknown412(bytes<0x8, 4>) -> handle<copy>;

	@version(4.0.0+)
	[1000] Unknown1000(bytes<0x8, 4>, buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@version(4.0.0+)
	[1001] Unknown1001(bytes<0x8, 4>, buffer<unknown, 0x5>);

	@version(4.0.0+)
	[1300] Unknown1300(bytes<0x8, 4>, u64, buffer<unknown, 0x5>) -> (u32, buffer<unknown, 0x6>);
	@version(4.0.0+)
	[1301] Unknown1301(bytes<0x8, 4>);
	@version(4.0.0+)
	[1302] Unknown1302(bytes<0x8, 4>);
}

interface nn::nfc::detail::IUserManager is nfc:user {
	@version(1.0.0-3.0.0)
	[0] Unknown0() -> object<nn::nfc::detail::IUser>;
	@version(4.0.0+)
	[0] Unknown0() -> object<nn::nfc::mifare::detail::IUser>;
}

interface nn::nfc::mifare::detail::IUser {
	[0] Unknown0(u64, u64, pid, buffer<unknown, 0x5>);
	[1] Unknown1();
	[2] Unknown2() -> (u32, buffer<unknown, 0xa>);
	[3] Unknown3(bytes<0x8, 4>);
	[4] Unknown4(bytes<0x8, 4>);
	[5] Unknown5(bytes<0x8, 4>, buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	[6] Unknown6(bytes<0x8, 4>, buffer<unknown, 0x5>);
	[7] Unknown7(bytes<0x8, 4>) -> buffer<unknown<0x58>, 0x1a>;
	[8] Unknown8(bytes<0x8, 4>) -> handle<copy>;
	[9] Unknown9(bytes<0x8, 4>) -> handle<copy>;
	[10] Unknown10() -> u32;
	[11] Unknown11(bytes<0x8, 4>) -> u32;
	[12] Unknown12(bytes<0x8, 4>) -> u32;
	@version(3.0.0+)
	[13] Unknown13() -> handle<copy>;
}

interface nn::nfc::mifare::detail::IUserManager is nfc:mf:u {
	@version(1.0.0-3.0.0)
	[0] Unknown0() -> object<nn::nfc::mifare::detail::IUser>;
	@version(4.0.0+)
	@undocumented
	[0] Unknown0() -> object<nn::nfc::detail::IUser>;
}

interface nn::nfp::detail::IDebug {
	[0] Unknown0(u64, u64, pid, buffer<unknown, 0x5>);
	[1] Unknown1();
	[2] Unknown2() -> (u32, buffer<unknown, 0xa>);
	[3] Unknown3(bytes<0x8, 4>);
	[4] Unknown4(bytes<0x8, 4>);
	[5] Unknown5(bytes<0x8, 4>, u32, u32);
	[6] Unknown6(bytes<0x8, 4>);
	[7] Unknown7(bytes<0x8, 4>, u32);
	[8] Unknown8(bytes<0x8, 4>) -> (u32, buffer<unknown, 0x6>);
	[9] Unknown9(bytes<0x8, 4>, buffer<unknown, 0x5>);
	[10] Unknown10(bytes<0x8, 4>);
	[11] Unknown11(bytes<0x8, 4>);
	[12] Unknown12(bytes<0x8, 4>, u32, buffer<unknown, 0x5>);
	[13] Unknown13(bytes<0x8, 4>) -> buffer<unknown<0x58>, 0x1a>;
	[14] Unknown14(bytes<0x8, 4>) -> buffer<unknown<0x100>, 0x1a>;
	[15] Unknown15(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[16] Unknown16(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[17] Unknown17(bytes<0x8, 4>) -> handle<copy>;
	[18] Unknown18(bytes<0x8, 4>) -> handle<copy>;
	[19] Unknown19() -> u32;
	[20] Unknown20(bytes<0x8, 4>) -> u32;
	[21] Unknown21(bytes<0x8, 4>) -> u32;
	[22] Unknown22(bytes<0x8, 4>) -> u32;
	@version(3.0.0+)
	[23] Unknown23() -> handle<copy>;
	@version(3.0.0+)
	[24] Unknown24(bytes<0x8, 4>, u32, buffer<unknown, 0x5>);

	[100] Unknown100(bytes<0x8, 4>);
	[101] Unknown101(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[102] Unknown102(bytes<0x8, 4>) -> buffer<unknown<0x100>, 0x1a>;
	[103] Unknown103(bytes<0x8, 4>, buffer<unknown<0x100>, 0x19>);
	[104] Unknown104(bytes<0x8, 4>);
	[105] Unknown105(bytes<0x8, 4>);
	[106] Unknown106(bytes<0x8, 4>) -> u8;

	[200] Unknown200(bytes<0x8, 4>) -> buffer<unknown<0x298>, 0x1a>;
	[201] Unknown201(bytes<0x8, 4>, buffer<unknown<0x298>, 0x19>);
	[202] Unknown202(bytes<0x8, 4>);
	[203] Unknown203(bytes<0x8, 4>, u32);
	[204] Unknown204() -> (u32, buffer<unknown, 0x6>);
	[205] Unknown205(buffer<unknown, 0x5>);
	@version(2.0.0+)
	[206] Unknown206(bytes<0x8, 4>, u32, buffer<unknown, 0x5>);

	@version(3.0.0)
	[300] Unknown300(u64, u64, pid, buffer<unknown, 0x5>);
	@version(3.0.0)
	[301] Unknown301();
	@version(3.0.0)
	[302] Unknown302() -> (u32, buffer<unknown, 0xa>);
	@version(3.0.0)
	[303] Unknown303(bytes<0x8, 4>, u32);
	@version(3.0.0)
	[304] Unknown304(bytes<0x8, 4>);
	@version(3.0.0)
	[305] Unknown305(bytes<0x8, 4>, u64, buffer<unknown, 0x5>) -> (u32, buffer<unknown, 0x6>);
	@version(3.0.0)
	[306] Unknown306(bytes<0x8, 4>) -> buffer<unknown<0x58>, 0x1a>;
	@version(3.0.0)
	[307] Unknown307(bytes<0x8, 4>) -> handle<copy>;
	@version(3.0.0)
	[308] Unknown308(bytes<0x8, 4>) -> handle<copy>;
	@version(3.0.0)
	[309] Unknown309() -> u32;
	@version(3.0.0)
	[310] Unknown310(bytes<0x8, 4>) -> u32;
	@version(3.0.0)
	[311] Unknown311(bytes<0x8, 4>) -> u32;
	@version(3.0.0)
	[312] Unknown312(bytes<0x8, 4>);
	@version(3.0.0)
	[313] Unknown313(bytes<0x8, 4>);
	@version(3.0.0)
	[314] Unknown314() -> handle<copy>;
}

interface nn::nfp::detail::IDebugManager is nfp:dbg {
	[0] Unknown0() -> object<nn::nfp::detail::IDebug>;
}

interface nn::nfp::detail::ISystem {
	[0] Unknown0(u64, u64, pid, buffer<unknown, 0x5>);
	[1] Unknown1();
	[2] Unknown2() -> (u32, buffer<unknown, 0xa>);
	[3] Unknown3(bytes<0x8, 4>);
	[4] Unknown4(bytes<0x8, 4>);
	[5] Unknown5(bytes<0x8, 4>, u32, u32);
	[6] Unknown6(bytes<0x8, 4>);

	[10] Unknown10(bytes<0x8, 4>);
	[11] Unknown11(bytes<0x8, 4>);

	[13] Unknown13(bytes<0x8, 4>) -> buffer<unknown<0x58>, 0x1a>;
	[14] Unknown14(bytes<0x8, 4>) -> buffer<unknown<0x100>, 0x1a>;
	[15] Unknown15(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[16] Unknown16(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[17] Unknown17(bytes<0x8, 4>) -> handle<copy>;
	[18] Unknown18(bytes<0x8, 4>) -> handle<copy>;
	[19] Unknown19() -> u32;
	[20] Unknown20(bytes<0x8, 4>) -> u32;
	[21] Unknown21(bytes<0x8, 4>) -> u32;

	@version(3.0.0+)
	[23] Unknown23() -> handle<copy>;

	[100] Unknown100(bytes<0x8, 4>);
	[101] Unknown101(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[102] Unknown102(bytes<0x8, 4>) -> buffer<unknown<0x100>, 0x1a>;
	[103] Unknown103(bytes<0x8, 4>, buffer<unknown<0x100>, 0x19>);
	[104] Unknown104(bytes<0x8, 4>);
	[105] Unknown105(bytes<0x8, 4>);
	[106] Unknown106(bytes<0x8, 4>) -> u8;
}

interface nn::nfp::detail::ISystemManager is nfp:sys {
	[0] Unknown0() -> object<nn::nfp::detail::ISystem>;
}

interface nn::nfp::detail::IUser {
	[0] Unknown0(u64, u64, pid, buffer<unknown, 0x5>);
	[1] Unknown1();
	[2] Unknown2() -> (u32, buffer<unknown, 0xa>);
	[3] Unknown3(bytes<0x8, 4>);
	[4] Unknown4(bytes<0x8, 4>);
	[5] Unknown5(bytes<0x8, 4>, u32, u32);
	[6] Unknown6(bytes<0x8, 4>);
	[7] Unknown7(bytes<0x8, 4>, u32);
	[8] Unknown8(bytes<0x8, 4>) -> (u32, buffer<unknown, 0x6>);
	[9] Unknown9(bytes<0x8, 4>, buffer<unknown, 0x5>);
	[10] Unknown10(bytes<0x8, 4>);
	[11] Unknown11(bytes<0x8, 4>);
	[12] Unknown12(bytes<0x8, 4>, u32, buffer<unknown, 0x5>);
	[13] Unknown13(bytes<0x8, 4>) -> buffer<unknown<0x58>, 0x1a>;
	[14] Unknown14(bytes<0x8, 4>) -> buffer<unknown<0x100>, 0x1a>;
	[15] Unknown15(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[16] Unknown16(bytes<0x8, 4>) -> buffer<unknown<0x40>, 0x1a>;
	[17] Unknown17(bytes<0x8, 4>) -> handle<copy>;
	[18] Unknown18(bytes<0x8, 4>) -> handle<copy>;
	[19] Unknown19() -> u32;
	[20] Unknown20(bytes<0x8, 4>) -> u32;
	[21] Unknown21(bytes<0x8, 4>) -> u32;
	[22] Unknown22(bytes<0x8, 4>) -> u32;
	@version(3.0.0+)
	[23] Unknown23() -> handle<copy>;
	@version(3.0.0+)
	[24] Unknown24(bytes<0x8, 4>, u32, buffer<unknown, 0x5>);
}

interface nn::nfp::detail::IUserManager is nfp:user {
	[0] Unknown0() -> object<nn::nfp::detail::IUser>;
}

interface nn::nifm::detail::IGeneralService {
	[1] GetClientId() -> buffer<nn::nifm::ClientId, 0x1a>;
	[2] CreateScanRequest() -> object<nn::nifm::detail::IScanRequest>;

	[4] CreateRequest(u32) -> object<nn::nifm::detail::IRequest>;
	[5] GetCurrentNetworkProfile() -> buffer<nn::nifm::detail::sf::NetworkProfileData, 0x1a>;
	[6] EnumerateNetworkInterfaces(u32) -> (u32, buffer<nn::nifm::detail::sf::NetworkInterfaceInfo[], 0xa>);
	[7] EnumerateNetworkProfiles(u8) -> (u32, buffer<nn::nifm::detail::sf::NetworkProfileBasicInfo[], 0x6>);
	[8] GetNetworkProfile(nn::util::Uuid) -> buffer<nn::nifm::detail::sf::NetworkProfileData, 0x1a>;
	[9] SetNetworkProfile(buffer<nn::nifm::detail::sf::NetworkProfileData, 0x19>) -> nn::util::Uuid;
	[10] RemoveNetworkProfile(nn::util::Uuid);
	@version(1.0.0-3.0.0)
	[11] GetScanData() -> (u32, buffer<nn::nifm::detail::sf::AccessPointData[], 0x6>);
	@version(4.0.0+)
	[11] GetScanDataOld() -> (u32, buffer<nn::nifm::detail::sf::AccessPointDataOld[], 0x6>);
	[12] GetCurrentIpAddress() -> nn::nifm::IpV4Address;
	@version(1.0.0-3.0.0)
	[13] GetCurrentAccessPoint() -> buffer<nn::nifm::detail::sf::AccessPointData, 0x1a>;
	@version(4.0.0+)
	[13] GetCurrentAccessPointOld() -> buffer<nn::nifm::detail::sf::AccessPointDataOld, 0x1a>;
	[14] CreateTemporaryNetworkProfile(buffer<nn::nifm::detail::sf::NetworkProfileData, 0x19>) -> (nn::util::Uuid, object<nn::nifm::detail::INetworkProfile>);
	[15] GetCurrentIpConfigInfo() -> (nn::nifm::IpAddressSetting, nn::nifm::DnsSetting);
	[16] SetWirelessCommunicationEnabled(b8);
	[17] IsWirelessCommunicationEnabled() -> b8;
	[18] GetInternetConnectionStatus() -> nn::nifm::detail::sf::InternetConnectionStatus;
	[19] SetEthernetCommunicationEnabled(b8);
	[20] IsEthernetCommunicationEnabled() -> b8;
	[21] IsAnyInternetRequestAccepted(buffer<nn::nifm::ClientId, 0x19>) -> b8;
	[22] IsAnyForegroundRequestAccepted() -> b8;
	[23] PutToSleep();
	[24] WakeUp();
	[25] GetSsidListVersion() -> nn::nifm::SsidListVersion;
	[26] SetExclusiveClient(buffer<nn::nifm::ClientId, 0x19>);
	[27] GetDefaultIpSetting() -> buffer<nn::nifm::IpSettingData, 0x1a>;
	[28] SetDefaultIpSetting(buffer<nn::nifm::IpSettingData, 0x19>);
	[29] SetWirelessCommunicationEnabledForTest(b8);
	[30] SetEthernetCommunicationEnabledForTest(b8);
	@version(2.0.0+)
	[31] GetTelemetorySystemEventReadableHandle() -> handle<copy>;
	@version(2.0.0-3.0.0)
	[32] GetTelemetryInfo() -> buffer<nn::nifm::TelemetryInfo, 0x16>;
	@version(4.0.0+)
	[32] GetTelemetryInfo() -> buffer<nn::nifm::TelemetryInfo, 0x16>;
	@version(2.0.0+)
	[33] ConfirmSystemAvailability();
	@version(4.0.0+)
	[34] SetBackgroundRequestEnabled(b8);
	@version(4.0.0+)
	[35] GetScanData() -> (u32, buffer<nn::nifm::detail::sf::AccessPointData[], 0x6>);
	@version(4.0.0+)
	[36] GetCurrentAccessPoint() -> buffer<nn::nifm::detail::sf::AccessPointData, 0x1a>;
	@version(4.0.0+)
	[37] Shutdown();
}

interface nn::nifm::detail::INetworkProfile {
	[0] Update(buffer<nn::nifm::detail::sf::NetworkProfileData, 0x19>) -> nn::util::Uuid;
	@version(2.0.0)
	[1] Persist(nn::util::Uuid) -> nn::util::Uuid;
	@version(3.0.0+)
	[1] PersistOld(nn::util::Uuid) -> nn::util::Uuid;
	@version(3.0.0+)
	[2] Persist() -> nn::util::Uuid;
}

interface nn::nifm::detail::IRequest {
	[0] GetRequestState() -> u32;
	[1] GetResult();
	[2] GetSystemEventReadableHandles() -> (handle<copy>, handle<copy>);
	[3] Cancel();
	[4] Submit();
	@version(1.0.0-2.0.0)
	[5] SetRequirement(nn::nifm::Requirement);
	@version(3.0.0+)
	[5] SetRequirement(nn::nifm::Requirement);
	[6] SetRequirementPreset(u32);

	[8] SetPriority(u8);
	[9] SetNetworkProfileId(nn::util::Uuid);
	[10] SetRejectable(b8);
	[11] SetConnectionConfirmationOption(i8);
	[12] SetPersistent(b8);
	[13] SetInstant(b8);
	[14] SetSustainable(b8, u8);
	[15] SetRawPriority(u8);
	[16] SetGreedy(b8);
	[17] SetSharable(b8);
	[18] SetRequirementByRevision(u32);
	@version(1.0.0-2.0.0)
	[19] GetRequirement() -> nn::nifm::Requirement;
	@version(3.0.0+)
	[19] GetRequirement() -> nn::nifm::Requirement;
	[20] GetRevision() -> u32;
	[21] GetAppletInfo(u32) -> (u32, u32, u32, buffer<bytes, 0x6>);
	@version(1.0.0)
	[22] GetHotspotAuthInfo() -> (unknown<0x4>, buffer<unknown, 0x16>);
	@version(2.0.0+)
	[22] GetAdditionalInfo() -> (u32, buffer<nn::nifm::AdditionalInfo, 0x16>);
	@version(3.0.0+)
	[23] SetKeptInSleep(b8);
	@version(3.0.0+)
	[24] RegisterSocketDescriptor(u32);
	@version(3.0.0+)
	[25] UnregisterSocketDescriptor(u32);
}

interface nn::nifm::detail::IScanRequest {
	[0] Submit();
	[1] IsProcessing() -> b8;
	[2] GetResult();
	[3] GetSystemEventReadableHandle() -> handle<copy>;
}

interface nn::nifm::detail::IStaticService is nifm:u, nifm:a, nifm:s {
	@version(1.0.0-2.0.0)
	[4] CreateGeneralService() -> object<nn::nifm::detail::IGeneralService>;
	@version(3.0.0+)
	[4] CreateGeneralServiceOld() -> object<nn::nifm::detail::IGeneralService>;
	@version(3.0.0+)
	[5] CreateGeneralService(u64, pid) -> object<nn::nifm::detail::IGeneralService>;
}

@version(2.0.0+)
interface nn::nim::detail::IAsyncData {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> unknown<0x8>;
	@undocumented
	[3] Unknown3(unknown<0x8>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[4] Unknown4() -> unknown<0x28>;
	@version(4.0.0+)
	@undocumented
	[5] Unknown5() -> buffer<unknown, 0x16>;
}

@version(2.0.0+)
interface nn::nim::detail::IAsyncProgressResult {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x16>;
}

interface nn::nim::detail::IAsyncResult {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@version(4.0.0+)
	@undocumented
	[2] Unknown2() -> buffer<unknown, 0x16>;
}

interface nn::nim::detail::IAsyncValue {
	@undocumented
	[0] Unknown0() -> unknown<0x8>;
	@undocumented
	[1] Unknown1() -> buffer<unknown, 0x6>;
	@undocumented
	[2] Unknown2();
	@version(4.0.0+)
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x16>;
}

interface nn::nim::detail::INetworkInstallManager is nim {
	@undocumented
	[0] Unknown0(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[1] Unknown1(unknown<0x10>);
	@undocumented
	[2] Unknown2() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[3] Unknown3(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(1.0.0-2.0.0)
	@undocumented
	[4] Unknown4(unknown<0x10>) -> unknown<0x28>;
	@version(3.0.0+)
	@undocumented
	[4] Unknown4(unknown<0x10>) -> unknown<0x38>;
	@undocumented
	[5] Unknown5(unknown<0x10>);
	@undocumented
	[6] Unknown6(unknown<0x10>, buffer<unknown, 0x5>) -> unknown<0x10>;
	@undocumented
	[7] Unknown7(unknown<0x10>);
	@undocumented
	[8] Unknown8() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[9] Unknown9(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(1.0.0)
	@undocumented
	[10] Unknown10(unknown<0x10>) -> unknown<0x20>;
	@version(2.0.0)
	@undocumented
	[10] Unknown10(unknown<0x10>) -> unknown<0x28>;
	@version(3.0.0+)
	@undocumented
	[10] Unknown10(unknown<0x10>) -> unknown<0x40>;
	@undocumented
	[11] Unknown11(unknown<0x10>);
	@undocumented
	[12] Unknown12() -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(1.0.0)
	@undocumented
	[13] Unknown13(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@undocumented
	[14] Unknown14(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[15] Unknown15(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[15] Unknown15(unknown<0x14>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[16] Unknown16(buffer<unknown, 0x5>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(2.0.0+)
	@undocumented
	[16] Unknown16(unknown<0x8>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(1.0.0)
	@undocumented
	[17] Unknown17(unknown<0x10>);
	@version(2.0.0+)
	@undocumented
	[17] Unknown17(unknown<0x18>);
	@undocumented
	[18] Unknown18(unknown<0x10>, buffer<unknown, 0x5>);
	@undocumented
	[19] Unknown19(unknown<0x18>) -> buffer<unknown, 0x16>;
	@undocumented
	[20] Unknown20(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[21] Unknown21(unknown<0x10>) -> unknown<0x1>;
	@undocumented
	[22] Unknown22() -> unknown<0x10>;
	@version(2.0.0+)
	@undocumented
	[23] Unknown23() -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(2.0.0+)
	@undocumented
	[24] Unknown24(unknown<0x8>, buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(2.0.0+)
	@undocumented
	[25] Unknown25(unknown<0x10>, buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(2.0.0+)
	@undocumented
	[26] Unknown26(unknown<0x28>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(2.0.0+)
	@undocumented
	[27] Unknown27(unknown<0x28>) -> (handle<copy>, object<nn::nim::detail::IAsyncData>);
	@version(2.0.0+)
	@undocumented
	[28] Unknown28(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(2.0.0+)
	@undocumented
	[29] Unknown29(unknown<0x8>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(2.0.0+)
	@undocumented
	[30] Unknown30(unknown<0x28>) -> (handle<copy>, object<nn::nim::detail::IAsyncData>);
	@version(2.0.0+)
	@undocumented
	[31] Unknown31(unknown<0x20>, buffer<unknown, 0x5>) -> unknown<0x10>;
	@version(2.0.0+)
	@undocumented
	[32] Unknown32(unknown<0x10>);
	@version(2.0.0+)
	@undocumented
	[33] Unknown33(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[34] Unknown34(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(2.0.0)
	@undocumented
	[35] Unknown35(unknown<0x10>) -> unknown<0x20>;
	@version(3.0.0+)
	@undocumented
	[35] Unknown35(unknown<0x10>) -> unknown<0x30>;
	@version(2.0.0+)
	@undocumented
	[36] Unknown36(unknown<0x14>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[37] Unknown37(unknown<0x10>);
	@version(2.0.0+)
	@undocumented
	[38] Unknown38(unknown<0x10>) -> unknown<0x8>;
	@version(2.0.0+)
	@undocumented
	[39] Unknown39();
	@version(2.0.0+)
	@undocumented
	[40] Unknown40() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[41] Unknown41(unknown<0x10>);
	@version(3.0.0+)
	@undocumented
	[42] Unknown42(unknown<0x10>) -> unknown<0x10>;
	@version(3.0.0+)
	@undocumented
	[43] Unknown43() -> unknown<0x10>;
	@version(3.0.0+)
	@undocumented
	[44] Unknown44(unknown<0x10>) -> unknown<0x1>;
	@version(3.0.0+)
	@undocumented
	[45] Unknown45(unknown<0x28>) -> unknown<0x8>;
	@version(3.0.0+)
	@undocumented
	[46] Unknown46();
	@version(4.0.0+)
	@undocumented
	[47] Unknown47(unknown<0x10>) -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[48] Unknown48(unknown<0x10>, buffer<unknown, 0x5>);
	@version(4.0.0+)
	@undocumented
	[49] Unknown49(unknown<0x14>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[50] Unknown50(unknown<0x14>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[51] Unknown51(unknown<0x10>) -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[52] Unknown52(unknown<0x10>) -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[53] Unknown53(unknown<0x18>, buffer<unknown, 0x5>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[54] Unknown54(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[55] Unknown55() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[56] Unknown56(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[57] Unknown57(unknown<0x10>) -> unknown<0x38>;
	@version(4.0.0+)
	@undocumented
	[58] Unknown58(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[59] Unknown59(unknown<0x14>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[60] Unknown60(unknown<0x10>, buffer<unknown, 0x5>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[61] Unknown61(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[62] Unknown62(unknown<0x10>) -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[63] Unknown63(unknown<0x10>) -> unknown<0x20>;
	@version(4.0.0+)
	@undocumented
	[64] Unknown64(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[65] Unknown65(unknown<0x10>) -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[66] Unknown66(unknown<0x10>) -> unknown<0x8>;
	@version(4.0.0+)
	@undocumented
	[67] Unknown67(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[68] Unknown68(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[69] Unknown69(unknown<0x20>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[70] Unknown70(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[71] Unknown71() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[72] Unknown72(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[73] Unknown73(unknown<0x10>) -> unknown<0x38>;
	@version(4.0.0+)
	@undocumented
	[74] Unknown74(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[75] Unknown75(unknown<0x10>) -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[76] Unknown76(unknown<0x18>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[77] Unknown77(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[78] Unknown78(unknown<0x10>) -> unknown<0x20>;
	@version(4.0.0+)
	@undocumented
	[79] Unknown79(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[80] Unknown80(unknown<0x10>) -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[81] Unknown81() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[82] Unknown82(unknown<0x18>) -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[83] Unknown83(unknown<0x11>) -> unknown<0x8>;
}

@version(2.0.0+)
interface nn::nim::detail::IShopServiceManager is nim:shp {
	@undocumented
	[0] Unknown0() -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@version(3.0.0+)
	@undocumented
	[1] Unknown1(unknown<0x8>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);

	@undocumented
	[100] Unknown100() -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@undocumented
	[101] Unknown101() -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@undocumented
	[102] Unknown102() -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@undocumented
	[103] Unknown103() -> unknown<0x20>;
	@undocumented
	[104] Unknown104() -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
	@undocumented
	[105] Unknown105() -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(3.0.0+)
	@undocumented
	[106] Unknown106() -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(3.0.0+)
	@undocumented
	[107] Unknown107(unknown<0x8>) -> unknown<0x1>;

	@undocumented
	[200] Unknown200(unknown<0x28>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);

	@undocumented
	[300] Unknown300(unknown<0x8>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@undocumented
	[301] Unknown301(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@undocumented
	[302] Unknown302(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@undocumented
	[303] Unknown303(unknown<0x10>) -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[304] Unknown304() -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[305] Unknown305(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[306] Unknown306(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);

	@undocumented
	[400] Unknown400(unknown<0x4>) -> unknown<0x10>;

	@undocumented
	[500] Unknown500() -> (handle<copy>, object<nn::nim::detail::IAsyncProgressResult>);
	@undocumented
	[501] Unknown501(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[502] Unknown502(unknown<0x10>) -> (handle<copy>, object<nn::nim::detail::IAsyncValue>);
}

interface nn::npns::INpnsSystem is npns:s {
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2(unknown<0x8>);
	@undocumented
	[3] Unknown3(unknown<0x2>) -> buffer<unknown, 0x6>;
	@undocumented
	[4] Unknown4(unknown<0x2>) -> buffer<unknown, 0x6>;
	@undocumented
	[5] Unknown5() -> handle<copy>;
	@undocumented
	[6] Unknown6();
	@undocumented
	[7] Unknown7() -> handle<copy>;

	@undocumented
	[11] Unknown11(buffer<unknown, 0x9>);
	@undocumented
	[12] Unknown12(buffer<unknown, 0x9>);
	@undocumented
	[13] Unknown13(buffer<unknown, 0x9>) -> unknown<0x1>;

	@undocumented
	[21] Unknown21(unknown<0x10>) -> unknown<0x28>;
	@undocumented
	[22] Unknown22(unknown<0x18>) -> unknown<0x28>;
	@undocumented
	[23] Unknown23(unknown<0x10>);
	@undocumented
	[24] Unknown24(unknown<0x18>);
	@undocumented
	[25] Unknown25(unknown<0x28>) -> unknown<0x1>;

	@undocumented
	[31] Unknown31(unknown<0x10>);
	@version(2.0.0+)
	@undocumented
	[32] Unknown32(unknown<0x10>);

	@undocumented
	[101] Unknown101();
	@undocumented
	[102] Unknown102();
	@undocumented
	[103] Unknown103() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[104] Unknown104() -> buffer<unknown, 0x6>;
	@version(3.0.0+)
	@undocumented
	[105] Unknown105() -> handle<copy>;

	@undocumented
	[111] Unknown111() -> buffer<unknown, 0xa>;
	@undocumented
	[112] Unknown112();
	@undocumented
	[113] Unknown113();
	@undocumented
	[114] Unknown114(buffer<unknown, 0x9>, buffer<unknown, 0x9>);
	@undocumented
	[115] Unknown115() -> (buffer<unknown, 0xa>, buffer<unknown, 0xa>);

	@version(3.0.0+)
	@undocumented
	[201] Unknown201(unknown<0x10>);
	@version(3.0.0+)
	@undocumented
	[202] Unknown202(unknown<0x4>);
}

interface nn::npns::INpnsUser is npns:u {
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2(unknown<0x8>);
	@undocumented
	[3] Unknown3(unknown<0x2>) -> buffer<unknown, 0x6>;
	@undocumented
	[4] Unknown4(unknown<0x2>) -> buffer<unknown, 0x6>;
	@undocumented
	[5] Unknown5() -> handle<copy>;

	@undocumented
	[7] Unknown7() -> handle<copy>;

	@undocumented
	[21] Unknown21(unknown<0x10>) -> unknown<0x28>;

	@undocumented
	[23] Unknown23(unknown<0x10>);

	@undocumented
	[25] Unknown25(unknown<0x28>) -> unknown<0x1>;

	@undocumented
	[101] Unknown101();
	@undocumented
	[102] Unknown102();
	@undocumented
	[103] Unknown103() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[104] Unknown104() -> buffer<unknown, 0x6>;

	@undocumented
	[111] Unknown111() -> buffer<unknown, 0xa>;
}

@version(3.0.0+)
interface nn::ns::detail::IAccountProxyInterface {
	@undocumented
	[0] Unknown0(unknown<0x21>, buffer<unknown, 0x5>);
}

interface nn::ns::detail::IApplicationManagerInterface is ns:am {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[1] Unknown1() -> unknown<0x8>;
	@undocumented
	[2] Unknown2() -> handle<copy>;
	@undocumented
	[3] Unknown3(buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@undocumented
	[4] Unknown4(unknown<0x8>);
	@undocumented
	[5] Unknown5(unknown<0x8>);
	@undocumented
	[6] Unknown6() -> unknown<0x1>;
	@undocumented
	[7] Unknown7();
	@undocumented
	[8] Unknown8(unknown<0x10>) -> unknown<0x1>;
	@undocumented
	[9] Unknown9(unknown<0x10>);

	@undocumented
	[11] Unknown11(unknown<0x8>) -> unknown<0x80>;

	@undocumented
	[16] Unknown16(unknown<0x10>, buffer<unknown, 0x5>);
	@undocumented
	[17] Unknown17(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[18] Unknown18(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[19] Unknown19(unknown<0x8>) -> unknown<0x8>;

	@undocumented
	[21] Unknown21(unknown<0x10>) -> buffer<unknown, 0x16>;
	@undocumented
	[22] Unknown22(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[23] Unknown23(unknown<0x10>);

	@undocumented
	[26] Unknown26(unknown<0x10>);
	@version(1.0.0)
	@undocumented
	[27] Unknown27(buffer<unknown, 0x5>);
	@version(2.0.0+)
	@undocumented
	[27] Unknown27(unknown<0x8>);

	@undocumented
	[30] Unknown30(unknown<0x8>) -> (handle<copy>, object<nn::ns::detail::IAsyncValue>);
	@version(1.0.0-3.0.0)
	@undocumented
	[31] Unknown31(unknown<0x10>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@undocumented
	[32] Unknown32(unknown<0x8>);
	@undocumented
	[33] Unknown33(unknown<0x8>);
	@version(1.0.0)
	@undocumented
	[34] Unknown34();
	@undocumented
	[35] Unknown35(buffer<unknown, 0x5>);
	@undocumented
	[36] Unknown36(unknown<0x10>);
	@undocumented
	[37] Unknown37() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[38] Unknown38(unknown<0x8>);
	@undocumented
	[39] Unknown39(unknown<0x8>);
	@undocumented
	[40] Unknown40(unknown<0x8>, buffer<unknown, 0x15>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[41] Unknown41(unknown<0x8>) -> unknown<0x8>;
	@version(2.0.0+)
	@undocumented
	[41] Unknown41(unknown<0x8>) -> unknown<0x10>;
	@undocumented
	[42] Unknown42();
	@undocumented
	[43] Unknown43();
	@undocumented
	[44] Unknown44() -> handle<copy>;
	@undocumented
	[45] Unknown45() -> handle<copy>;
	@undocumented
	[46] Unknown46() -> unknown<0x10>;
	@undocumented
	[47] Unknown47(unknown<0x1>) -> unknown<0x8>;
	@undocumented
	[48] Unknown48(unknown<0x1>) -> unknown<0x8>;
	@undocumented
	[49] Unknown49() -> handle<copy>;

	@undocumented
	[52] Unknown52() -> handle<copy>;
	@undocumented
	[53] Unknown53(unknown<0x8>);
	@undocumented
	[54] Unknown54(unknown<0x8>);
	@undocumented
	[55] Unknown55(unknown<0x4>) -> unknown<0x1>;
	@undocumented
	[56] Unknown56(unknown<0x10>);
	@undocumented
	[57] Unknown57(unknown<0x8>);
	@undocumented
	[58] Unknown58();
	@undocumented
	[59] Unknown59(unknown<0x1>) -> unknown<0x8>;
	@undocumented
	[60] Unknown60(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[61] Unknown61() -> unknown<0x10>;
	@undocumented
	[62] Unknown62() -> object<nn::ns::detail::IGameCardStopper>;
	@undocumented
	[63] Unknown63(unknown<0x8>) -> unknown<0x1>;
	@version(2.0.0+)
	@undocumented
	[64] Unknown64(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[65] Unknown65() -> object<nn::ns::detail::IRequestServerStopper>;
	@version(3.0.0+)
	@undocumented
	[66] Unknown66() -> unknown<0x10>;
	@version(3.0.0+)
	@undocumented
	[67] Unknown67(unknown<0x8>);
	@version(3.0.0+)
	@undocumented
	[68] Unknown68(unknown<0x8>);
	@version(3.0.0+)
	@undocumented
	[69] Unknown69(unknown<0x8>) -> unknown<0x10>;
	@version(3.0.0+)
	@undocumented
	[70] Unknown70();
	@version(3.0.0+)
	@undocumented
	[71] Unknown71(unknown<0x1>) -> unknown<0x10>;

	@version(3.0.0+)
	@undocumented
	[80] Unknown80(unknown<0x10>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(3.0.0)
	@undocumented
	[81] Unknown81(unknown<0x8>, buffer<unknown, 0x5>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[81] Unknown81(unknown<0x10>, buffer<unknown, 0x5>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(3.0.0+)
	@undocumented
	[82] Unknown82(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[83] Unknown83(unknown<0x8>);
	@version(4.0.0+)
	@undocumented
	[84] Unknown84() -> handle<copy>;
	@version(4.0.0+)
	@undocumented
	[85] Unknown85(unknown<0x8>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[86] Unknown86(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[87] Unknown87() -> unknown<0x1>;

	@version(4.0.0+)
	@undocumented
	[90] Unknown90(unknown<0x8>);

	@undocumented
	[100] Unknown100();
	@undocumented
	[101] Unknown101();
	@version(2.0.0+)
	@undocumented
	[102] Unknown102();

	@undocumented
	[200] Unknown200(unknown<0x10>) -> unknown<0x10>;
	@undocumented
	[201] Unknown201(unknown<0x10>) -> object<nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll>;

	@undocumented
	[210] Unknown210(unknown<0x18>);

	@undocumented
	[220] Unknown220(unknown<0x10>);

	@undocumented
	[300] Unknown300() -> handle<copy>;
	@undocumented
	[301] Unknown301() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[302] Unknown302(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[303] Unknown303(unknown<0x8>);
	@undocumented
	[304] Unknown304() -> unknown<0x8>;
	@undocumented
	[305] Unknown305(unknown<0x8>);
	@undocumented
	[306] Unknown306() -> unknown<0x8>;
	@undocumented
	[307] Unknown307(unknown<0x8>);

	@undocumented
	[400] Unknown400(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[401] Unknown401();
	@undocumented
	[402] Unknown402(unknown<0x8>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@undocumented
	[403] Unknown403() -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[404] Unknown404(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[405] Unknown405() -> (unknown<0x4>, buffer<unknown, 0x6>);

	@version(2.0.0+)
	@undocumented
	[502] Unknown502(unknown<0x8>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(2.0.0+)
	@undocumented
	[503] Unknown503(unknown<0x18>) -> (handle<copy>, object<nn::ns::detail::IAsyncValue>);
	@version(2.0.0+)
	@undocumented
	[504] Unknown504(unknown<0x20>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(3.0.0+)
	@undocumented
	[505] Unknown505() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[506] Unknown506() -> unknown<0x1>;
	@version(3.0.0+)
	@undocumented
	[507] Unknown507();
	@version(3.0.0+)
	@undocumented
	[508] Unknown508();

	@version(2.0.0+)
	@undocumented
	[600] Unknown600(unknown<0x8>) -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[601] Unknown601(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[602] Unknown602(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[603] Unknown603(unknown<0x10>) -> unknown<0x10>;
	@version(2.0.0+)
	@undocumented
	[604] Unknown604(unknown<0x10>);
	@version(2.0.0+)
	@undocumented
	[605] Unknown605(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[606] Unknown606(unknown<0x10>) -> unknown<0x1>;

	@version(2.0.0+)
	@undocumented
	[700] Unknown700(buffer<unknown, 0x5>);
	@version(2.0.0+)
	@undocumented
	[701] Unknown701();
	@version(2.0.0+)
	@undocumented
	[702] Unknown702();
	@version(2.0.0+)
	@undocumented
	[703] Unknown703() -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(2.0.0+)
	@undocumented
	[704] Unknown704() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[705] Unknown705() -> (handle<copy>, object<nn::ns::detail::IAsyncValue>);

	@version(2.0.0+)
	@undocumented
	[800] Unknown800();
	@version(2.0.0+)
	@undocumented
	[801] Unknown801() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[802] Unknown802() -> (handle<copy>, object<nn::ns::detail::IAsyncValue>);

	@version(2.0.0+)
	@undocumented
	[900] Unknown900(unknown<0x8>) -> unknown<0x18>;
	@version(2.0.0+)
	@undocumented
	[901] Unknown901(unknown<0x8>) -> buffer<unknown, 0x16>;
	@version(2.0.0+)
	@undocumented
	[902] Unknown902(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[903] Unknown903(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[904] Unknown904(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[905] Unknown905(unknown<0x10>);
	@version(2.0.0+)
	@undocumented
	[906] Unknown906(unknown<0x8>) -> unknown<0x8>;
	@version(2.0.0+)
	@undocumented
	[907] Unknown907(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[908] Unknown908(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[909] Unknown909(unknown<0x8>);

	@version(2.0.0+)
	@undocumented
	[1000] Unknown1000(unknown<0x10>, handle<copy>) -> (handle<copy>, object<nn::ns::detail::IProgressAsyncResult>);
	@version(2.0.0+)
	@undocumented
	[1001] Unknown1001(unknown<0x10>);
	@version(3.0.0+)
	@undocumented
	[1002] Unknown1002(unknown<0x8>) -> (handle<copy>, object<nn::ns::detail::IProgressAsyncResult>);

	@version(2.0.0+)
	@undocumented
	[1200] Unknown1200() -> unknown<0x1>;

	@version(2.0.0+)
	@undocumented
	[1300] Unknown1300(unknown<0x8>) -> unknown<0x1>;
	@version(2.0.0+)
	@undocumented
	[1301] Unknown1301(unknown<0x10>);
	@version(2.0.0+)
	@undocumented
	[1302] Unknown1302(unknown<0x8>);
	@version(3.0.0+)
	@undocumented
	[1303] Unknown1303(unknown<0x8>);
	@version(3.0.0+)
	@undocumented
	[1304] Unknown1304(unknown<0x10>);

	@version(2.0.0+)
	@undocumented
	[1400] Unknown1400();

	@version(2.0.0+)
	@undocumented
	[1500] Unknown1500();
	@version(2.0.0+)
	@undocumented
	[1501] Unknown1501() -> unknown<0x1>;
	@version(2.0.0+)
	@undocumented
	[1502] Unknown1502();
	@version(2.0.0)
	@undocumented
	[1503] Unknown1503();
	@version(3.0.0+)
	@undocumented
	[1504] Unknown1504();
	@version(3.0.0+)
	@undocumented
	[1505] Unknown1505();

	@version(2.0.0+)
	@undocumented
	[1600] Unknown1600() -> unknown<0x20>;
	@version(3.0.0+)
	@undocumented
	[1601] Unknown1601();

	@version(2.0.0+)
	@undocumented
	[1700] Unknown1700(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[1701] Unknown1701(buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@version(3.0.0+)
	@undocumented
	[1702] Unknown1702(unknown<0x8>) -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[1703] Unknown1703(unknown<0x8>) -> buffer<unknown, 0x16>;

	@version(2.0.0+)
	@undocumented
	[1800] Unknown1800() -> unknown<0x1>;
	@version(2.0.0+)
	@undocumented
	[1801] Unknown1801() -> unknown<0x8>;
	@version(2.0.0+)
	@undocumented
	[1802] Unknown1802() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[1803] Unknown1803() -> (unknown<0x4>, buffer<unknown, 0x6>);

	@version(3.0.0+)
	@undocumented
	[1900] Unknown1900(unknown<0x4>) -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[1901] Unknown1901(unknown<0x8>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);

	@version(4.0.0+)
	@undocumented
	[2000] Unknown2000() -> buffer<unknown, 0x16>;
	@version(4.0.0+)
	@undocumented
	[2001] Unknown2001(buffer<unknown, 0x15>, buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[2002] Unknown2002(buffer<unknown, 0x15>);
	@version(4.0.0+)
	@undocumented
	[2003] Unknown2003(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[2004] Unknown2004(buffer<unknown, 0x5>) -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[2005] Unknown2005(buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[2006] Unknown2006(buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[2007] Unknown2007(unknown<0x4>, buffer<unknown, 0x5>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[2008] Unknown2008(buffer<unknown, 0x15>, buffer<unknown, 0x5>) -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[2009] Unknown2009(buffer<unknown, 0x5>) -> unknown<0x8>;
	@version(4.0.0+)
	@undocumented
	[2010] Unknown2010(unknown<0x10>, buffer<unknown, 0x5>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[2011] Unknown2011(unknown<0x8>);
	@version(4.0.0+)
	@undocumented
	[2012] Unknown2012(unknown<0x8>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[2013] Unknown2013(unknown<0x10>, buffer<unknown, 0x5>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[2014] Unknown2014(unknown<0x8>) -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[2015] Unknown2015(buffer<unknown, 0x15>, buffer<unknown, 0x15>) -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[2016] Unknown2016(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[2017] Unknown2017(unknown<0x8>, buffer<unknown, 0x5>);
}

@version(4.0.0+)
interface nn::ns::detail::IApplicationVersionInterface {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> unknown<0x4>;
	@undocumented
	[1] Unknown1(unknown<0x10>);

	@undocumented
	[35] Unknown35(buffer<unknown, 0x5>);
	@undocumented
	[36] Unknown36(unknown<0x10>);
	@undocumented
	[37] Unknown37() -> (unknown<0x4>, buffer<unknown, 0x6>);

	@undocumented
	[800] Unknown800();
	@undocumented
	[801] Unknown801() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[802] Unknown802() -> (handle<copy>, object<nn::ns::detail::IAsyncValue>);

	@undocumented
	[1000] Unknown1000();
}

interface nn::ns::detail::IAsyncResult {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@version(4.0.0+)
	@undocumented
	[2] Unknown2() -> buffer<unknown, 0x16>;
}

interface nn::ns::detail::IAsyncValue {
	@undocumented
	[0] Unknown0() -> unknown<0x8>;
	@undocumented
	[1] Unknown1() -> buffer<unknown, 0x6>;
	@undocumented
	[2] Unknown2();
	@version(4.0.0+)
	@undocumented
	[3] Unknown3() -> buffer<unknown, 0x16>;
}

@version(3.0.0+)
interface nn::ns::detail::IContentManagementInterface {
	@undocumented
	[11] Unknown11(unknown<0x8>) -> unknown<0x80>;

	@undocumented
	[43] Unknown43();

	@undocumented
	[47] Unknown47(unknown<0x1>) -> unknown<0x8>;
	@undocumented
	[48] Unknown48(unknown<0x1>) -> unknown<0x8>;

	@undocumented
	[600] Unknown600(unknown<0x8>) -> unknown<0x4>;
	@undocumented
	[601] Unknown601(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);

	@undocumented
	[605] Unknown605(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);

	@undocumented
	[607] Unknown607() -> unknown<0x1>;
}

interface nn::ns::detail::IDevelopInterface is ns:dev {
	@undocumented
	[0] Unknown0(unknown<0x18>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(unknown<0x8>);
	@undocumented
	[2] Unknown2(unknown<0x8>);

	@undocumented
	[4] Unknown4() -> handle<copy>;
	@undocumented
	[5] Unknown5() -> unknown<0x10>;
	@undocumented
	[6] Unknown6();
	@undocumented
	[7] Unknown7(buffer<unknown, 0x5>) -> unknown<0x10>;
	@undocumented
	[8] Unknown8(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[9] Unknown9(unknown<0x10>) -> unknown<0x8>;
}

@version(3.0.0+)
interface nn::ns::detail::IDocumentInterface {
	@undocumented
	[21] Unknown21(unknown<0x10>) -> buffer<unknown, 0x16>;

	@undocumented
	[23] Unknown23(unknown<0x10>);
}

@version(3.0.0+)
interface nn::ns::detail::IDownloadTaskInterface {
	@undocumented
	[701] Unknown701();
	@undocumented
	[702] Unknown702();
	@undocumented
	[703] Unknown703() -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@undocumented
	[704] Unknown704() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[705] Unknown705() -> (handle<copy>, object<nn::ns::detail::IAsyncValue>);
	@version(4.0.0+)
	@undocumented
	[706] Unknown706();
	@version(4.0.0+)
	@undocumented
	[707] Unknown707();
	@version(4.0.0+)
	@undocumented
	[708] Unknown708();
	@version(4.0.0+)
	@undocumented
	[709] Unknown709();
}

@version(4.0.0+)
interface nn::ns::detail::IECommerceInterface {
	@undocumented
	[0] Unknown0(unknown<0x10>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
}

@version(3.0.0+)
interface nn::ns::detail::IFactoryResetInterface {
	@undocumented
	[100] Unknown100();
	@undocumented
	[101] Unknown101();
	@undocumented
	[102] Unknown102();
}

@version(1.0.0-3.0.0)
interface nn::ns::detail::IGameCardStopper {
}

@version(2.0.0+)
interface nn::ns::detail::IProgressAsyncResult {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> buffer<unknown, 0x6>;
	@undocumented
	[3] Unknown3();
	@version(4.0.0+)
	@undocumented
	[4] Unknown4() -> buffer<unknown, 0x16>;
}

interface nn::ns::detail::IProgressMonitorForDeleteUserSaveDataAll {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1() -> unknown<0x1>;
	@undocumented
	[2] Unknown2();

	@undocumented
	[10] Unknown10() -> unknown<0x28>;
}

@version(2.0.0-3.0.0)
interface nn::ns::detail::IRequestServerStopper {
}

@version(3.0.0+)
interface nn::ns::detail::IServiceGetterInterface is ns:am2, ns:ec, ns:rid, ns:rt, ns:web {
	@version(4.0.0+)
	@undocumented
	[7992] Unknown7992() -> object<nn::ns::detail::IECommerceInterface>;
	@version(4.0.0+)
	@undocumented
	[7993] Unknown7993() -> object<nn::ns::detail::IApplicationVersionInterface>;
	@undocumented
	[7994] Unknown7994() -> object<nn::ns::detail::IFactoryResetInterface>;
	@undocumented
	[7995] Unknown7995() -> object<nn::ns::detail::IAccountProxyInterface>;
	@undocumented
	[7996] Unknown7996() -> object<nn::ns::detail::IApplicationManagerInterface>;
	@undocumented
	[7997] Unknown7997() -> object<nn::ns::detail::IDownloadTaskInterface>;
	@undocumented
	[7998] Unknown7998() -> object<nn::ns::detail::IContentManagementInterface>;
	@undocumented
	[7999] Unknown7999() -> object<nn::ns::detail::IDocumentInterface>;
}

interface nn::ns::detail::ISystemUpdateControl {
	@undocumented
	[0] Unknown0() -> unknown<0x1>;
	@undocumented
	[1] Unknown1() -> (handle<copy>, object<nn::ns::detail::IAsyncValue>);
	@undocumented
	[2] Unknown2() -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@undocumented
	[3] Unknown3() -> unknown<0x10>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5() -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@undocumented
	[6] Unknown6() -> unknown<0x10>;
	@undocumented
	[7] Unknown7() -> unknown<0x1>;
	@undocumented
	[8] Unknown8();
	@undocumented
	[9] Unknown9(buffer<unknown, 0x15>) -> unknown<0x8>;
	@undocumented
	[10] Unknown10(buffer<unknown, 0x15>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@undocumented
	[11] Unknown11(unknown<0x8>, handle<copy>);
	@undocumented
	[12] Unknown12(buffer<unknown, 0x15>) -> unknown<0x8>;
	@undocumented
	[13] Unknown13(buffer<unknown, 0x15>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[14] Unknown14(unknown<0x8>, handle<copy>);
	@version(4.0.0+)
	@undocumented
	[15] Unknown15() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[16] Unknown16(unknown<0x8>, buffer<unknown, 0x15>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[17] Unknown17() -> unknown<0x10>;
	@version(4.0.0+)
	@undocumented
	[18] Unknown18();
	@version(4.0.0+)
	@undocumented
	[19] Unknown19(buffer<unknown, 0x15>) -> unknown<0x8>;
	@version(4.0.0+)
	@undocumented
	[20] Unknown20(buffer<unknown, 0x15>) -> (unknown<0x8>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[21] Unknown21();
}

interface nn::ns::detail::ISystemUpdateInterface is ns:su {
	@undocumented
	[0] Unknown0() -> unknown<0x1>;
	@undocumented
	[1] Unknown1() -> object<nn::ns::detail::ISystemUpdateControl>;
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3();
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5(unknown<0x10>);
	@undocumented
	[6] Unknown6();
	@version(1.0.0)
	@undocumented
	[7] Unknown7() -> handle<copy>;
	@version(1.0.0)
	@undocumented
	[8] Unknown8();
	@version(2.0.0+)
	@undocumented
	[9] Unknown9() -> handle<copy>;
	@version(2.0.0+)
	@undocumented
	[10] Unknown10();
	@version(3.0.0+)
	@undocumented
	[11] Unknown11();
	@version(3.0.0)
	@undocumented
	[12] Unknown12() -> handle<copy>;
	@version(3.0.0)
	@undocumented
	[13] Unknown13();
	@version(3.0.0)
	@undocumented
	[14] Unknown14() -> handle<copy>;
	@version(3.0.0)
	@undocumented
	[15] Unknown15();
	@version(4.0.0+)
	@undocumented
	[16] Unknown16();
	@version(4.0.0+)
	@undocumented
	[17] Unknown17(unknown<0x8>, buffer<unknown, 0x15>) -> (handle<copy>, object<nn::ns::detail::IAsyncResult>);
	@version(4.0.0+)
	@undocumented
	[18] Unknown18() -> unknown<0x10>;
}

@version(3.0.0+)
interface nn::ns::detail::IVulnerabilityManagerInterface is ns:vm {
	@undocumented
	[1200] Unknown1200() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[1201] Unknown1201(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[1202] Unknown1202() -> unknown<0x10>;
}

interface nn::nsd::detail::IManager is nsd:u, nsd:a {
	[10] Unknown10() -> buffer<unknown<0x100>, 0x16>;
	[11] Unknown11() -> buffer<unknown<0x8>, 0x16>;
	[12] Unknown12() -> bytes<0x10, 1>;
	[13] Unknown13(u32);
	[14] Unknown14(u32, buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@version(4.0.0+)
	[15] Unknown15(u8);

	[20] Unknown20(buffer<unknown<0x100>, 0x15>) -> buffer<unknown<0x100>, 0x16>;
	[21] Unknown21(buffer<unknown<0x100>, 0x15>) -> (u32, buffer<unknown<0x100>, 0x16>);

	[30] Unknown30(buffer<unknown<0x10>, 0x15>) -> buffer<unknown<0x108>, 0x16>;
	[31] Unknown31(buffer<unknown<0x10>, 0x15>) -> (u32, buffer<unknown<0x108>, 0x16>);

	[40] Unknown40() -> buffer<unknown<0x100>, 0x16>;
	[41] Unknown41() -> (u32, buffer<unknown<0x100>, 0x16>);
	[42] Unknown42() -> buffer<unknown<0x100>, 0x16>;
	[43] Unknown43() -> (u32, buffer<unknown<0x100>, 0x16>);

	[50] Unknown50() -> buffer<unknown<0x12bf0>, 0x16>;

	[60] Unknown60() -> buffer<unknown<0x12bf0>, 0x16>;
	[61] Unknown61(buffer<unknown<0x12bf0>, 0x15>);
	[62] Unknown62();
	@version(4.0.0+)
	[63] Unknown63() -> u8;
}

interface nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService {
	[0] Unknown0();
	[1] Unknown1() -> handle<copy>;
	[2] Unknown2();
	[3] Unknown3();
	[4] Unknown4() -> u8;
	@version(3.0.0+)
	[5] Unknown5() -> u64;
}

interface nn::ntc::detail::service::IStaticService is ntc {
	[0] Unknown0(u32, u32) -> object<nn::ntc::detail::service::IEnsureNetworkClockAvailabilityService>;

	@version(3.0.0+)
	[100] Unknown100();
	@version(3.0.0+)
	[101] Unknown101();
}

interface nn::omm::detail::IOperationModeManager is omm {
	@undocumented
	[0] Unknown0() -> unknown<0x1>;
	@undocumented
	[1] Unknown1() -> handle<copy>;
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3();
	@version(1.0.0)
	@undocumented
	[4] Unknown4();
	@version(2.0.0+)
	@undocumented
	[4] Unknown4(handle<copy>);
	@undocumented
	[5] Unknown5() -> unknown<0x1>;
	@undocumented
	[6] Unknown6();
	@undocumented
	[7] Unknown7();
	@version(2.0.0+)
	@undocumented
	[8] Unknown8() -> unknown<0x10>;
	@version(2.0.0+)
	@undocumented
	[9] Unknown9();
	@version(3.0.0+)
	@undocumented
	[10] Unknown10(unknown<0x1>);
	@version(3.0.0+)
	@undocumented
	[11] Unknown11() -> unknown<0x8>;
	@version(3.0.0+)
	@undocumented
	[12] Unknown12() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[13] Unknown13();
	@version(3.0.0+)
	@undocumented
	[14] Unknown14() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[15] Unknown15();
	@version(4.0.0+)
	@undocumented
	[16] Unknown16();
	@version(4.0.0+)
	@undocumented
	[17] Unknown17();
	@version(4.0.0+)
	@undocumented
	[18] Unknown18();
	@version(4.0.0+)
	@undocumented
	[19] Unknown19() -> handle<copy>;
	@version(4.0.0+)
	@undocumented
	[20] Unknown20() -> unknown<0x1>;
	@version(4.0.0+)
	@undocumented
	[21] Unknown21(unknown<0x1>);
	@version(4.0.0+)
	@undocumented
	[22] Unknown22() -> handle<copy>;
	@version(4.0.0+)
	@undocumented
	[23] Unknown23() -> unknown<0x1>;
}

interface nn::ovln::IReceiver {
	@undocumented
	[0] Unknown0(unknown<0x10>);
	@undocumented
	[1] Unknown1(unknown<0x10>);
	@undocumented
	[2] Unknown2() -> handle<copy>;
	@undocumented
	[3] Unknown3() -> unknown<0x80>;
	@undocumented
	[4] Unknown4() -> unknown<0x88>;
}

interface nn::ovln::IReceiverService {
	@undocumented
	[0] Unknown0() -> object<nn::ovln::IReceiver>;
}

interface nn::ovln::ISender {
	@undocumented
	[0] Unknown0(unknown<0x88>);
	@undocumented
	[1] Unknown1() -> unknown<0x4>;
}

interface nn::ovln::ISenderService {
	@undocumented
	[0] Unknown0(unknown<0x18>) -> object<nn::ovln::ISender>;
}

interface nn::pcie::detail::IManager is pcie {
	@undocumented
	[0] Unknown0(unknown<0x18>, handle<copy>) -> (handle<copy>, object<nn::pcie::detail::ISession>);
	@undocumented
	[1] Unknown1() -> (unknown<0x4>, buffer<unknown, 0x6>);
}

interface nn::pcie::detail::ISession {
	@undocumented
	[0] Unknown0() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[1] Unknown1(unknown<0x4>) -> handle<copy>;
	@undocumented
	[2] Unknown2(unknown<0x4>);
	@undocumented
	[3] Unknown3(unknown<0x4>) -> buffer<unknown, 0x6>;
	@undocumented
	[4] Unknown4(unknown<0x8>) -> unknown<0x18>;
	@undocumented
	[5] Unknown5(unknown<0xc>) -> unknown<0x4>;
	@undocumented
	[6] Unknown6(unknown<0x10>);
	@undocumented
	[7] Unknown7(unknown<0x10>) -> buffer<unknown, 0x6>;
	@undocumented
	[8] Unknown8(unknown<0x10>, buffer<unknown, 0x5>);
	@undocumented
	[9] Unknown9(unknown<0x8>) -> unknown<0x4>;
	@undocumented
	[10] Unknown10(unknown<0x8>) -> unknown<0x4>;
	@undocumented
	[11] Unknown11(unknown<0x18>) -> unknown<0x8>;
	@undocumented
	[12] Unknown12(unknown<0x10>);
	@undocumented
	[13] Unknown13(unknown<0x10>);
	@undocumented
	[14] Unknown14(unknown<0x10>) -> unknown<0x8>;
	@undocumented
	[15] Unknown15(unknown<0x4>) -> unknown<0x10>;
	@undocumented
	[16] Unknown16(unknown<0x8>);
	@undocumented
	[17] Unknown17(unknown<0x8>) -> handle<copy>;
	@undocumented
	[18] Unknown18(unknown<0x4>);
	@undocumented
	[19] Unknown19(unknown<0xc>);
	@undocumented
	[20] Unknown20(unknown<0x8>);
	@version(3.0.0+)
	@undocumented
	[21] Unknown21(unknown<0x8>);
	@version(4.0.0+)
	@undocumented
	[22] Unknown22(unknown<0x8>);
}

@version(1.0.0)
interface nn::pcm::IManager {
	[0] Unknown0(unknown) -> unknown;
	[1] Unknown1(unknown) -> unknown;
}

interface nn::pctl::detail::ipc::IParentalControlService {
	@version(4.0.0+)
	[1] Initialize();

	[1001] CheckFreeCommunicationPermission();
	[1002] ConfirmLaunchApplicationPermission(b8, nn::ncm::ApplicationId, buffer<i8[], 0x9>);
	[1003] ConfirmResumeApplicationPermission(b8, nn::ncm::ApplicationId, buffer<i8[], 0x9>);
	[1004] ConfirmSnsPostPermission();
	[1005] ConfirmSystemSettingsPermission();
	[1006] IsRestrictionTemporaryUnlocked() -> b8;
	[1007] RevertRestrictionTemporaryUnlocked();
	[1008] EnterRestrictedSystemSettings();
	[1009] LeaveRestrictedSystemSettings();
	[1010] IsRestrictedSystemSettingsEntered() -> b8;
	[1011] RevertRestrictedSystemSettingsEntered();
	[1012] GetRestrictedFeatures() -> u32;
	@version(4.0.0+)
	[1013] ConfirmStereoVisionPermission();

	[1031] IsRestrictionEnabled() -> b8;
	[1032] GetSafetyLevel() -> u32;
	[1033] SetSafetyLevel(u32);
	[1034] GetSafetyLevelSettings(u32) -> nn::pctl::RestrictionSettings;
	[1035] GetCurrentSettings() -> nn::pctl::RestrictionSettings;
	[1036] SetCustomSafetyLevelSettings(nn::pctl::RestrictionSettings);
	[1037] GetDefaultRatingOrganization() -> u32;
	[1038] SetDefaultRatingOrganization(u32);
	[1039] GetFreeCommunicationApplicationListCount() -> u32;
	@version(1.0.0)
	[1040] GetFreeCommunicationApplicationListOld(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0xa>);
	@version(1.0.0)
	[1041] UpdateFreeCommunicationApplicationListOld(buffer<unknown, 0x9>);
	[1042] AddToFreeCommunicationApplicationList(nn::ncm::ApplicationId);
	[1043] DeleteSettings();
	[1044] GetFreeCommunicationApplicationList(u32) -> (u32, buffer<nn::pctl::FreeCommunicationApplicationInfo[], 0x6>);
	[1045] UpdateFreeCommunicationApplicationList(buffer<nn::pctl::FreeCommunicationApplicationInfo[], 0x5>);
	@version(2.0.0+)
	[1046] DisableFeaturesForReset();
	@version(3.0.0+)
	[1047] NotifyApplicationDownloadStarted(nn::ncm::ApplicationId);

	@version(4.0.0+)
	[1061] ConfirmStereoVisionRestrictionConfigurable();
	@version(4.0.0+)
	[1062] GetStereoVisionRestriction() -> b8;
	@version(4.0.0+)
	[1063] SetStereoVisionRestriction(b8);

	[1201] UnlockRestrictionTemporarily(buffer<u8[], 0x9>);
	[1202] UnlockSystemSettingsRestriction(buffer<u8[], 0x9>);
	[1203] SetPinCode(buffer<u8[], 0x9>);
	[1204] GenerateInquiryCode() -> nn::pctl::InquiryCode;
	[1205] CheckMasterKey(nn::pctl::InquiryCode, buffer<u8[], 0x9>) -> b8;
	[1206] GetPinCodeLength() -> u32;
	@version(2.0.0+)
	[1207] GetPinCodeChangedEvent() -> handle<copy>;
	@version(4.0.0+)
	[1208] GetPinCode() -> (u32, buffer<u8[], 0xa>);

	@version(1.0.0)
	[1401] RequestPairing(buffer<unknown, 0x9>) -> unknown<0x10>;
	@version(1.0.0)
	[1402] AuthorizePairing(unknown<0x10>) -> unknown<0x10>;
	[1403] IsPairingActive() -> b8;
	@version(1.0.0)
	[1404] RetrievePairingInfo() -> unknown<0x10>;
	@version(1.0.0)
	[1405] UnlinkPairing(unknown<0x1>);
	@version(2.0.0+)
	[1406] GetSettingsLastUpdated() -> nn::time::PosixTime;

	[1411] GetPairingAccountInfo(nn::pctl::detail::PairingInfoBase) -> nn::pctl::detail::PairingAccountInfoBase;

	[1421] GetAccountNickname(nn::pctl::detail::PairingAccountInfoBase) -> (u32, buffer<u8[], 0xa>);
	@version(1.0.0)
	[1422] GetAccountMiiImage(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	[1423] GetAccountMiiImageContentType(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0xa>);
	[1424] GetAccountState(nn::pctl::detail::PairingAccountInfoBase) -> u32;

	@version(1.0.0)
	[1431] SynchronizeParentalControlSettings();
	[1432] GetSynchronizationEvent() -> handle<copy>;

	[1451] StartPlayTimer();
	[1452] StopPlayTimer();
	[1453] IsPlayTimerEnabled() -> b8;
	[1454] GetPlayTimerRemainingTime() -> nn::TimeSpanType;
	[1455] IsRestrictedByPlayTimer() -> b8;
	[1456] GetPlayTimerSettings() -> nn::pctl::PlayTimerSettings;
	[1457] GetPlayTimerEventToRequestSuspension() -> handle<copy>;
	@version(4.0.0+)
	[1458] IsPlayTimerAlarmDisabled() -> b8;

	[1471] NotifyWrongPinCodeInputManyTimes();
	[1472] CancelNetworkRequest();
	@version(2.0.0+)
	[1473] GetUnlinkedEvent() -> handle<copy>;
	@version(2.0.0+)
	[1474] ClearUnlinkedEvent();

	[1601] DisableAllFeatures() -> b8;
	[1602] PostEnableAllFeatures() -> b8;
	[1603] IsAllFeaturesDisabled() -> (b8, b8);

	[1901] DeleteFromFreeCommunicationApplicationListForDebug(nn::ncm::ApplicationId);
	[1902] ClearFreeCommunicationApplicationListForDebug();

	[1941] DeletePairing();

	[1951] SetPlayTimerSettingsForDebug(nn::pctl::PlayTimerSettings);
	@version(2.0.0+)
	[1952] GetPlayTimerSpentTimeForTest() -> nn::TimeSpanType;
	@version(4.0.0+)
	[1953] SetPlayTimerAlarmDisabledForDebug(b8);

	[2001] RequestPairingAsync(buffer<u8[], 0x9>) -> (nn::pctl::detail::AsyncData, handle<copy>);
	[2002] FinishRequestPairing(nn::pctl::detail::AsyncData) -> nn::pctl::detail::PairingInfoBase;
	[2003] AuthorizePairingAsync(nn::pctl::detail::PairingInfoBase) -> (nn::pctl::detail::AsyncData, handle<copy>);
	[2004] FinishAuthorizePairing(nn::pctl::detail::AsyncData) -> nn::pctl::detail::PairingInfoBase;
	[2005] RetrievePairingInfoAsync() -> (nn::pctl::detail::AsyncData, handle<copy>);
	[2006] FinishRetrievePairingInfo(nn::pctl::detail::AsyncData) -> nn::pctl::detail::PairingInfoBase;
	[2007] UnlinkPairingAsync(b8) -> (nn::pctl::detail::AsyncData, handle<copy>);
	[2008] FinishUnlinkPairing(b8, nn::pctl::detail::AsyncData);
	[2009] GetAccountMiiImageAsync(nn::pctl::detail::PairingAccountInfoBase) -> (nn::pctl::detail::AsyncData, u32, handle<copy>, buffer<bytes, 0x6>);
	[2010] FinishGetAccountMiiImage(nn::pctl::detail::AsyncData) -> (u32, buffer<bytes, 0x6>);
	[2011] GetAccountMiiImageContentTypeAsync(nn::pctl::detail::PairingAccountInfoBase) -> (nn::pctl::detail::AsyncData, u32, handle<copy>, buffer<u8[], 0xa>);
	[2012] FinishGetAccountMiiImageContentType(nn::pctl::detail::AsyncData) -> (u32, buffer<u8[], 0xa>);
	[2013] SynchronizeParentalControlSettingsAsync() -> (nn::pctl::detail::AsyncData, handle<copy>);
	[2014] FinishSynchronizeParentalControlSettings(nn::pctl::detail::AsyncData);
	@version(2.0.0+)
	[2015] FinishSynchronizeParentalControlSettingsWithLastUpdated(nn::pctl::detail::AsyncData) -> nn::time::PosixTime;
}

interface nn::pctl::detail::ipc::IParentalControlServiceFactory is pctl, pctl:a, pctl:s, pctl:r {
	[0] CreateService(u64, pid) -> object<nn::pctl::detail::ipc::IParentalControlService>;
	@version(4.0.0+)
	[1] CreateServiceWithoutInitialize(u64, pid) -> object<nn::pctl::detail::ipc::IParentalControlService>;
}

@version(2.0.0+)
interface nn::pcv::IArbitrationManager is pcv:arb {
	[0] ReleaseControl(u32);
}

interface nn::pcv::IImmediateManager is pcv:imm {
	[0] SetClockRate(u32, u32);
}

interface nn::pcv::detail::IPcvService is pcv {
	[0] SetPowerEnabled(b8, u32);
	[1] SetClockEnabled(b8, u32);
	[2] SetClockRate(u32, u32);
	[3] GetClockRate(u32) -> u32;
	[4] GetState(u32) -> nn::pcv::ModuleState;
	[5] GetPossibleClockRates(u32, u32) -> (u32, u32, buffer<u32[], 0xa>);
	[6] SetMinVClockRate(u32, u32);
	[7] SetReset(b8, u32);
	[8] SetVoltageEnabled(b8, u32);
	[9] GetVoltageEnabled(u32) -> b8;
	[10] GetVoltageRange(u32) -> (u32, u32, u32);
	[11] SetVoltageValue(u32, u32);
	[12] GetVoltageValue(u32) -> u32;
	[13] GetTemperatureThresholds(u32) -> (u32, buffer<nn::pcv::TemperatureThreshold[], 0xa>);
	[14] SetTemperature(u32);
	[15] Initialize();
	[16] IsInitialized() -> b8;
	[17] Finalize();
	@version(3.0.0+)
	[18] PowerOn(nn::pcv::PowerControlTarget, u32);
	@version(3.0.0+)
	[19] PowerOff(nn::pcv::PowerControlTarget);
	@version(3.0.0+)
	[20] ChangeVoltage(nn::pcv::PowerControlTarget, u32);
	@version(3.0.0+)
	[21] GetPowerClockInfoEvent() -> handle<copy>;
	@version(3.0.0+)
	[22] GetOscillatorClock() -> u32;
	@version(3.0.0+)
	[23] GetDvfsTable(u32, u32) -> (u32, buffer<u32[], 0xa>, buffer<u32[], 0xa>);
	@version(3.0.0+)
	[24] GetModuleStateTable(u32) -> (u32, buffer<nn::pcv::ModuleState[], 0xa>);
	@version(3.0.0+)
	[25] GetPowerDomainStateTable(u32) -> (u32, buffer<nn::pcv::PowerDomainState[], 0xa>);
	@version(3.0.0+)
	[26] GetFuseInfo(u32) -> (u32, buffer<u32[], 0xa>);
}

interface nn::pdm::detail::INotifyService {
	@undocumented
	[0] Unknown0(unknown<0x10>);

	@undocumented
	[2] Unknown2(unknown<0x1>);
	@undocumented
	[3] Unknown3(unknown<0x1>);
	@undocumented
	[4] Unknown4();
	@version(2.0.0+)
	@undocumented
	[5] Unknown5(buffer<unknown, 0x5>);
	@version(4.0.0+)
	@undocumented
	[6] Unknown6(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[7] Unknown7(unknown<0x10>);
}

interface nn::pdm::detail::IQueryService {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[1] Unknown1() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[2] Unknown2(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[3] Unknown3(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[4] Unknown4(unknown<0x8>) -> unknown<0x28>;
	@undocumented
	[5] Unknown5(unknown<0x18>) -> unknown<0x28>;
	@undocumented
	[6] Unknown6(unknown<0x10>) -> unknown<0x28>;
	@undocumented
	[7] Unknown7(buffer<unknown, 0x5>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[8] Unknown8(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[9] Unknown9() -> unknown<0xc>;
	@version(3.0.0+)
	@undocumented
	[10] Unknown10(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[11] Unknown11(unknown<0x18>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	@undocumented
	[12] Unknown12(unknown<0x10>) -> unknown<0xc>;
}

interface nn::pinmux::IManager is pinmux {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> object<nn::pinmux::ISession>;
}

interface nn::pinmux::ISession {
	@undocumented
	[0] Unknown0(unknown<0x4>);
	@undocumented
	[1] Unknown1() -> unknown<0x4>;
	@undocumented
	[2] Unknown2(unknown<0x4>);
}

interface nn::pl::detail::ISharedFontManager is pl:u {
	[0] Unknown0(u32);
	[1] Unknown1(u32) -> u32;
	[2] Unknown2(u32) -> u32;
	[3] Unknown3(u32) -> u32;
	[4] Unknown4() -> handle<copy>;
	[5] Unknown5(bytes<0x8, 1>) -> (u8, u32, buffer<unknown, 0x6>, buffer<unknown, 0x6>, buffer<unknown, 0x6>);
	@version(4.0.0+)
	[6] Unknown6(bytes<0x8, 1>) -> (u8, u32, buffer<unknown, 0x6>, buffer<unknown, 0x6>, buffer<unknown, 0x6>);
}

interface nn::pm::detail::IBootModeInterface is pm:bm {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1();
}

interface nn::pm::detail::IDebugMonitorInterface {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[1] Unknown1() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[2] Unknown2(unknown<0x8>);
	@undocumented
	[3] Unknown3(unknown<0x8>) -> unknown<0x8>;
	@undocumented
	[4] Unknown4(unknown<0x8>) -> handle<copy>;
	@undocumented
	[5] Unknown5() -> unknown<0x8>;
	@undocumented
	[6] Unknown6() -> handle<copy>;
}

interface nn::pm::detail::IInformationInterface is pm:info {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> unknown<0x8>;
}

interface nn::pm::detail::IShellInterface is pm:shell {
	@undocumented
	[0] Unknown0(unknown<0x18>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(unknown<0x8>);
	@undocumented
	[2] Unknown2(unknown<0x8>);
	@undocumented
	[3] Unknown3() -> handle<copy>;
	@undocumented
	[4] Unknown4() -> unknown<0x10>;
	@undocumented
	[5] Unknown5(unknown<0x8>);
	@undocumented
	[6] Unknown6(unknown<0x8>);
	@undocumented
	[7] Unknown7();
	@undocumented
	[8] Unknown8() -> unknown<0x8>;
	@version(4.0.0+)
	@undocumented
	[9] Unknown9(unknown<0x8>);
}

interface nn::prepo::detail::ipc::IPrepoService is prepo:u, prepo:s, prepo:m, prepo:a {
	[10100] SaveReport(u64, pid, buffer<u8[], 0x9>, buffer<bytes, 0x5>);
	[10101] SaveReportWithUser(nn::account::Uid, u64, pid, buffer<u8[], 0x9>, buffer<bytes, 0x5>);

	[10200] RequestImmediateTransmission();

	[10300] GetTransmissionStatus() -> u32;

	[20100] SaveSystemReport(nn::ApplicationId, buffer<u8[], 0x9>, buffer<bytes, 0x5>);
	[20101] SaveSystemReportWithUser(nn::account::Uid, nn::ApplicationId, buffer<u8[], 0x9>, buffer<bytes, 0x5>);

	@version(4.0.0+)
	[20200] SetOperationMode(u64);

	[30100] ClearStorage();

	@version(2.0.0+)
	[40100] IsUserAgreementCheckEnabled() -> b8;
	@version(2.0.0+)
	[40101] SetUserAgreementCheckEnabled(b8);

	@version(1.0.0)
	@undocumented
	[90100] Unknown90100(unknown<0x4>);
	@version(2.0.0+)
	[90100] GetStorageUsage() -> (u64, u64);
	@version(1.0.0)
	@undocumented
	[90101] Unknown90101() -> unknown<0x4>;
	@version(1.0.0)
	@undocumented
	[90102] Unknown90102() -> unknown<0x10>;
}

interface nn::psc::sf::IPmControl is psc:c {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1(unknown<0xc>);
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5();
	@undocumented
	[6] Unknown6() -> (unknown<0x28>, buffer<unknown, 0x6>, buffer<unknown, 0x6>);
}

interface nn::psc::sf::IPmModule {
	@undocumented
	[0] Unknown0(unknown<0x4>, buffer<unknown, 0x5>) -> handle<copy>;
	@undocumented
	[1] Unknown1() -> unknown<0x8>;
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3();
}

interface nn::psc::sf::IPmService is psc:m {
	@undocumented
	[0] Unknown0() -> object<nn::psc::sf::IPmModule>;
}

interface nn::psm::IPsmServer is psm {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1() -> unknown<0x4>;
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3();
	@undocumented
	[4] Unknown4() -> unknown<0x1>;
	@undocumented
	[5] Unknown5();
	@undocumented
	[6] Unknown6();
	@undocumented
	[7] Unknown7() -> object<nn::psm::IPsmSession>;
	@undocumented
	[8] Unknown8();
	@undocumented
	[9] Unknown9();
	@undocumented
	[10] Unknown10();
	@undocumented
	[11] Unknown11();
	@undocumented
	[12] Unknown12() -> unknown<0x4>;
	@undocumented
	[13] Unknown13() -> unknown<0x8>;
	@undocumented
	[14] Unknown14() -> unknown<0x1>;
	@undocumented
	[15] Unknown15() -> unknown<0x8>;
	@version(2.0.0+)
	@undocumented
	[16] Unknown16() -> handle<copy>;
	@version(2.0.0+)
	@undocumented
	[17] Unknown17() -> unknown<0x40>;
	@version(3.0.0+)
	@undocumented
	[18] Unknown18() -> handle<copy>;
}

interface nn::psm::IPsmSession {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2(unknown<0x1>);
	@undocumented
	[3] Unknown3(unknown<0x1>);
	@undocumented
	[4] Unknown4(unknown<0x1>);
}

interface nn::pwm::IChannelSession {
	[0] Unknown0(u64);
	[1] Unknown1() -> u64;
	[2] Unknown2(u32);
	[3] Unknown3() -> u32;
	[4] Unknown4(u8);
	[5] Unknown5() -> u8;
}

interface nn::pwm::IManager is pwm {
	[0] Unknown0(u32) -> object<nn::pwm::IChannelSession>;
	[1] Unknown1(u32) -> object<nn::pwm::IChannelSession>;
}

@version(3.0.0+)
interface nn::ro::detail::IDebugMonitorInterface {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
}

@version(3.0.0+)
interface nn::ro::detail::IRoInterface {
	[0] Unknown0(u64, u64, u64, u64, u64, pid) -> u64;
	[1] Unknown1(u64, u64, pid);
	[2] Unknown2(u64, u64, u64, pid);
	[3] Unknown3(u64, u64, pid);
	[4] Unknown4(u64, pid, handle<copy>);
}

@version(3.0.0+)
interface nn::sasbus::IManager is sasbus {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> object<nn::sasbus::ISession>;
}

@version(3.0.0+)
interface nn::sasbus::ISession {
	@undocumented
	[0] Unknown0(unknown<0x1>, buffer<unknown, 0x21>);
	@undocumented
	[1] Unknown1(unknown<0x1>) -> buffer<unknown, 0x22>;
	@undocumented
	[2] Unknown2(unknown<0x18>, handle<copy>);
	@undocumented
	[3] Unknown3();
}

interface nn::settings::IFactorySettingsServer is set:cal {
	[0] GetBluetoothBdAddress() -> nn::settings::factory::BdAddress;
	[1] GetConfigurationId1() -> nn::settings::factory::ConfigurationId1;
	[2] GetAccelerometerOffset() -> nn::settings::factory::AccelerometerOffset;
	[3] GetAccelerometerScale() -> nn::settings::factory::AccelerometerScale;
	[4] GetGyroscopeOffset() -> nn::settings::factory::GyroscopeOffset;
	[5] GetGyroscopeScale() -> nn::settings::factory::GyroscopeScale;
	[6] GetWirelessLanMacAddress() -> nn::settings::factory::MacAddress;
	[7] GetWirelessLanCountryCodeCount() -> u32;
	[8] GetWirelessLanCountryCodes() -> (u32, buffer<nn::settings::factory::CountryCode[], 0xa>);
	[9] GetSerialNumber() -> nn::settings::factory::SerialNumber;
	[10] SetInitialSystemAppletProgramId(nn::ncm::ProgramId);
	[11] SetOverlayDispProgramId(nn::ncm::ProgramId);
	[12] GetBatteryLot() -> nn::settings::factory::BatteryLot;

	[14] GetEciDeviceCertificate() -> buffer<nn::settings::factory::EccB233DeviceCertificate, 0x16>;
	[15] GetEticketDeviceCertificate() -> buffer<nn::settings::factory::Rsa2048DeviceCertificate, 0x16>;
	[16] GetSslKey() -> buffer<nn::settings::factory::SslKey, 0x16>;
	[17] GetSslCertificate() -> buffer<nn::settings::factory::SslCertificate, 0x16>;
	[18] GetGameCardKey() -> buffer<nn::settings::factory::GameCardKey, 0x16>;
	[19] GetGameCardCertificate() -> buffer<nn::settings::factory::GameCardCertificate, 0x16>;
	[20] GetEciDeviceKey() -> nn::settings::factory::EccB233DeviceKey;
	[21] GetEticketDeviceKey() -> buffer<nn::settings::factory::Rsa2048DeviceKey, 0x16>;
	[22] GetSpeakerParameter() -> nn::settings::factory::SpeakerParameter;
	@version(4.0.0+)
	[23] GetLcdVendorId() -> u32;
}

interface nn::settings::IFirmwareDebugSettingsServer is set:fd {
	[2] SetSettingsItemValue(buffer<nn::settings::SettingsName, 0x19>, buffer<nn::settings::SettingsItemKey, 0x19>, buffer<bytes, 0x5>);
	[3] ResetSettingsItemValue(buffer<nn::settings::SettingsName, 0x19>, buffer<nn::settings::SettingsItemKey, 0x19>);
	[4] CreateSettingsItemKeyIterator(buffer<nn::settings::SettingsName, 0x19>) -> object<nn::settings::ISettingsItemKeyIterator>;

	@version(4.0.0+)
	[10] ReadSettings(u32) -> (u64, buffer<bytes, 0x6>);
	@version(4.0.0+)
	[11] ResetSettings(u32);

	@version(4.0.0+)
	[20] SetWebInspectorFlag(b8);
	@version(4.0.0+)
	[21] SetAllowedSslHosts(buffer<nn::settings::system::AllowedSslHost[], 0x5>);
	@version(4.0.0+)
	[22] SetHostFsMountPoint(buffer<nn::settings::system::HostFsMountPoint, 0x15>);
}

interface nn::settings::ISettingsItemKeyIterator {
	[0] GoNext();
	[1] GetKeySize() -> u64;
	[2] GetKey() -> (u64, buffer<bytes, 0x6>);
}

interface nn::settings::ISettingsServer is set {
	[0] GetLanguageCode() -> nn::settings::LanguageCode;
	[1] GetAvailableLanguageCodes() -> (u32, buffer<nn::settings::LanguageCode[], 0xa>);
	@version(4.0.0+)
	[2] MakeLanguageCode(u32) -> nn::settings::LanguageCode;
	[3] GetAvailableLanguageCodeCount() -> u32;
	[4] GetRegionCode() -> u32;
	@version(4.0.0+)
	[5] GetAvailableLanguageCodes2() -> (u32, buffer<nn::settings::LanguageCode[], 0x6>);
	@version(4.0.0+)
	[6] GetAvailableLanguageCodeCount2() -> u32;
	@version(4.0.0+)
	[7] GetKeyCodeMap() -> buffer<nn::kpr::KeyCodeMap, 0x16>;
}

interface nn::settings::ISystemSettingsServer is set:sys {
	[0] SetLanguageCode(nn::settings::LanguageCode);
	[1] SetNetworkSettings(buffer<nn::settings::system::NetworkSettings[], 0x5>);
	[2] GetNetworkSettings() -> (u32, buffer<nn::settings::system::NetworkSettings[], 0x6>);
	[3] GetFirmwareVersion() -> buffer<nn::settings::system::FirmwareVersion, 0x1a>;
	@version(3.0.0+)
	[4] GetFirmwareVersion2() -> buffer<nn::settings::system::FirmwareVersion, 0x1a>;

	[7] GetLockScreenFlag() -> b8;
	[8] SetLockScreenFlag(b8);
	[9] GetBacklightSettings() -> nn::settings::system::BacklightSettings;
	[10] SetBacklightSettings(nn::settings::system::BacklightSettings);
	[11] SetBluetoothDevicesSettings(buffer<nn::settings::system::BluetoothDevicesSettings[], 0x5>);
	[12] GetBluetoothDevicesSettings() -> (u32, buffer<nn::settings::system::BluetoothDevicesSettings[], 0x6>);
	[13] GetExternalSteadyClockSourceId() -> nn::util::Uuid;
	[14] SetExternalSteadyClockSourceId(nn::util::Uuid);
	[15] GetUserSystemClockContext() -> nn::time::SystemClockContext;
	[16] SetUserSystemClockContext(nn::time::SystemClockContext);
	[17] GetAccountSettings() -> nn::settings::system::AccountSettings;
	[18] SetAccountSettings(nn::settings::system::AccountSettings);
	[19] GetAudioVolume(u32) -> nn::settings::system::AudioVolume;
	[20] SetAudioVolume(nn::settings::system::AudioVolume, u32);
	[21] GetEulaVersions() -> (u32, buffer<nn::settings::system::EulaVersion[], 0x6>);
	[22] SetEulaVersions(buffer<nn::settings::system::EulaVersion[], 0x5>);
	[23] GetColorSetId() -> u32;
	[24] SetColorSetId(u32);
	[25] GetConsoleInformationUploadFlag() -> b8;
	[26] SetConsoleInformationUploadFlag(b8);
	[27] GetAutomaticApplicationDownloadFlag() -> b8;
	[28] SetAutomaticApplicationDownloadFlag(b8);
	[29] GetNotificationSettings() -> nn::settings::system::NotificationSettings;
	[30] SetNotificationSettings(nn::settings::system::NotificationSettings);
	[31] GetAccountNotificationSettings() -> (u32, buffer<nn::settings::system::AccountNotificationSettings[], 0x6>);
	[32] SetAccountNotificationSettings(buffer<nn::settings::system::AccountNotificationSettings[], 0x5>);

	[35] GetVibrationMasterVolume() -> f32;
	[36] SetVibrationMasterVolume(f32);
	[37] GetSettingsItemValueSize(buffer<nn::settings::SettingsName, 0x19>, buffer<nn::settings::SettingsItemKey, 0x19>) -> u64;
	[38] GetSettingsItemValue(buffer<nn::settings::SettingsName, 0x19>, buffer<nn::settings::SettingsItemKey, 0x19>) -> (u64, buffer<bytes, 0x6>);
	[39] GetTvSettings() -> nn::settings::system::TvSettings;
	[40] SetTvSettings(nn::settings::system::TvSettings);
	[41] GetEdid() -> buffer<nn::settings::system::Edid, 0x1a>;
	[42] SetEdid(buffer<nn::settings::system::Edid, 0x19>);
	[43] GetAudioOutputMode(u32) -> u32;
	[44] SetAudioOutputMode(u32, u32);
	[45] IsForceMuteOnHeadphoneRemoved() -> b8;
	[46] SetForceMuteOnHeadphoneRemoved(b8);
	[47] GetQuestFlag() -> b8;
	[48] SetQuestFlag(b8);
	[49] GetDataDeletionSettings() -> nn::settings::system::DataDeletionSettings;
	[50] SetDataDeletionSettings(nn::settings::system::DataDeletionSettings);
	[51] GetInitialSystemAppletProgramId() -> nn::ncm::ProgramId;
	[52] GetOverlayDispProgramId() -> nn::ncm::ProgramId;
	[53] GetDeviceTimeZoneLocationName() -> nn::time::LocationName;
	[54] SetDeviceTimeZoneLocationName(nn::time::LocationName);
	[55] GetWirelessCertificationFileSize() -> u64;
	[56] GetWirelessCertificationFile() -> (u64, buffer<bytes, 0x6>);
	[57] SetRegionCode(u32);
	[58] GetNetworkSystemClockContext() -> nn::time::SystemClockContext;
	[59] SetNetworkSystemClockContext(nn::time::SystemClockContext);
	[60] IsUserSystemClockAutomaticCorrectionEnabled() -> b8;
	[61] SetUserSystemClockAutomaticCorrectionEnabled(b8);
	[62] GetDebugModeFlag() -> b8;
	[63] GetPrimaryAlbumStorage() -> u32;
	[64] SetPrimaryAlbumStorage(u32);
	[65] GetUsb30EnableFlag() -> b8;
	[66] SetUsb30EnableFlag(b8);
	[67] GetBatteryLot() -> nn::settings::system::BatteryLot;
	[68] GetSerialNumber() -> nn::settings::system::SerialNumber;
	[69] GetNfcEnableFlag() -> b8;
	[70] SetNfcEnableFlag(b8);
	[71] GetSleepSettings() -> nn::settings::system::SleepSettings;
	[72] SetSleepSettings(nn::settings::system::SleepSettings);
	[73] GetWirelessLanEnableFlag() -> b8;
	[74] SetWirelessLanEnableFlag(b8);
	[75] GetInitialLaunchSettings() -> nn::settings::system::InitialLaunchSettings;
	[76] SetInitialLaunchSettings(nn::settings::system::InitialLaunchSettings);
	[77] GetDeviceNickName() -> buffer<nn::settings::system::DeviceNickName, 0x16>;
	[78] SetDeviceNickName(buffer<nn::settings::system::DeviceNickName, 0x15>);
	[79] GetProductModel() -> u32;
	[80] GetLdnChannel() -> u32;
	[81] SetLdnChannel(u32);
	[82] AcquireTelemetryDirtyFlagEventHandle() -> handle<copy>;
	[83] GetTelemetryDirtyFlags() -> nn::util::BitFlagSet<128, nn::settings::system::TelemetryDirtyFlag>;
	[84] GetPtmBatteryLot() -> nn::settings::factory::BatteryLot;
	[85] SetPtmBatteryLot(nn::settings::factory::BatteryLot);
	[86] GetPtmFuelGaugeParameter() -> nn::settings::system::PtmFuelGaugeParameter;
	[87] SetPtmFuelGaugeParameter(nn::settings::system::PtmFuelGaugeParameter);
	[88] GetBluetoothEnableFlag() -> b8;
	[89] SetBluetoothEnableFlag(b8);
	[90] GetMiiAuthorId() -> nn::util::Uuid;
	[91] SetShutdownRtcValue(u64);
	[92] GetShutdownRtcValue() -> u64;
	[93] AcquireFatalDirtyFlagEventHandle() -> handle<copy>;
	[94] GetFatalDirtyFlags() -> nn::util::BitFlagSet<128, nn::settings::system::FatalDirtyFlag>;
	@version(2.0.0+)
	[95] GetAutoUpdateEnableFlag() -> b8;
	@version(2.0.0+)
	[96] SetAutoUpdateEnableFlag(b8);
	@version(2.0.0+)
	[97] GetNxControllerSettings() -> (u32, buffer<nn::settings::system::NxControllerSettings[], 0x6>);
	@version(2.0.0+)
	[98] SetNxControllerSettings(buffer<nn::settings::system::NxControllerSettings[], 0x5>);
	@version(2.0.0+)
	[99] GetBatteryPercentageFlag() -> b8;
	@version(2.0.0+)
	[100] SetBatteryPercentageFlag(b8);
	@version(2.0.0+)
	[101] GetExternalRtcResetFlag() -> b8;
	@version(2.0.0+)
	[102] SetExternalRtcResetFlag(b8);
	@version(3.0.0+)
	[103] GetUsbFullKeyEnableFlag() -> b8;
	@version(3.0.0+)
	[104] SetUsbFullKeyEnableFlag(b8);
	@version(3.0.0+)
	[105] SetExternalSteadyClockInternalOffset(u64);
	@version(3.0.0+)
	[106] GetExternalSteadyClockInternalOffset() -> u64;
	@version(3.0.0+)
	[107] GetBacklightSettingsEx() -> nn::settings::system::BacklightSettingsEx;
	@version(3.0.0+)
	[108] SetBacklightSettingsEx(nn::settings::system::BacklightSettingsEx);
	@version(3.0.0+)
	[109] GetHeadphoneVolumeWarningCount() -> u32;
	@version(3.0.0+)
	[110] SetHeadphoneVolumeWarningCount(u32);
	@version(3.0.0+)
	[111] GetBluetoothAfhEnableFlag() -> b8;
	@version(3.0.0+)
	[112] SetBluetoothAfhEnableFlag(b8);
	@version(3.0.0+)
	[113] GetBluetoothBoostEnableFlag() -> b8;
	@version(3.0.0+)
	[114] SetBluetoothBoostEnableFlag(b8);
	@version(3.0.0+)
	[115] GetInRepairProcessEnableFlag() -> b8;
	@version(3.0.0+)
	[116] SetInRepairProcessEnableFlag(b8);
	@version(3.0.0+)
	[117] GetHeadphoneVolumeUpdateFlag() -> b8;
	@version(3.0.0+)
	[118] SetHeadphoneVolumeUpdateFlag(b8);
	@version(3.0.0+)
	[119] NeedsToUpdateHeadphoneVolume(b8) -> (b8, b8, i8);
	@version(3.0.0+)
	[120] GetPushNotificationActivityModeOnSleep() -> u32;
	@version(3.0.0+)
	[121] SetPushNotificationActivityModeOnSleep(u32);
	@version(4.0.0+)
	[122] GetServiceDiscoveryControlSettings() -> nn::settings::system::ServiceDiscoveryControlSettings;
	@version(4.0.0+)
	[123] SetServiceDiscoveryControlSettings(nn::settings::system::ServiceDiscoveryControlSettings);
	@version(4.0.0+)
	[124] GetErrorReportSharePermission() -> u32;
	@version(4.0.0+)
	[125] SetErrorReportSharePermission(u32);
	@version(4.0.0+)
	[126] GetAppletLaunchFlags() -> nn::util::BitFlagSet<32, nn::settings::system::AppletLaunchFlag>;
	@version(4.0.0+)
	[127] SetAppletLaunchFlags(nn::util::BitFlagSet<32, nn::settings::system::AppletLaunchFlag>);
	@version(4.0.0+)
	[128] GetConsoleSixAxisSensorAccelerationBias() -> nn::settings::system::ConsoleSixAxisSensorAccelerationBias;
	@version(4.0.0+)
	[129] SetConsoleSixAxisSensorAccelerationBias(nn::settings::system::ConsoleSixAxisSensorAccelerationBias);
	@version(4.0.0+)
	[130] GetConsoleSixAxisSensorAngularVelocityBias() -> nn::settings::system::ConsoleSixAxisSensorAngularVelocityBias;
	@version(4.0.0+)
	[131] SetConsoleSixAxisSensorAngularVelocityBias(nn::settings::system::ConsoleSixAxisSensorAngularVelocityBias);
	@version(4.0.0+)
	[132] GetConsoleSixAxisSensorAccelerationGain() -> nn::settings::system::ConsoleSixAxisSensorAccelerationGain;
	@version(4.0.0+)
	[133] SetConsoleSixAxisSensorAccelerationGain(nn::settings::system::ConsoleSixAxisSensorAccelerationGain);
	@version(4.0.0+)
	[134] GetConsoleSixAxisSensorAngularVelocityGain() -> nn::settings::system::ConsoleSixAxisSensorAngularVelocityGain;
	@version(4.0.0+)
	[135] SetConsoleSixAxisSensorAngularVelocityGain(nn::settings::system::ConsoleSixAxisSensorAngularVelocityGain);
	@version(4.0.0+)
	[136] GetKeyboardLayout() -> u32;
	@version(4.0.0+)
	[137] SetKeyboardLayout(u32);
	@version(4.0.0+)
	[138] GetWebInspectorFlag() -> b8;
	@version(4.0.0+)
	[139] GetAllowedSslHosts() -> (u32, buffer<nn::settings::system::AllowedSslHost[], 0x6>);
	@version(4.0.0+)
	[140] GetHostFsMountPoint() -> buffer<nn::settings::system::HostFsMountPoint, 0x16>;
}

@version(1.0.0-2.0.0)
interface nn::sf::hipc::detail::IHipcManager {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1(unknown<0x4>) -> handle<move>;
	@undocumented
	[2] Unknown2() -> handle<move>;
	@undocumented
	[3] Unknown3() -> unknown<0x2>;
	@undocumented
	[4] Unknown4(unknown<0x4>) -> handle<move>;
}

interface nn::sm::detail::IManagerInterface {
	[0] Unknown0(u64, buffer<unknown, 0x5>, buffer<unknown, 0x5>);
	[1] Unknown1(u64);
}

interface nn::sm::detail::IUserInterface {
	[0] Unknown0(u64, pid);
	[1] Unknown1(bytes<0x8, 1>) -> handle<move>;
	[2] Unknown2(bytes<0x8, 1>, u8, u32) -> handle<move>;
	[3] Unknown3(bytes<0x8, 1>);
}

interface nn::socket::resolver::IResolver is sfdnsres {
	[0] Unknown0(u32, buffer<unknown, 0x5>);
	[1] Unknown1(u32) -> buffer<unknown, 0x6>;
	[2] Unknown2(u8, u32, u64, pid, buffer<unknown, 0x5>) -> (u32, u32, u32, buffer<unknown, 0x6>);
	[3] Unknown3(u32, u32, u32, u64, pid, buffer<unknown, 0x5>) -> (u32, u32, u32, buffer<unknown, 0x6>);
	[4] Unknown4(u32) -> buffer<unknown, 0x6>;
	[5] Unknown5(u32) -> buffer<unknown, 0x6>;
	[6] Unknown6(u8, u32, u64, pid, buffer<unknown, 0x5>, buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> (u32, u32, u32, buffer<unknown, 0x6>);
	[7] Unknown7(u32, u32, u64, pid, buffer<unknown, 0x5>) -> (u32, u32, buffer<unknown, 0x6>, buffer<unknown, 0x6>);
	[8] Unknown8(u64, pid) -> u32;
	[9] Unknown9(u32, u64, pid);
}

interface nn::socket::sf::IClient is bsd:u, bsd:s {
	[0] Unknown0(bytes<0x20, 4>, u64, u64, pid, handle<copy>) -> u32;
	[1] Unknown1(u64, pid);
	[2] Unknown2(u32, u32, u32) -> (u32, u32);
	[3] Unknown3(u32, u32, u32) -> (u32, u32);
	[4] Unknown4(u32, buffer<unknown, 0x21>) -> (u32, u32);
	[5] Unknown5(u32, bytes<0x18, 8>, buffer<unknown, 0x21>, buffer<unknown, 0x21>, buffer<unknown, 0x21>) -> (u32, u32, buffer<unknown, 0x22>, buffer<unknown, 0x22>, buffer<unknown, 0x22>);
	[6] Unknown6(u32, u32, buffer<unknown, 0x21>) -> (u32, u32, buffer<unknown, 0x22>);
	[7] Unknown7(buffer<unknown, 0x21>, buffer<unknown, 0x21>) -> (u32, u32, u32, buffer<unknown, 0x22>);
	[8] Unknown8(u32, u32) -> (u32, u32, buffer<unknown, 0x22>);
	[9] Unknown9(u32, u32) -> (u32, u32, u32, buffer<unknown, 0x22>, buffer<unknown, 0x22>);
	[10] Unknown10(u32, u32, buffer<unknown, 0x21>) -> (u32, u32);
	[11] Unknown11(u32, u32, buffer<unknown, 0x21>, buffer<unknown, 0x21>) -> (u32, u32);
	[12] Unknown12(u32) -> (u32, u32, u32, buffer<unknown, 0x22>);
	[13] Unknown13(u32, buffer<unknown, 0x21>) -> (u32, u32);
	[14] Unknown14(u32, buffer<unknown, 0x21>) -> (u32, u32);
	[15] Unknown15(u32) -> (u32, u32, u32, buffer<unknown, 0x22>);
	[16] Unknown16(u32) -> (u32, u32, u32, buffer<unknown, 0x22>);
	[17] Unknown17(u32, u32, u32) -> (u32, u32, u32, buffer<unknown, 0x22>);
	[18] Unknown18(u32, u32) -> (u32, u32);
	[19] Unknown19(u32, u32, u32, buffer<unknown, 0x21>, buffer<unknown, 0x21>, buffer<unknown, 0x21>, buffer<unknown, 0x21>) -> (u32, u32, buffer<unknown, 0x22>, buffer<unknown, 0x22>, buffer<unknown, 0x22>, buffer<unknown, 0x22>);
	[20] Unknown20(u32, u32, u32) -> (u32, u32);
	[21] Unknown21(u32, u32, u32, buffer<unknown, 0x21>) -> (u32, u32);
	[22] Unknown22(u32, u32) -> (u32, u32);
	[23] Unknown23(u32) -> (u32, u32);
	[24] Unknown24(u32, buffer<unknown, 0x21>) -> (u32, u32);
	[25] Unknown25(u32) -> (u32, u32, buffer<unknown, 0x22>);
	[26] Unknown26(u32) -> (u32, u32);
	[27] Unknown27(u32, u64) -> (u32, u32);
	@version(1.0.0-3.0.0)
	[28] Unknown28(u64, pid) -> (u32, u32, buffer<unknown, 0x22>);
	@version(4.0.0+)
	[28] Unknown28(u32, u32, u64, pid) -> (u32, u32, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[29] Unknown29(u32, u32, u32, bytes<0x10, 8>) -> (u32, u32, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[30] Unknown30(u32, u32, u32, buffer<unknown, 0x21>, buffer<unknown, 0x21>) -> (u32, u32);
}

@version(4.0.0+)
interface nn::spl::detail::ICryptoInterface {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@undocumented
	[2] Unknown2(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[3] Unknown3(unknown<0x24>);
	@undocumented
	[4] Unknown4(unknown<0x20>) -> unknown<0x10>;
	@undocumented
	[5] Unknown5(unknown<0x10>);

	@undocumented
	[7] Unknown7() -> buffer<unknown, 0xa>;

	@undocumented
	[11] Unknown11() -> unknown<0x1>;

	@undocumented
	[14] Unknown14(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[15] Unknown15(unknown<0x14>, buffer<unknown, 0x45>) -> buffer<unknown, 0x46>;
	@undocumented
	[16] Unknown16(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x10>;

	@undocumented
	[21] Unknown21() -> unknown<0x4>;
	@undocumented
	[22] Unknown22(unknown<0x4>);
	@undocumented
	[23] Unknown23() -> handle<copy>;
	@undocumented
	[24] Unknown24(unknown<0x4>);
	@undocumented
	[25] Unknown25() -> unknown<0x4>;
}

@version(4.0.0+)
interface nn::spl::detail::IEsInterface {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@undocumented
	[2] Unknown2(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[3] Unknown3(unknown<0x24>);
	@undocumented
	[4] Unknown4(unknown<0x20>) -> unknown<0x10>;
	@undocumented
	[5] Unknown5(unknown<0x10>);

	@undocumented
	[7] Unknown7() -> buffer<unknown, 0xa>;

	@undocumented
	[11] Unknown11() -> unknown<0x1>;

	@undocumented
	[13] Unknown13(unknown<0x24>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@undocumented
	[14] Unknown14(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[15] Unknown15(unknown<0x14>, buffer<unknown, 0x45>) -> buffer<unknown, 0x46>;
	@undocumented
	[16] Unknown16(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x10>;
	@undocumented
	[17] Unknown17(unknown<0x24>, buffer<unknown, 0x9>);
	@undocumented
	[18] Unknown18(unknown<0x4>, buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> unknown<0x10>;

	@undocumented
	[20] Unknown20(unknown<0x14>) -> unknown<0x10>;
	@undocumented
	[21] Unknown21() -> unknown<0x4>;
	@undocumented
	[22] Unknown22(unknown<0x4>);
	@undocumented
	[23] Unknown23() -> handle<copy>;
	@undocumented
	[24] Unknown24(unknown<0x4>);
	@undocumented
	[25] Unknown25() -> unknown<0x4>;
}

@version(4.0.0+)
interface nn::spl::detail::IFsInterface {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@undocumented
	[2] Unknown2(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[3] Unknown3(unknown<0x24>);
	@undocumented
	[4] Unknown4(unknown<0x20>) -> unknown<0x10>;
	@undocumented
	[5] Unknown5(unknown<0x10>);

	@undocumented
	[7] Unknown7() -> buffer<unknown, 0xa>;

	@undocumented
	[9] Unknown9(unknown<0x24>, buffer<unknown, 0x9>);
	@undocumented
	[10] Unknown10(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> (unknown<0x4>, buffer<unknown, 0xa>);
	@undocumented
	[11] Unknown11() -> unknown<0x1>;
	@undocumented
	[12] Unknown12(unknown<0x18>) -> unknown<0x10>;

	@undocumented
	[14] Unknown14(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[15] Unknown15(unknown<0x14>, buffer<unknown, 0x45>) -> buffer<unknown, 0x46>;
	@undocumented
	[16] Unknown16(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x10>;

	@undocumented
	[19] Unknown19(unknown<0x14>);

	@undocumented
	[21] Unknown21() -> unknown<0x4>;
	@undocumented
	[22] Unknown22(unknown<0x4>);
	@undocumented
	[23] Unknown23() -> handle<copy>;
	@undocumented
	[24] Unknown24(unknown<0x4>);
	@undocumented
	[25] Unknown25() -> unknown<0x4>;
}

interface nn::spl::detail::IGeneralInterface is spl:, spl:mig, spl:fs, spl:ssl, spl:es, spl:manu {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@version(1.0.0-3.0.0)
	@undocumented
	[2] Unknown2(unknown<0x18>) -> unknown<0x10>;
	@version(1.0.0-3.0.0)
	@undocumented
	[3] Unknown3(unknown<0x24>);
	@version(1.0.0-3.0.0)
	@undocumented
	[4] Unknown4(unknown<0x20>) -> unknown<0x10>;
	@undocumented
	[5] Unknown5(unknown<0x10>);

	@undocumented
	[7] Unknown7() -> buffer<unknown, 0xa>;

	@version(1.0.0-3.0.0)
	@undocumented
	[9] Unknown9(unknown<0x24>, buffer<unknown, 0x9>);
	@version(1.0.0-3.0.0)
	@undocumented
	[10] Unknown10(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> (unknown<0x4>, buffer<unknown, 0xa>);
	@undocumented
	[11] Unknown11() -> unknown<0x1>;
	@version(1.0.0-3.0.0)
	@undocumented
	[12] Unknown12(unknown<0x18>) -> unknown<0x10>;
	@version(1.0.0-3.0.0)
	@undocumented
	[13] Unknown13(unknown<0x24>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@version(1.0.0-3.0.0)
	@undocumented
	[14] Unknown14(unknown<0x18>) -> unknown<0x10>;
	@version(1.0.0)
	@undocumented
	[15] Unknown15(unknown<0x14>, buffer<unknown, 0x5>) -> buffer<unknown, 0x6>;
	@version(2.0.0-3.0.0)
	@undocumented
	[15] Unknown15(unknown<0x14>, buffer<unknown, 0x45>) -> buffer<unknown, 0x46>;
	@version(1.0.0-3.0.0)
	@undocumented
	[16] Unknown16(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x10>;
	@version(1.0.0-3.0.0)
	@undocumented
	[17] Unknown17(unknown<0x24>, buffer<unknown, 0x9>);
	@version(1.0.0-2.0.0)
	@undocumented
	[18] Unknown18(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> unknown<0x10>;
	@version(3.0.0)
	@undocumented
	[18] Unknown18(unknown<0x4>, buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> unknown<0x10>;
	@version(1.0.0-3.0.0)
	@undocumented
	[19] Unknown19(unknown<0x14>);
	@version(2.0.0)
	@undocumented
	[20] Unknown20(unknown<0x10>) -> unknown<0x10>;
	@version(3.0.0)
	@undocumented
	[20] Unknown20(unknown<0x14>) -> unknown<0x10>;
	@version(2.0.0-3.0.0)
	@undocumented
	[21] Unknown21() -> unknown<0x4>;
	@version(2.0.0-3.0.0)
	@undocumented
	[22] Unknown22(unknown<0x4>);
	@version(2.0.0-3.0.0)
	@undocumented
	[23] Unknown23() -> handle<copy>;
	@version(3.0.0+)
	@undocumented
	[24] Unknown24(unknown<0x4>);
	@version(3.0.0+)
	@undocumented
	[25] Unknown25() -> unknown<0x4>;
}

interface nn::spl::detail::IRandomInterface is csrng {
	[0] Unknown0() -> buffer<unknown, 0x6>;
}

@version(4.0.0+)
interface nn::spl::detail::ISslInterface {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(buffer<unknown, 0x9>, buffer<unknown, 0x9>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@undocumented
	[2] Unknown2(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[3] Unknown3(unknown<0x24>);
	@undocumented
	[4] Unknown4(unknown<0x20>) -> unknown<0x10>;
	@undocumented
	[5] Unknown5(unknown<0x10>);

	@undocumented
	[7] Unknown7() -> buffer<unknown, 0xa>;

	@undocumented
	[11] Unknown11() -> unknown<0x1>;

	@undocumented
	[13] Unknown13(unknown<0x24>, buffer<unknown, 0x9>) -> buffer<unknown, 0xa>;
	@undocumented
	[14] Unknown14(unknown<0x18>) -> unknown<0x10>;
	@undocumented
	[15] Unknown15(unknown<0x14>, buffer<unknown, 0x45>) -> buffer<unknown, 0x46>;
	@undocumented
	[16] Unknown16(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x10>;

	@undocumented
	[21] Unknown21() -> unknown<0x4>;
	@undocumented
	[22] Unknown22(unknown<0x4>);
	@undocumented
	[23] Unknown23() -> handle<copy>;
	@undocumented
	[24] Unknown24(unknown<0x4>);
	@undocumented
	[25] Unknown25() -> unknown<0x4>;
}

interface nn::spsm::detail::IPowerStateInterface is spsm {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1() -> handle<copy>;
	@undocumented
	[2] Unknown2() -> unknown<0x4>;
	@undocumented
	[3] Unknown3(unknown<0x1>);
	@undocumented
	[4] Unknown4() -> handle<copy>;
	@undocumented
	[5] Unknown5() -> unknown<0x4>;
	@undocumented
	[6] Unknown6() -> unknown<0x50>;
	@undocumented
	[7] Unknown7();
	@undocumented
	[8] Unknown8() -> buffer<unknown, 0x6>;
	@undocumented
	[9] Unknown9(unknown<0x8>);
	@version(2.0.0+)
	@undocumented
	[10] Unknown10();
	@version(2.0.0)
	@undocumented
	[11] Unknown11();
	@version(3.0.0)
	@undocumented
	[11] Unknown11(unknown<0x8>);
}

interface nn::ssl::sf::ISslConnection {
	[0] SetSocketDescriptor(u32) -> u32;
	[1] SetHostName(buffer<bytes, 0x5>);
	[2] SetVerifyOption(nn::ssl::sf::VerifyOption);
	[3] SetIoMode(nn::ssl::sf::IoMode);
	[4] GetSocketDescriptor() -> u32;
	[5] GetHostName() -> (u32, buffer<bytes, 0x6>);
	[6] GetVerifyOption() -> nn::ssl::sf::VerifyOption;
	[7] GetIoMode() -> nn::ssl::sf::IoMode;
	[8] DoHandshake();
	[9] DoHandshakeGetServerCert() -> (u32, u32, buffer<bytes, 0x6>);
	[10] Read() -> (u32, buffer<bytes, 0x6>);
	[11] Write(buffer<bytes, 0x5>) -> u32;
	[12] Pending() -> u32;
	[13] Peek() -> (u32, buffer<bytes, 0x6>);
	[14] Poll(nn::ssl::sf::PollEvent, u32) -> nn::ssl::sf::PollEvent;
	[15] GetVerifyCertError();
	[16] GetNeededServerCertBufferSize() -> u32;
	[17] SetSessionCacheMode(nn::ssl::sf::SessionCacheMode);
	[18] GetSessionCacheMode() -> nn::ssl::sf::SessionCacheMode;
	[19] FlushSessionCache();
	[20] SetRenegotiationMode(nn::ssl::sf::RenegotiationMode);
	[21] GetRenegotiationMode() -> nn::ssl::sf::RenegotiationMode;
	@version(2.0.0+)
	[22] SetOption(b8, nn::ssl::sf::OptionType);
	@version(2.0.0+)
	[23] GetOption(nn::ssl::sf::OptionType) -> b8;
	@version(2.0.0+)
	[24] GetVerifyCertErrors() -> (u32, u32, buffer<bytes, 0x6>);
	@version(4.0.0+)
	[25] GetCipherInfo(u32) -> buffer<bytes, 0x6>;
}

interface nn::ssl::sf::ISslContext {
	[0] SetOption(nn::ssl::sf::ContextOption, u32);
	[1] GetOption(nn::ssl::sf::ContextOption) -> u32;
	[2] CreateConnection() -> object<nn::ssl::sf::ISslConnection>;
	[3] GetConnectionCount() -> u32;
	[4] ImportServerPki(nn::ssl::sf::CertificateFormat, buffer<bytes, 0x5>) -> u64;
	[5] ImportClientPki(buffer<bytes, 0x5>, buffer<bytes, 0x5>) -> u64;
	[6] RemoveServerPki(u64);
	[7] RemoveClientPki(u64);
	[8] RegisterInternalPki(nn::ssl::sf::InternalPki) -> u64;
	@version(2.0.0+)
	[9] AddPolicyOid(buffer<bytes, 0x5>);
	@version(3.0.0+)
	[10] ImportCrl(buffer<bytes, 0x5>) -> u64;
	@version(3.0.0+)
	[11] RemoveCrl(u64);
}

interface nn::ssl::sf::ISslService is ssl {
	[0] CreateContext(nn::ssl::sf::SslVersion, u64, pid) -> object<nn::ssl::sf::ISslContext>;
	[1] GetContextCount() -> u32;
	@version(2.0.0)
	[2] GetCertificates(buffer<bytes, 0x5>) -> buffer<bytes, 0x6>;
	@version(3.0.0+)
	[2] GetCertificates(buffer<bytes, 0x5>) -> (u32, buffer<bytes, 0x6>);
	@version(2.0.0+)
	[3] GetCertificateBufSize(buffer<bytes, 0x5>) -> u32;
	@version(3.0.0+)
	[4] DebugIoctl(u64, buffer<bytes, 0x5>) -> buffer<bytes, 0x6>;
	@version(3.0.0+)
	[5] SetInterfaceVersion(u32);
}

interface nn::tc::IManager is tc {
	@undocumented
	[0] Unknown0(unknown<0x4>);
	@undocumented
	[1] Unknown1(unknown<0x4>) -> handle<copy>;
	@undocumented
	[2] Unknown2(unknown<0x4>) -> unknown<0x1>;
	@undocumented
	[3] Unknown3(unknown<0x4>);
	@undocumented
	[4] Unknown4(unknown<0x4>);
	@undocumented
	[5] Unknown5(unknown<0x8>);
	@undocumented
	[6] Unknown6();
	@undocumented
	[7] Unknown7();
	@undocumented
	[8] Unknown8() -> unknown<0x1>;
}

interface nn::timesrv::detail::service::IStaticService is time:u, time:a, time:s {
	[0] GetStandardUserSystemClock() -> object<nn::timesrv::detail::service::ISystemClock>;
	[1] GetStandardNetworkSystemClock() -> object<nn::timesrv::detail::service::ISystemClock>;
	[2] GetStandardSteadyClock() -> object<nn::timesrv::detail::service::ISteadyClock>;
	[3] GetTimeZoneService() -> object<nn::timesrv::detail::service::ITimeZoneService>;
	[4] GetStandardLocalSystemClock() -> object<nn::timesrv::detail::service::ISystemClock>;
	@version(4.0.0+)
	[5] GetEphemeralNetworkSystemClock() -> object<nn::timesrv::detail::service::ISystemClock>;

	@version(4.0.0+)
	[50] SetStandardSteadyClockInternalOffset(nn::TimeSpanType);

	[100] IsStandardUserSystemClockAutomaticCorrectionEnabled() -> b8;
	[101] SetStandardUserSystemClockAutomaticCorrectionEnabled(b8);

	@version(3.0.0+)
	[200] IsStandardNetworkSystemClockAccuracySufficient() -> b8;

	@version(4.0.0+)
	[300] CalculateMonotonicSystemClockBaseTimePoint(nn::time::SystemClockContext) -> u64;

	@version(4.0.0+)
	[400] GetClockSnapshot(u8) -> buffer<nn::time::sf::ClockSnapshot, 0x1a>;
	@version(4.0.0+)
	[401] GetClockSnapshotFromSystemClockContext(u8, nn::time::SystemClockContext, nn::time::SystemClockContext) -> buffer<nn::time::sf::ClockSnapshot, 0x1a>;

	@version(4.0.0+)
	[500] CalculateStandardUserSystemClockDifferenceByUser(buffer<nn::time::sf::ClockSnapshot, 0x19>, buffer<nn::time::sf::ClockSnapshot, 0x19>) -> nn::TimeSpanType;
	@version(4.0.0+)
	[501] CalculateSpanBetween(buffer<nn::time::sf::ClockSnapshot, 0x19>, buffer<nn::time::sf::ClockSnapshot, 0x19>) -> nn::TimeSpanType;
}

interface nn::timesrv::detail::service::ISteadyClock {
	[0] GetCurrentTimePoint() -> nn::time::SteadyClockTimePoint;

	[2] GetTestOffset() -> nn::TimeSpanType;
	[3] SetTestOffset(nn::TimeSpanType);

	@version(2.0.0+)
	[100] GetRtcValue() -> u64;
	@version(2.0.0+)
	[101] IsRtcResetDetected() -> b8;
	@version(2.0.0+)
	[102] GetSetupResutltValue() -> u32;

	@version(3.0.0+)
	[200] GetInternalOffset() -> nn::TimeSpanType;
	@version(3.0.0)
	[201] SetInternalOffset(nn::TimeSpanType);
}

interface nn::timesrv::detail::service::ISystemClock {
	[0] GetCurrentTime() -> nn::time::PosixTime;
	[1] SetCurrentTime(nn::time::PosixTime);
	[2] GetSystemClockContext() -> nn::time::SystemClockContext;
	[3] SetSystemClockContext(nn::time::SystemClockContext);
}

interface nn::timesrv::detail::service::ITimeZoneService {
	[0] GetDeviceLocationName() -> nn::time::LocationName;
	[1] SetDeviceLocationName(nn::time::LocationName);
	[2] GetTotalLocationNameCount() -> u32;
	[3] LoadLocationNameList(u32) -> (u32, buffer<nn::time::LocationName[], 0x6>);
	[4] LoadTimeZoneRule(nn::time::LocationName) -> buffer<nn::time::TimeZoneRule, 0x16>;
	@version(2.0.0+)
	[5] GetTimeZoneRuleVersion() -> nn::time::TimeZoneRuleVersion;

	[100] ToCalendarTime(nn::time::PosixTime, buffer<nn::time::TimeZoneRule, 0x15>) -> (nn::time::CalendarTime, nn::time::sf::CalendarAdditionalInfo);
	[101] ToCalendarTimeWithMyRule(nn::time::PosixTime) -> (nn::time::CalendarTime, nn::time::sf::CalendarAdditionalInfo);

	[201] ToPosixTime(nn::time::CalendarTime, buffer<nn::time::TimeZoneRule, 0x15>) -> (u32, buffer<nn::time::PosixTime[], 0xa>);
	[202] ToPosixTimeWithMyRule(nn::time::CalendarTime) -> (u32, buffer<nn::time::PosixTime[], 0xa>);
}

interface nn::tma::IHtcManager is htc {
	[0] Unknown0(buffer<unknown, 0x5>) -> (u32, buffer<unknown, 0x6>);
	[1] Unknown1(buffer<unknown, 0x5>) -> u32;
	[2] Unknown2() -> handle<copy>;
	@version(2.0.0+)
	[3] Unknown3() -> handle<copy>;
	@version(2.0.0+)
	[4] Unknown4() -> handle<copy>;
	@version(2.0.0+)
	[5] Unknown5() -> handle<copy>;
	@version(3.0.0+)
	[6] Unknown6() -> buffer<unknown, 0x6>;
	@version(3.0.0+)
	[7] Unknown7() -> buffer<unknown, 0x6>;
	@version(3.0.0+)
	[8] Unknown8(u8);
	@version(4.0.0+)
	[9] Unknown9() -> buffer<unknown, 0x6>;
	@version(4.0.0+)
	[10] Unknown10() -> buffer<unknown, 0x6>;
}

interface nn::tma::IHtcsManager is htcs {
	[0] Unknown0() -> (u32, u32);
	[1] Unknown1(u32) -> (u32, u32);
	[2] Unknown2(bytes<0x42, 2>, u32) -> (u32, u32);
	[3] Unknown3(bytes<0x42, 2>, u32) -> (u32, u32);
	[4] Unknown4(u32, u32) -> (u32, u32);
	[5] Unknown5(u32) -> (bytes<0x42, 2>, u32, u32);
	[6] Unknown6(u32, u32) -> (u32, u64, buffer<unknown, 0x6>);
	[7] Unknown7(u32, u32, buffer<unknown, 0x5>) -> (u32, u64);
	[8] Unknown8(u32, u32) -> (u32, u32);
	[9] Unknown9(u32, u32, u32) -> (u32, u32);
	[10] Unknown10() -> bytes<0x20, 1>;
	[11] Unknown11() -> bytes<0x20, 1>;
	[12] Unknown12() -> (u32, object<unknown>);
	[13] Unknown13(u8) -> (u32, object<unknown>);

	[100] Unknown100(u64, pid);
	[101] Unknown101(u64, pid);
}

interface nn::tma::ISocket {
	[0] Unknown0() -> (u32, u32);
	[1] Unknown1(bytes<0x42, 2>) -> (u32, u32);
	[2] Unknown2(bytes<0x42, 2>) -> (u32, u32);
	[3] Unknown3(u32) -> (u32, u32);
	[4] Unknown4() -> (bytes<0x42, 2>, u32, object<unknown>);
	[5] Unknown5(u32) -> (u32, u64, buffer<unknown, 0x22>);
	[6] Unknown6(u32, buffer<unknown, 0x21>) -> (u32, u64);
	[7] Unknown7(u32) -> (u32, u32);
	[8] Unknown8(u32, u32) -> (u32, u32);
	@version(3.0.0+)
	[9] Unknown9() -> (u32, handle<copy>);
	@version(3.0.0+)
	[10] Unknown10(u32) -> (bytes<0x42, 2>, u32, object<unknown>);
	@version(3.0.0+)
	[11] Unknown11(u32, u32) -> (u32, handle<copy>);
	@version(3.0.0+)
	[12] Unknown12(u32) -> (u32, u64, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[13] Unknown13(u32, u32, u32, u64, handle<copy>) -> (u32, handle<copy>);
	@version(3.0.0+)
	[14] Unknown14(u32, buffer<unknown, 0x21>) -> (u32, handle<copy>);
	@version(3.0.0+)
	[15] Unknown15(u32, u64, handle<copy>, buffer<unknown, 0x21>, buffer<unknown, 0x21>) -> (u32, handle<copy>);
	@version(3.0.0+)
	[16] Unknown16(u32) -> (u32, u64);
}

interface nn::ts::server::IMeasurementServer is ts {
	@undocumented
	[0] Unknown0(unknown<0x1>) -> unknown<0x8>;
	@undocumented
	[1] Unknown1(unknown<0x1>) -> unknown<0x4>;
	@undocumented
	[2] Unknown2(unknown<0x2>);
	@undocumented
	[3] Unknown3(unknown<0x1>) -> unknown<0x4>;
}

interface nn::uart::IManager is uart {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> unknown<0x1>;
	@undocumented
	[1] Unknown1(unknown<0x4>) -> unknown<0x1>;
	@undocumented
	[2] Unknown2(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[3] Unknown3(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[4] Unknown4(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[5] Unknown5(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[6] Unknown6() -> object<nn::uart::IPortSession>;
	@undocumented
	[7] Unknown7(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[8] Unknown8(unknown<0x8>) -> unknown<0x1>;
}

interface nn::uart::IPortSession {
	@undocumented
	[0] Unknown0(unknown<0x20>, handle<copy>, handle<copy>) -> unknown<0x1>;
	@undocumented
	[1] Unknown1(unknown<0x20>, handle<copy>, handle<copy>) -> unknown<0x1>;
	@undocumented
	[2] Unknown2() -> unknown<0x8>;
	@undocumented
	[3] Unknown3(buffer<unknown, 0x21>) -> unknown<0x8>;
	@undocumented
	[4] Unknown4() -> unknown<0x8>;
	@undocumented
	[5] Unknown5() -> (unknown<0x8>, buffer<unknown, 0x22>);
	@undocumented
	[6] Unknown6(unknown<0x10>) -> (unknown<0x1>, handle<copy>);
	@undocumented
	[7] Unknown7(unknown<0x4>) -> unknown<0x1>;
}

interface nn::usb::ds::IDsEndpoint {
	@undocumented
	[0] Unknown0(unknown<0x10>) -> unknown<0x4>;
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> handle<copy>;
	@undocumented
	[3] Unknown3() -> unknown<0x84>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5(unknown<0x1>);
}

interface nn::usb::ds::IDsInterface {
	@undocumented
	[0] Unknown0(buffer<unknown, 0x5>) -> (unknown<0x1>, object<nn::usb::ds::IDsEndpoint>);
	@undocumented
	[1] Unknown1() -> handle<copy>;
	@undocumented
	[2] Unknown2() -> buffer<unknown, 0x6>;
	@undocumented
	[3] Unknown3();
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5(unknown<0x10>) -> unknown<0x4>;
	@undocumented
	[6] Unknown6(unknown<0x10>) -> unknown<0x4>;
	@undocumented
	[7] Unknown7() -> handle<copy>;
	@undocumented
	[8] Unknown8() -> unknown<0x84>;
	@undocumented
	[9] Unknown9() -> handle<copy>;
	@undocumented
	[10] Unknown10() -> unknown<0x84>;
	@undocumented
	[11] Unknown11();
}

interface nn::usb::ds::IDsService is usb:ds {
	@undocumented
	[0] Unknown0(unknown<0x4>);
	@undocumented
	[1] Unknown1(handle<copy>);
	@undocumented
	[2] Unknown2(buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> (unknown<0x1>, object<nn::usb::ds::IDsInterface>);
	@undocumented
	[3] Unknown3() -> handle<copy>;
	@undocumented
	[4] Unknown4() -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[5] Unknown5(buffer<unknown, 0x5>);
}

interface nn::usb::hs::IClientEpSession {
	@version(1.0.0)
	@undocumented
	[0] Unknown0(unknown<0x8>, buffer<unknown, 0x5>) -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[0] Unknown0();
	@version(1.0.0)
	@undocumented
	[1] Unknown1(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[1] Unknown1();
	@version(1.0.0)
	@undocumented
	[2] Unknown2();
	@version(2.0.0+)
	@undocumented
	[2] Unknown2() -> handle<copy>;
	@undocumented
	[3] Unknown3();
	@version(2.0.0+)
	@undocumented
	[4] Unknown4(unknown<0x18>) -> unknown<0x4>;
	@version(2.0.0)
	@undocumented
	[5] Unknown5(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(3.0.0+)
	@undocumented
	[5] Unknown5(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x22>);
	@version(2.0.0)
	@undocumented
	[6] Unknown6(unknown<0x20>, buffer<unknown, 0x5>) -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[6] Unknown6(unknown<0x20>, buffer<unknown, 0x21>) -> unknown<0x4>;
	@version(4.0.0+)
	@undocumented
	[7] Unknown7(unknown<0x10>);
	@version(4.0.0+)
	@undocumented
	[8] Unknown8(unknown<0x4>, handle<copy>);
}

interface nn::usb::hs::IClientIfSession {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1(unknown<0x1>) -> buffer<unknown, 0x6>;
	@undocumented
	[2] Unknown2() -> buffer<unknown, 0x6>;
	@undocumented
	[3] Unknown3(unknown<0x1>) -> buffer<unknown, 0x6>;
	@version(1.0.0)
	@undocumented
	[4] Unknown4(unknown<0x14>) -> (unknown<0x7>, object<nn::usb::hs::IClientEpSession>);
	@version(2.0.0+)
	@undocumented
	[4] Unknown4() -> unknown<0x4>;
	@version(1.0.0)
	@undocumented
	[5] Unknown5() -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[5] Unknown5(unknown<0x10>);
	@version(1.0.0)
	@undocumented
	[6] Unknown6(unknown<0xc>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[6] Unknown6() -> handle<copy>;
	@version(1.0.0)
	@undocumented
	[7] Unknown7(unknown<0xc>, buffer<unknown, 0x5>) -> unknown<0x4>;
	@version(2.0.0+)
	@undocumented
	[7] Unknown7() -> buffer<unknown, 0x6>;
	@undocumented
	[8] Unknown8();
	@version(2.0.0+)
	@undocumented
	[9] Unknown9(unknown<0x14>) -> (unknown<0x7>, object<nn::usb::hs::IClientEpSession>);
}

interface nn::usb::hs::IClientRootSession is usb:hs {
	@version(1.0.0)
	@undocumented
	[0] Unknown0(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[0] Unknown0(handle<copy>);
	@undocumented
	[1] Unknown1(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[2] Unknown2() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0+)
	@undocumented
	[2] Unknown2(unknown<0x10>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[3] Unknown3(unknown<0x12>) -> handle<copy>;
	@version(2.0.0+)
	@undocumented
	[3] Unknown3() -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(1.0.0)
	@undocumented
	[4] Unknown4(unknown<0x1>);
	@version(2.0.0+)
	@undocumented
	[4] Unknown4(unknown<0x12>) -> handle<copy>;
	@version(1.0.0)
	@undocumented
	[5] Unknown5() -> handle<copy>;
	@version(2.0.0+)
	@undocumented
	[5] Unknown5(unknown<0x1>);
	@version(1.0.0)
	@undocumented
	[6] Unknown6(unknown<0x4>) -> (buffer<unknown, 0x6>, object<nn::usb::hs::IClientIfSession>);
	@version(2.0.0+)
	@undocumented
	[6] Unknown6() -> handle<copy>;
	@version(1.0.0)
	@undocumented
	[7] Unknown7(unknown<0x8>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@version(2.0.0)
	@undocumented
	[7] Unknown7(unknown<0x4>) -> (buffer<unknown, 0x6>, object<nn::usb::hs::IClientIfSession>);
	@version(3.0.0+)
	@undocumented
	[7] Unknown7(unknown<0x4>) -> (buffer<unknown, 0x6>, buffer<unknown, 0x6>, object<nn::usb::hs::IClientIfSession>);
	@version(1.0.0)
	@undocumented
	[8] Unknown8(unknown<0x4>);
}

interface nn::usb::pd::detail::IPdCradleManager is usb:pd:c {
	@undocumented
	[0] Unknown0() -> object<nn::usb::pd::detail::IPdCradleSession>;
}

interface nn::usb::pd::detail::IPdCradleSession {
	@undocumented
	[0] Unknown0(unknown<0x8>);
	@undocumented
	[1] Unknown1(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[2] Unknown2();
	@version(2.0.0+)
	@undocumented
	[3] Unknown3() -> unknown<0x2>;
	@version(2.0.0+)
	@undocumented
	[4] Unknown4() -> unknown<0x2>;
	@version(2.0.0+)
	@undocumented
	[5] Unknown5() -> unknown<0x2>;
	@version(2.0.0+)
	@undocumented
	[6] Unknown6() -> unknown<0x2>;
	@version(3.0.0+)
	@undocumented
	[7] Unknown7() -> unknown<0x1>;
	@version(3.0.0+)
	@undocumented
	[8] Unknown8() -> unknown<0x1>;
}

interface nn::usb::pd::detail::IPdManager is usb:pd {
	@undocumented
	[0] Unknown0() -> object<nn::usb::pd::detail::IPdSession>;
}

@version(1.0.0)
interface nn::usb::pd::detail::IPdManufactureManager {
	@undocumented
	[0] Unknown0() -> object<nn::usb::pd::detail::IPdManufactureSession>;
}

@version(1.0.0)
interface nn::usb::pd::detail::IPdManufactureSession {
	@undocumented
	[0] Unknown0() -> unknown<0x2>;
	@undocumented
	[1] Unknown1() -> unknown<0x2>;
	@undocumented
	[2] Unknown2() -> unknown<0x2>;
	@undocumented
	[3] Unknown3() -> unknown<0x2>;
}

interface nn::usb::pd::detail::IPdSession {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> unknown<0x14>;
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5();
	@undocumented
	[6] Unknown6(unknown<0x1>);
}

interface nn::usb::pm::IPmService is usb:pm {
	@undocumented
	[0] Unknown0() -> handle<copy>;
	@undocumented
	[1] Unknown1() -> buffer<unknown, 0x6>;
	@undocumented
	[2] Unknown2() -> handle<copy>;
	@undocumented
	[3] Unknown3() -> unknown<0x4>;
	@undocumented
	[4] Unknown4(unknown<0x8>);
	@undocumented
	[5] Unknown5(unknown<0x4>) -> unknown<0x4>;
}

interface nn::visrv::sf::IApplicationDisplayService {
	[100] GetRelayService() -> object<nns::hosbinder::IHOSBinderDriver>;
	[101] GetSystemDisplayService() -> object<nn::visrv::sf::ISystemDisplayService>;
	[102] GetManagerDisplayService() -> object<nn::visrv::sf::IManagerDisplayService>;
	@version(2.0.0+)
	[103] GetIndirectDisplayTransactionService() -> object<nns::hosbinder::IHOSBinderDriver>;

	[1000] ListDisplays() -> (u64, buffer<nn::vi::DisplayInfo[], 0x6>);

	[1010] OpenDisplay(nn::vi::DisplayName) -> u64;
	[1011] OpenDefaultDisplay() -> u64;

	[1020] CloseDisplay(u64);

	[1101] SetDisplayEnabled(b8, u64);
	[1102] GetDisplayResolution(u64) -> (u64, u64);

	[2020] OpenLayer(nn::vi::DisplayName, u64, nn::applet::AppletResourceUserId, pid) -> (u64, buffer<bytes, 0x6>);
	[2021] CloseLayer(u64);

	[2030] CreateStrayLayer(u32, u64) -> (u64, u64, buffer<bytes, 0x6>);
	[2031] DestroyStrayLayer(u64);

	[2101] SetLayerScalingMode(u32, u64);

	@version(2.0.0+)
	[2450] GetIndirectLayerImageMap(u64, u64, u64, nn::applet::AppletResourceUserId, pid) -> (u64, u64, buffer<bytes, 0x46>);
	@version(2.0.0+)
	[2451] GetIndirectLayerImageCropMap(f32, f32, f32, f32, u64, u64, u64, nn::applet::AppletResourceUserId, pid) -> (u64, u64, buffer<bytes, 0x46>);

	@version(2.0.0+)
	[2460] GetIndirectLayerImageRequiredMemoryInfo(u64, u64) -> (u64, u64);

	[5202] GetDisplayVsyncEvent(u64) -> handle<copy>;
	@version(2.0.0+)
	[5203] GetDisplayVsyncEventForDebug(u64) -> handle<copy>;
}

interface nn::visrv::sf::IApplicationRootService is vi:u {
	[0] GetDisplayService(u32) -> object<nn::visrv::sf::IApplicationDisplayService>;
}

interface nn::visrv::sf::IManagerDisplayService {
	@version(4.0.0+)
	[200] AllocateProcessHeapBlock(u64) -> u64;
	@version(4.0.0+)
	[201] FreeProcessHeapBlock(u64);

	@version(3.0.0+)
	[1102] GetDisplayResolution(u64) -> (u64, u64);

	[2010] CreateManagedLayer(u32, u64, nn::applet::AppletResourceUserId) -> u64;
	[2011] DestroyManagedLayer(u64);

	@version(2.0.0+)
	[2050] CreateIndirectLayer() -> u64;
	@version(2.0.0+)
	[2051] DestroyIndirectLayer(u64);
	@version(2.0.0+)
	[2052] CreateIndirectProducerEndPoint(u64, nn::applet::AppletResourceUserId) -> u64;
	@version(2.0.0+)
	[2053] DestroyIndirectProducerEndPoint(u64);
	@version(2.0.0+)
	[2054] CreateIndirectConsumerEndPoint(u64, nn::applet::AppletResourceUserId) -> u64;
	@version(2.0.0+)
	[2055] DestroyIndirectConsumerEndPoint(u64);

	[2300] AcquireLayerTexturePresentingEvent(u64) -> handle<copy>;
	[2301] ReleaseLayerTexturePresentingEvent(u64);
	[2302] GetDisplayHotplugEvent(u64) -> handle<copy>;

	[2402] GetDisplayHotplugState(u64) -> u32;

	@version(4.0.0+)
	[2501] GetCompositorErrorInfo(u64, u64) -> (u32, buffer<nn::vi::CompositorError, 0x16>);

	@version(4.0.0+)
	[2601] GetDisplayErrorEvent(u64) -> handle<copy>;

	[4201] SetDisplayAlpha(f32, u64);

	[4203] SetDisplayLayerStack(u32, u64);

	[4205] SetDisplayPowerState(u32, u64);
	@version(4.0.0+)
	[4206] SetDefaultDisplay(u64);

	[6000] AddToLayerStack(u32, u64);
	[6001] RemoveFromLayerStack(u32, u64);
	@version(2.0.0+)
	[6002] SetLayerVisibility(b8, u64);

	[7000] SetContentVisibility(b8);

	[8000] SetConductorLayer(b8, u64);

	@version(2.0.0+)
	[8100] SetIndirectProducerFlipOffset(u64, u64, nn::TimeSpan);

	@version(4.0.0+)
	[8200] CreateSharedBufferStaticStorage(u64, buffer<nn::vi::fbshare::SharedMemoryPoolLayout, 0x15>) -> nn::vi::fbshare::SharedBufferHandle;
	@version(4.0.0+)
	[8201] CreateSharedBufferTransferMemory(u64, handle<copy>, buffer<nn::vi::fbshare::SharedMemoryPoolLayout, 0x15>) -> nn::vi::fbshare::SharedBufferHandle;
	@version(4.0.0+)
	[8202] DestroySharedBuffer(nn::vi::fbshare::SharedBufferHandle);
	@version(4.0.0+)
	[8203] BindSharedLowLevelLayerToManagedLayer(nn::vi::DisplayName, u64, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[8204] BindSharedLowLevelLayerToIndirectLayer(u64, nn::applet::AppletResourceUserId, pid);

	@version(4.0.0+)
	[8207] UnbindSharedLowLevelLayer(u64);
	@version(4.0.0+)
	[8208] ConnectSharedLowLevelLayerToSharedBuffer(u64, nn::vi::fbshare::SharedBufferHandle);
	@version(4.0.0+)
	[8209] DisconnectSharedLowLevelLayerFromSharedBuffer(u64);
	@version(4.0.0+)
	[8210] CreateSharedLayer(nn::applet::AppletResourceUserId) -> nn::vi::fbshare::SharedLayerHandle;
	@version(4.0.0+)
	[8211] DestroySharedLayer(nn::vi::fbshare::SharedLayerHandle);

	@version(4.0.0+)
	[8216] AttachSharedLayerToLowLevelLayer(nn::vi::fbshare::SharedLayerTextureIndexList, nn::vi::fbshare::SharedLayerHandle, u64);
	@version(4.0.0+)
	[8217] ForceDetachSharedLayerFromLowLevelLayer(nn::vi::fbshare::SharedLayerHandle);
	@version(4.0.0+)
	[8218] StartDetachSharedLayerFromLowLevelLayer(nn::vi::fbshare::SharedLayerHandle);
	@version(4.0.0+)
	[8219] FinishDetachSharedLayerFromLowLevelLayer(nn::vi::fbshare::SharedLayerHandle);
	@version(4.0.0+)
	[8220] GetSharedLayerDetachReadyEvent(nn::vi::fbshare::SharedLayerHandle) -> handle<copy>;
	@version(4.0.0+)
	[8221] GetSharedLowLevelLayerSynchronizedEvent(u64) -> handle<copy>;
	@version(4.0.0+)
	[8222] CheckSharedLowLevelLayerSynchronized(u64) -> u64;
	@version(4.0.0+)
	[8223] RegisterSharedBufferImporterAruid(nn::vi::fbshare::SharedBufferHandle, nn::applet::AppletResourceUserId);
	@version(4.0.0+)
	[8224] UnregisterSharedBufferImporterAruid(nn::vi::fbshare::SharedBufferHandle, nn::applet::AppletResourceUserId);

	@version(4.0.0+)
	[8227] CreateSharedBufferProcessHeap(u64, buffer<nn::vi::fbshare::SharedMemoryPoolLayout, 0x15>) -> nn::vi::fbshare::SharedBufferHandle;
	@version(4.0.0+)
	[8228] GetSharedLayerLayerStacks(nn::vi::fbshare::SharedLayerHandle) -> u32;
	@version(4.0.0+)
	[8229] SetSharedLayerLayerStacks(u32, nn::vi::fbshare::SharedLayerHandle);

	@version(4.0.0+)
	[8291] PresentDetachedSharedFrameBufferToLowLevelLayer(nn::vi::fbshare::SharedBufferHandle, u64, u64);
	@version(4.0.0+)
	[8292] FillDetachedSharedFrameBufferColor(u32, u32, u32, u32, u32, nn::vi::fbshare::SharedBufferHandle, u64);
	@version(4.0.0+)
	[8293] GetDetachedSharedFrameBufferImage(nn::vi::fbshare::SharedBufferHandle, u64) -> (u64, buffer<bytes, 0x6>);
	@version(4.0.0+)
	[8294] SetDetachedSharedFrameBufferImage(u32, nn::vi::fbshare::SharedBufferHandle, u64, buffer<bytes, 0x5>);
	@version(4.0.0+)
	[8295] CopyDetachedSharedFrameBufferImage(u32, u32, nn::vi::fbshare::SharedBufferHandle, u64, u64);
	@version(4.0.0+)
	[8296] SetDetachedSharedFrameBufferSubImage(u32, u32, u32, u32, u32, u32, nn::vi::fbshare::SharedBufferHandle, u64, buffer<bytes, 0x5>);
	@version(4.0.0+)
	[8297] GetSharedFrameBufferContentParameter(nn::vi::fbshare::SharedBufferHandle, u64) -> (u32, nn::vi::CropRegion, u32, u32, u32);
}

interface nn::visrv::sf::IManagerRootService is vi:m {
	[2] GetDisplayService(u32) -> object<nn::visrv::sf::IApplicationDisplayService>;
	[3] GetDisplayServiceWithProxyNameExchange(nn::vi::ProxyName, u32) -> object<nn::visrv::sf::IApplicationDisplayService>;
}

interface nn::visrv::sf::ISystemDisplayService {
	[1200] GetZOrderCountMin(u64) -> u64;

	[1202] GetZOrderCountMax(u64) -> u64;
	[1203] GetDisplayLogicalResolution(u64) -> (u32, u32);
	@version(3.0.0+)
	[1204] SetDisplayMagnification(u32, u32, u32, u32, u64);

	[2201] SetLayerPosition(f32, f32, u64);

	[2203] SetLayerSize(u64, u64, u64);
	[2204] GetLayerZ(u64) -> u64;
	[2205] SetLayerZ(u64, u64);

	[2207] SetLayerVisibility(b8, u64);

	[2209] SetLayerAlpha(f32, u64);

	[2312] CreateStrayLayer(u32, u64) -> (u64, u64, buffer<bytes, 0x6>);

	@version(2.0.0+)
	[2400] OpenIndirectLayer(u64, nn::applet::AppletResourceUserId, pid) -> (u64, buffer<bytes, 0x6>);
	@version(2.0.0+)
	[2401] CloseIndirectLayer(u64);
	@version(2.0.0+)
	[2402] FlipIndirectLayer(u64);

	[3000] ListDisplayModes(u64) -> (u64, buffer<nn::vi::DisplayModeInfo[], 0x6>);
	[3001] ListDisplayRgbRanges(u64) -> (u64, buffer<u32[], 0x6>);
	[3002] ListDisplayContentTypes(u64) -> (u64, buffer<u32[], 0x6>);

	[3200] GetDisplayMode(u64) -> nn::vi::DisplayModeInfo;
	[3201] SetDisplayMode(u64, nn::vi::DisplayModeInfo);
	[3202] GetDisplayUnderscan(u64) -> u64;
	[3203] SetDisplayUnderscan(u64, u64);
	[3204] GetDisplayContentType(u64) -> u32;
	[3205] SetDisplayContentType(u32, u64);
	[3206] GetDisplayRgbRange(u64) -> u32;
	[3207] SetDisplayRgbRange(u32, u64);
	[3208] GetDisplayCmuMode(u64) -> u32;
	[3209] SetDisplayCmuMode(u32, u64);
	[3210] GetDisplayContrastRatio(u64) -> f32;
	[3211] SetDisplayContrastRatio(f32, u64);

	[3214] GetDisplayGamma(u64) -> f32;
	[3215] SetDisplayGamma(f32, u64);
	[3216] GetDisplayCmuLuma(u64) -> f32;
	[3217] SetDisplayCmuLuma(f32, u64);

	@version(4.0.0+)
	[8225] GetSharedBufferMemoryHandleId(nn::vi::fbshare::SharedBufferHandle, nn::applet::AppletResourceUserId, pid) -> (nn::vi::native::NativeMemoryHandleId, u64, buffer<nn::vi::fbshare::SharedMemoryPoolLayout, 0x16>);

	@version(4.0.0+)
	[8250] OpenSharedLayer(nn::vi::fbshare::SharedLayerHandle, nn::applet::AppletResourceUserId, pid);
	@version(4.0.0+)
	[8251] CloseSharedLayer(nn::vi::fbshare::SharedLayerHandle);
	@version(4.0.0+)
	[8252] ConnectSharedLayer(nn::vi::fbshare::SharedLayerHandle);
	@version(4.0.0+)
	[8253] DisconnectSharedLayer(nn::vi::fbshare::SharedLayerHandle);
	@version(4.0.0+)
	[8254] AcquireSharedFrameBuffer(nn::vi::fbshare::SharedLayerHandle) -> (nn::vi::native::NativeSync, nn::vi::fbshare::SharedLayerTextureIndexList, u64);
	@version(4.0.0+)
	[8255] PresentSharedFrameBuffer(nn::vi::native::NativeSync, nn::vi::CropRegion, u32, u32, nn::vi::fbshare::SharedLayerHandle, u64);
	@version(4.0.0+)
	[8256] GetSharedFrameBufferAcquirableEvent(nn::vi::fbshare::SharedLayerHandle) -> handle<copy>;
	@version(4.0.0+)
	[8257] FillSharedFrameBufferColor(u32, u32, u32, u32, nn::vi::fbshare::SharedLayerHandle, u64);
}

interface nn::visrv::sf::ISystemRootService is vi:s {
	[1] GetDisplayService(u32) -> object<nn::visrv::sf::IApplicationDisplayService>;

	[3] GetDisplayServiceWithProxyNameExchange(nn::vi::ProxyName, u32) -> object<nn::visrv::sf::IApplicationDisplayService>;
}

interface nn::wlan::detail::IInfraManager is wlan:inf {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2() -> unknown<0x6>;
	@undocumented
	[3] Unknown3(buffer<unknown, 0x15>);
	@undocumented
	[4] Unknown4();
	@version(1.0.0-3.0.0)
	@undocumented
	[5] Unknown5(unknown<0x7c>);
	@version(4.0.0+)
	@undocumented
	[5] Unknown5(unknown<0x80>);
	@undocumented
	[6] Unknown6();
	@undocumented
	[7] Unknown7();
	@undocumented
	[8] Unknown8(unknown<0x4>) -> handle<copy>;
	@undocumented
	[9] Unknown9() -> unknown<0x3c>;
	@undocumented
	[10] Unknown10() -> unknown<0x4>;
	@undocumented
	[11] Unknown11() -> buffer<unknown, 0x6>;
	@undocumented
	[12] Unknown12() -> unknown<0x4>;
	@undocumented
	[13] Unknown13(unknown<0x4>);
	@undocumented
	[14] Unknown14() -> buffer<unknown, 0xa>;
	@undocumented
	[15] Unknown15();
	@undocumented
	[16] Unknown16();
	@undocumented
	[17] Unknown17(unknown<0x8>, buffer<unknown, 0x9>);
	@version(3.0.0+)
	@undocumented
	[18] Unknown18() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[19] Unknown19(unknown<0x18>);
	@version(3.0.0+)
	@undocumented
	[20] Unknown20();
	@version(3.0.0+)
	@undocumented
	[21] Unknown21() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[22] Unknown22(unknown<0x4>);
	@version(3.0.0+)
	@undocumented
	[23] Unknown23(unknown<0x4>);
	@version(3.0.0+)
	@undocumented
	[24] Unknown24() -> unknown<0x5c>;
	@version(3.0.0+)
	@undocumented
	[25] Unknown25(unknown<0x2>);
	@version(4.0.0+)
	@undocumented
	[26] Unknown26();
	@version(4.0.0+)
	@undocumented
	[27] Unknown27();
}

interface nn::wlan::detail::ILocalGetActionFrame is wlan:lga {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> (unknown<0xc>, buffer<unknown, 0x6>);
}

interface nn::wlan::detail::ILocalGetFrame is wlan:lg {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
}

interface nn::wlan::detail::ILocalManager is wlan:lcl {
	@undocumented
	[0] Unknown0();
	@undocumented
	[1] Unknown1();
	@undocumented
	[2] Unknown2();
	@undocumented
	[3] Unknown3();
	@undocumented
	[4] Unknown4();
	@undocumented
	[5] Unknown5();
	@undocumented
	[6] Unknown6() -> unknown<0x6>;
	@version(1.0.0-3.0.0)
	@undocumented
	[7] Unknown7(unknown<0x80>);
	@version(4.0.0+)
	@undocumented
	[7] Unknown7(unknown<0x84>);
	@undocumented
	[8] Unknown8();
	@undocumented
	[9] Unknown9(buffer<unknown, 0x15>);
	@undocumented
	[10] Unknown10();
	@version(1.0.0-3.0.0)
	@undocumented
	[11] Unknown11(unknown<0x80>);
	@version(4.0.0+)
	@undocumented
	[11] Unknown11(unknown<0x84>);
	@undocumented
	[12] Unknown12();
	@version(1.0.0-3.0.0)
	@undocumented
	[13] Unknown13(unknown<0x80>);
	@version(4.0.0+)
	@undocumented
	[13] Unknown13(unknown<0x84>);
	@undocumented
	[14] Unknown14();
	@undocumented
	[15] Unknown15(unknown<0x10>);
	@undocumented
	[16] Unknown16(unknown<0x4>);
	@undocumented
	[17] Unknown17(unknown<0x4>) -> handle<copy>;
	@undocumented
	[18] Unknown18() -> unknown<0x3c>;
	@undocumented
	[19] Unknown19() -> buffer<unknown, 0x16>;
	@undocumented
	[20] Unknown20() -> handle<copy>;
	@undocumented
	[21] Unknown21() -> buffer<unknown, 0x16>;
	@undocumented
	[22] Unknown22() -> unknown<0x4>;
	@undocumented
	[23] Unknown23() -> unknown<0x50>;
	@undocumented
	[24] Unknown24(unknown<0x4>, buffer<unknown, 0x5>) -> unknown<0x4>;
	@undocumented
	[25] Unknown25(unknown<0x4>);
	@undocumented
	[26] Unknown26(buffer<unknown, 0x5>);
	@undocumented
	[27] Unknown27(unknown<0x4>);
	@undocumented
	[28] Unknown28(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x4>;
	@undocumented
	[29] Unknown29(unknown<0x4>);
	@undocumented
	[30] Unknown30(unknown<0x8>);
	@undocumented
	[31] Unknown31(unknown<0x2>) -> unknown<0x4>;
	@undocumented
	[32] Unknown32(unknown<0x4>, buffer<unknown, 0x19>);
	@undocumented
	[33] Unknown33(unknown<0x4>, buffer<unknown, 0x19>);
	@undocumented
	[34] Unknown34(buffer<unknown, 0x19>) -> buffer<unknown, 0x6>;
	@undocumented
	[35] Unknown35(unknown<0x10>, buffer<unknown, 0x5>);
	@undocumented
	[36] Unknown36(buffer<unknown, 0x5>);
	@undocumented
	[37] Unknown37();
	@undocumented
	[38] Unknown38(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x4>;
	@undocumented
	[39] Unknown39(unknown<0x4>);
	@undocumented
	[40] Unknown40(unknown<0x8>);
	@undocumented
	[41] Unknown41(unknown<0x4>) -> unknown<0x4>;
	@undocumented
	[42] Unknown42(unknown<0x4>);
	@undocumented
	[43] Unknown43() -> unknown<0x4>;
	@undocumented
	[44] Unknown44(unknown<0x4>);
	@version(4.0.0+)
	@undocumented
	[45] Unknown45();
	@version(4.0.0+)
	@undocumented
	[46] Unknown46();
	@version(4.0.0+)
	@undocumented
	[47] Unknown47();
	@version(4.0.0+)
	@undocumented
	[48] Unknown48();
}

interface nn::wlan::detail::ISocketGetFrame is wlan:sg {
	@undocumented
	[0] Unknown0(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
}

interface nn::wlan::detail::ISocketManager is wlan:soc {
	@undocumented
	[0] Unknown0(buffer<unknown, 0x5>);
	@undocumented
	[1] Unknown1(unknown<0x4>);
	@undocumented
	[2] Unknown2(unknown<0x4>, buffer<unknown, 0x9>) -> unknown<0x4>;
	@undocumented
	[3] Unknown3(unknown<0x4>);
	@undocumented
	[4] Unknown4(unknown<0x8>);
	@undocumented
	[5] Unknown5(unknown<0x2>) -> unknown<0x4>;
	@undocumented
	[6] Unknown6() -> unknown<0x6>;
	@undocumented
	[7] Unknown7(unknown<0x1>);
	@undocumented
	[8] Unknown8() -> unknown<0x8>;
	@undocumented
	[9] Unknown9(unknown<0x4>, handle<copy>, handle<copy>, handle<copy>, handle<copy>, handle<copy>);
	@undocumented
	[10] Unknown10();
	@undocumented
	[11] Unknown11();
}

interface nn::xcd::detail::ISystemServer is xcd:sys {
	@undocumented
	[0] Unknown0(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[1] Unknown1(unknown<0x10>);
	@undocumented
	[2] Unknown2(unknown<0x8>) -> unknown<0x1>;
	@undocumented
	[3] Unknown3(unknown<0x10>);
	@undocumented
	[4] Unknown4(unknown<0x8>) -> unknown<0x20>;
	@undocumented
	[5] Unknown5(unknown<0x8>);

	@undocumented
	[10] Unknown10(unknown<0x8>) -> (handle<copy>, handle<copy>);
	@undocumented
	[11] Unknown11(unknown<0x8>) -> buffer<unknown, 0x1a>;
	@undocumented
	[12] Unknown12(unknown<0x10>);
	@undocumented
	[13] Unknown13(unknown<0x8>);
	@undocumented
	[14] Unknown14(unknown<0x30>);
	@undocumented
	[15] Unknown15(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[16] Unknown16(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[17] Unknown17(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[18] Unknown18(unknown<0x10>);
	@undocumented
	[19] Unknown19(unknown<0x8>, buffer<unknown, 0x19>);
	@undocumented
	[20] Unknown20(unknown<0x8>, buffer<unknown, 0x19>);

	@undocumented
	[101] Unknown101() -> unknown<0x8>;
	@undocumented
	[102] Unknown102() -> unknown<0x8>;
}

interface nns::nvdrv::INvDrvDebugFSServices is nvdrvdbg {
	@undocumented
	[0] Unknown0(handle<copy>) -> unknown<0x4>;
	@undocumented
	[1] Unknown1(unknown<0x4>);
	@undocumented
	[2] Unknown2(unknown<0x4>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[3] Unknown3(unknown<0x4>, buffer<unknown, 0x5>) -> (unknown<0x4>, buffer<unknown, 0x6>);
	@undocumented
	[4] Unknown4(unknown<0x4>, buffer<unknown, 0x5>, buffer<unknown, 0x5>) -> unknown<0x4>;
}

interface nns::nvdrv::INvDrvServices is nvdrv:a, nvdrv:s, nvdrv:t, nvdrv {
	[0] Unknown0(buffer<unknown, 0x5>) -> unknown<0x8>;
	[1] Unknown1(unknown<0x8>, buffer<unknown, 0x21>) -> (unknown<0x4>, buffer<unknown, 0x22>);
	[2] Unknown2(unknown<0x4>) -> unknown<0x4>;
	[3] Unknown3(unknown<0x4>, handle<copy>, handle<copy>) -> unknown<0x4>;
	[4] Unknown4(unknown<0x8>) -> (unknown<0x4>, handle<copy>);
	[5] Unknown5(unknown<0x8>, handle<copy>) -> unknown<0x4>;
	[6] Unknown6() -> unknown<0x24>;
	[7] Unknown7(unknown<0x8>) -> unknown<0x4>;
	[8] Unknown8(unknown<0x8>, pid) -> unknown<0x4>;
	[9] Unknown9();
	@version(3.0.0+)
	[10] Unknown10(unknown<0x4>, handle<copy>) -> unknown<0x4>;
	@version(3.0.0+)
	[11] Unknown11(unknown<0x8>, buffer<unknown, 0x21>, buffer<unknown, 0x21>) -> (unknown<0x4>, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[12] Unknown12(unknown<0x8>, buffer<unknown, 0x21>) -> (unknown<0x4>, buffer<unknown, 0x22>, buffer<unknown, 0x22>);
	@version(3.0.0+)
	[13] Unknown13(unknown<0x8>);
}

interface nv::MemoryProfiler::IMemoryProfiler {
	[0] Unknown0(unknown) -> unknown;
	[1] Unknown1(unknown) -> unknown;
}

interface nv::gemcontrol::INvGemControl is nvgem:c {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1() -> (unknown<0x4>, handle<copy>);
	@undocumented
	[2] Unknown2(unknown<0x1>) -> unknown<0x4>;
	@undocumented
	[3] Unknown3(unknown<0x10>) -> unknown<0x4>;
	@undocumented
	[4] Unknown4(unknown<0x10>) -> unknown<0x4>;
	@undocumented
	[5] Unknown5() -> unknown<0x10>;
	@undocumented
	[6] Unknown6() -> unknown<0x4>;
	@version(3.0.0+)
	@undocumented
	[7] Unknown7() -> unknown<0x10>;
}

interface nv::gemcoredump::INvGemCoreDump is nvgem:cd {
	@undocumented
	[0] Unknown0() -> unknown<0x4>;
	@undocumented
	[1] Unknown1() -> unknown<0x10>;
	@undocumented
	[2] Unknown2() -> (unknown<0x4>, buffer<unknown, 0x22>);
}
